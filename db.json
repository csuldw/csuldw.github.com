{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/freesky/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/freesky/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/freesky/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/freesky/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/freesky/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/freesky/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0},{"_id":"themes/freesky/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0},{"_id":"themes/freesky/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/freesky/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/freesky/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/freesky/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/freesky/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/freesky/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/freesky/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0},{"_id":"themes/freesky/source/js/nav-toggle.js","path":"js/nav-toggle.js","modified":0},{"_id":"themes/freesky/source/js/motion_global.js","path":"js/motion_global.js","modified":0},{"_id":"themes/freesky/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":0},{"_id":"themes/freesky/source/js/lazyload.js","path":"js/lazyload.js","modified":0},{"_id":"themes/freesky/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0},{"_id":"themes/freesky/source/js/helpers.js","path":"js/helpers.js","modified":0},{"_id":"themes/freesky/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0},{"_id":"themes/freesky/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0},{"_id":"themes/freesky/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/freesky/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/freesky/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/freesky/source/images/favicon.ico","path":"images/favicon.ico","modified":0},{"_id":"themes/freesky/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/freesky/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/freesky/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/freesky/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/freesky/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/freesky/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/freesky/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/freesky/source/images/bkdefault_avatar.jpg","path":"images/bkdefault_avatar.jpg","modified":0},{"_id":"themes/freesky/source/images/bg.png","path":"images/bg.png","modified":0},{"_id":"themes/freesky/source/fonts/icon-linecons/selection.json","path":"fonts/icon-linecons/selection.json","modified":0},{"_id":"themes/freesky/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":0},{"_id":"themes/freesky/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":0},{"_id":"themes/freesky/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":0},{"_id":"themes/freesky/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":0},{"_id":"themes/freesky/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":0},{"_id":"themes/freesky/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":0},{"_id":"themes/freesky/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":0},{"_id":"themes/freesky/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":0},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/selection.json","path":"fonts/icon-fifty-shades/selection.json","modified":0},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":0},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":0},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":0},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":0},{"_id":"themes/freesky/source/fonts/icon-feather/selection.json","path":"fonts/icon-feather/selection.json","modified":0},{"_id":"themes/freesky/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":0},{"_id":"themes/freesky/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":0},{"_id":"themes/freesky/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":0},{"_id":"themes/freesky/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":0},{"_id":"themes/freesky/source/fonts/icon-default/selection.json","path":"fonts/icon-default/selection.json","modified":0},{"_id":"themes/freesky/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":0},{"_id":"themes/freesky/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":0},{"_id":"themes/freesky/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":0},{"_id":"themes/freesky/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":0},{"_id":"themes/freesky/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"source/CNAME","path":"CNAME","modified":0},{"_id":"source/resume/resume.pdf","path":"resume/resume.pdf","modified":0},{"_id":"source/resume/resume-pdf.pdf","path":"resume/resume-pdf.pdf","modified":0},{"_id":"source/images/favicon2.ico","path":"images/favicon2.ico","modified":0},{"_id":"source/images/favicon1.ico","path":"images/favicon1.ico","modified":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0},{"_id":"source/images/default_avatar.jpg","path":"images/default_avatar.jpg","modified":0},{"_id":"source/images/bg.png","path":"images/bg.png","modified":0},{"_id":"source/assets/svg/feature engineering.svg","path":"assets/svg/feature engineering.svg","modified":0},{"_id":"source/assets/pdf/Slope One.pdf","path":"assets/pdf/Slope One.pdf","modified":0},{"_id":"source/assets/pdf/How to Select a Good Training-data Subset for Transcriptionsubmodular active selection from sequences.pdf","path":"assets/pdf/How to Select a Good Training-data Subset for Transcriptionsubmodular active selection from sequences.pdf","modified":0},{"_id":"source/assets/pdf/Full-CheatSheet-on-Machine-Learning-Algorithms(Python-and-R-Codes).pdf","path":"assets/pdf/Full-CheatSheet-on-Machine-Learning-Algorithms(Python-and-R-Codes).pdf","modified":0},{"_id":"source/assets/pdf/A Few Useful Things to Know about Machine Learning.pdf","path":"assets/pdf/A Few Useful Things to Know about Machine Learning.pdf","modified":0},{"_id":"source/assets/pdf/2009- Learning from Imbalanced Data.pdf","path":"assets/pdf/2009- Learning from Imbalanced Data.pdf","modified":0},{"_id":"source/assets/images/zhifubao_denote.jpg","path":"assets/images/zhifubao_denote.jpg","modified":0},{"_id":"source/assets/images/weixin_denote.jpg","path":"assets/images/weixin_denote.jpg","modified":0},{"_id":"source/assets/images/submolarity.png","path":"assets/images/submolarity.png","modified":0},{"_id":"source/assets/images/navigate1.png","path":"assets/images/navigate1.png","modified":0},{"_id":"source/assets/images/navigate0.png","path":"assets/images/navigate0.png","modified":0},{"_id":"source/assets/images/navigate.png","path":"assets/images/navigate.png","modified":0},{"_id":"source/assets/images/feature selection.png","path":"assets/images/feature selection.png","modified":0},{"_id":"source/assets/images/feature engineering.tif","path":"assets/images/feature engineering.tif","modified":0},{"_id":"source/assets/images/feature engineering.png","path":"assets/images/feature engineering.png","modified":0},{"_id":"source/assets/images/face.jpg","path":"assets/images/face.jpg","modified":0},{"_id":"source/assets/images/face-h200.jpg","path":"assets/images/face-h200.jpg","modified":0},{"_id":"source/assets/images/denote.xcf","path":"assets/images/denote.xcf","modified":0},{"_id":"source/assets/images/denote.jpg","path":"assets/images/denote.jpg","modified":0},{"_id":"source/assets/images/2015111502.png","path":"assets/images/2015111502.png","modified":0},{"_id":"source/assets/images/2015111501.png","path":"assets/images/2015111501.png","modified":0},{"_id":"source/assets/images/20151029183224.png","path":"assets/images/20151029183224.png","modified":0},{"_id":"source/assets/images/20151029094653.png","path":"assets/images/20151029094653.png","modified":0},{"_id":"source/assets/blogImg/face.png","path":"assets/blogImg/face.png","modified":0},{"_id":"source/assets/blogImg/devin.png","path":"assets/blogImg/devin.png","modified":0},{"_id":"source/assets/articleImg/2015-12-21-machine-learning-algorithms_2.jpg","path":"assets/articleImg/2015-12-21-machine-learning-algorithms_2.jpg","modified":0},{"_id":"source/assets/articleImg/2015-12-21-machine-learning-algorithms_1.jpg","path":"assets/articleImg/2015-12-21-machine-learning-algorithms_1.jpg","modified":0},{"_id":"source/assets/articleImg/2015-07-21 randomForest分类器的方法png.png","path":"assets/articleImg/2015-07-21 randomForest分类器的方法png.png","modified":0},{"_id":"source/assets/articleImg/2014-12-21-performances-of-sort-algs.png","path":"assets/articleImg/2014-12-21-performances-of-sort-algs.png","modified":0},{"_id":"source/assets/articleImg/2014-12-21-insert-sort.png","path":"assets/articleImg/2014-12-21-insert-sort.png","modified":0},{"_id":"source/assets/articleImg/170.jpg","path":"assets/articleImg/170.jpg","modified":0},{"_id":"source/README.txt","path":"README.txt","modified":0},{"_id":"source/assets/articleImg/2014-12-21-mergeSort-2.png","path":"assets/articleImg/2014-12-21-mergeSort-2.png","modified":0},{"_id":"source/assets/articleImg/2014-12-21-mergeSort-1.png","path":"assets/articleImg/2014-12-21-mergeSort-1.png","modified":0},{"_id":"source/assets/docs/Merge-sort.docx","path":"assets/docs/Merge-sort.docx","modified":0}],"Cache":[{"_id":"source/CNAME","shasum":"f892e9aacb3418889e5aff6ed301a5a7f381ecf7","modified":1447919444424},{"_id":"source/README.txt","shasum":"036dc3f272b17e201203dde040410df9bc5e298c","modified":1447921574931},{"_id":"source/_draft/2014-12-20-QuikSort.md","shasum":"4864244d06a3736094be8042dbb4846b443a7697","modified":1447980960872},{"_id":"source/_draft/2015-03-18-machine-learning-top10-algorithms.md","shasum":"0d0c8489362c6aaded1254739d81ba0a99fcc9ba","modified":1447988744608},{"_id":"source/_draft/2015-11-05 photo show 1.md","shasum":"1552e95d037f401ed2eb5c35cee3225d85fe2c49","modified":1447919444425},{"_id":"source/_draft/black_template.md","shasum":"cf112328d4b3ed067ab9868db3459ed709892aab","modified":1448086906945},{"_id":"source/_draft/git-command.md","shasum":"c57191a810ec4b9ef64c678521642682709210ed","modified":1447919444426},{"_id":"source/_posts/2014-11-19-linux-tree-command.md","shasum":"2e92769f93ade39c5763d37631680b689b18561d","modified":1448073603651},{"_id":"source/_posts/2014-12-19-The-difference-of-list-and-tupple.md","shasum":"7b0103db3fe05744225cd24c9ffe8582e1c798ea","modified":1447919444427},{"_id":"source/_posts/2014-12-21-InsertSort.md","shasum":"0bf4bb5d4304f074cc211e0f30b0ba10287236fc","modified":1448168912301},{"_id":"source/_posts/2015-03-26-sublimeLinter.md","shasum":"9d3aa7e0610c6d0f45edf679bf868225c6cfd11a","modified":1447919444427},{"_id":"source/_posts/2015-04-12-Syncing-a-fork.md","shasum":"dec9af1010db8f574bfc4c63bc5e02f72285d8c2","modified":1447919444429},{"_id":"source/_posts/2015-05-08-decision tree.md","shasum":"95b58778e01b8d2184a2e665860a55a23afafaff","modified":1447990247298},{"_id":"source/_posts/2015-05-21-KNN.md","shasum":"3f15b21f20949ebe5f820aba9e55a37ed0fee553","modified":1447919444430},{"_id":"source/_posts/2015-05-28-NB.md","shasum":"4f59c327372b441895c77e2e689b41e47aebf56d","modified":1447919444430},{"_id":"source/_posts/2015-05-31 scikit-learn training model's save and reused.md","shasum":"06085872e08f1b3444e980dadedb937f4674c940","modified":1447919444431},{"_id":"source/_posts/2015-06-03-K-means.md","shasum":"8167037eed8e8fb869ad8a8ec051814542626159","modified":1447919444431},{"_id":"source/_posts/2015-06-04-Apriori.md","shasum":"a9c3cd04b0d2c6c27f2ff1b48ff64a46fcf54d6f","modified":1447919444432},{"_id":"source/_posts/2015-06-10 Python simulate command.md","shasum":"17566b5c99c8f98edaa0fe30f5418fda817a801f","modified":1447919444432},{"_id":"source/_posts/2015-07-07-PDB.md","shasum":"adb96bcca8f0ff5ff532652e5ac84af28a547107","modified":1447919444432},{"_id":"source/_posts/2015-07-12-Adaboost.md","shasum":"770234407e5feb4eaa99b0e7d4d5e6b781cf0b1c","modified":1447919444434},{"_id":"source/_posts/2015-07-13-10 keys to successful machine learning for developers.md","shasum":"454050afed2bc69f2e74793eef7eb2938c5393f9","modified":1447919444435},{"_id":"source/_posts/2015-07-16 Python timer.md","shasum":"3eebacfc6fbbd59e9c464286bccb0468bd7a9d2a","modified":1447919444435},{"_id":"source/_posts/2015-07-18-a precision and recall.md","shasum":"398f74f4beaab0ff1e28acfce5bd4dd5ac592708","modified":1447919444436},{"_id":"source/_posts/2015-07-21-An-introduction-to-machine-learning-with-scikit-learn.md","shasum":"8555119cd1c18d01abc7ee2dbf13a8c5bce331cb","modified":1448073694794},{"_id":"source/_posts/2015-07-22  ensemble.md","shasum":"6322b075895d0b2481c372f7daefc0bf2591ec51","modified":1447919444437},{"_id":"source/_posts/2015-07-23 machine learning tips.md","shasum":"798877d301311bf135800d5fb7a8e49459d6360f","modified":1447919444437},{"_id":"source/_posts/2015-07-28 crossvalidation.md","shasum":"34dd25ed33dd291c5f05c0363b44846b874ac394","modified":1447919444438},{"_id":"source/_posts/2015-08-19 GBDT.md","shasum":"67db827e4d2c6397190dfa8a95909ca60dd25388","modified":1447943563132},{"_id":"source/_posts/2015-08-29 Summary.md","shasum":"e086edaea718e45b398eb90abd60a6b480588541","modified":1447919444439},{"_id":"source/_posts/2015-09-23 Machine learning materials.md","shasum":"2541d9a8bec7298c1fb2b3f9f272fca2bc7ea8b1","modified":1447919444440},{"_id":"source/_posts/2015-10-21 Windows git push no password.md","shasum":"97f98348fe34b8eaef95a67ece8595932259e998","modified":1447919444440},{"_id":"source/_posts/2015-10-24 feature engineering.md","shasum":"f6c9fda4e7242d42269389006236e3649bfedfbb","modified":1447919444441},{"_id":"source/_posts/2015-10-25 scikit-learn preprocessing.md","shasum":"24a918a45537bc153b7ba9ac53d23220c76f74cb","modified":1447919444442},{"_id":"source/_posts/2015-10-29 Python RegEx.md","shasum":"0044fdb3cf2401c82c48d9fb9f9afe3abdeaf3e9","modified":1447919444442},{"_id":"source/_posts/2015-11-03 Add header and footer to some file.md","shasum":"c6fecc69b2dedb966df7a40289a39e8a5bb0187e","modified":1447919444443},{"_id":"source/_posts/2015-11-15 normalization.md","shasum":"e020d29537c26f2cd33915390d51116b6bc55918","modified":1447919444443},{"_id":"source/_posts/2015-11-16 Download PDB file with wget command.md","shasum":"4ed0639610bee428bb54c1045b31d5862cef10ed","modified":1447919444444},{"_id":"source/_posts/2015-11-17 B=U-A.md","shasum":"ab269c4f6dba53b0bb64afc35e046b4e7e1db045","modified":1447919444444},{"_id":"source/_posts/2015-11-18 ExpNotes[1]-Extract protein sequences from a fasta file.md","shasum":"4b3540e74339929a258649e8ec48fbd397117503","modified":1447919444444},{"_id":"source/_posts/2015-11-21-machine-learning-algorithms.md","shasum":"442caecfec484c7e8fd7cee706ddb59889a089f3","modified":1448103525716},{"_id":"source/about/index.md","shasum":"18f2f65f088c634266f347153dbc7592065e4351","modified":1447919444446},{"_id":"source/assets/articleImg/2014-12-21-insert-sort.png","shasum":"24370eb131156791759d44db9e8c75a011b8273a","modified":1448072546563},{"_id":"source/assets/articleImg/2015-07-21 randomForest分类器的方法png.png","shasum":"630e283bda6b0e2f6876ffd8dc7d88b14915e139","modified":1447919444453},{"_id":"source/assets/blogImg/face.png","shasum":"5becca466c4cfc4ec0e960d6c0c8fa38ff4b1b21","modified":1447919444456},{"_id":"source/assets/images/20151029094653.png","shasum":"ff5e58b2f30fc5c86e240e54b5536f2165e5efea","modified":1447919444457},{"_id":"source/assets/images/20151029183224.png","shasum":"b2623009f05331ace037ee91ac30865c8b676d33","modified":1447919444458},{"_id":"source/assets/images/2015111501.png","shasum":"7123eb25c051675c0c4cd2dde18692feeb05ee77","modified":1447919444459},{"_id":"source/assets/images/2015111502.png","shasum":"948c97a5a53caf5e060852ae2494f054fa485b4d","modified":1447919444460},{"_id":"source/assets/images/face-h200.jpg","shasum":"f381cba4d44396afba110b82264a4bab5c797a0a","modified":1447919444471},{"_id":"source/assets/images/feature selection.png","shasum":"a02f4f12afeb0cb36377fcb5473ebc72691da71b","modified":1447919444504},{"_id":"source/assets/images/navigate.png","shasum":"15f88035457c248f3a28858cfeba6b6b41e85149","modified":1447919444504},{"_id":"source/assets/images/navigate0.png","shasum":"36fe69c672eb66b0ddabefe82ae4984273483622","modified":1447919444505},{"_id":"source/assets/images/navigate1.png","shasum":"27a994ac225d7ed2f21835641166207e547f73e4","modified":1447919444505},{"_id":"source/assets/svg/feature engineering.svg","shasum":"3c3dcee389a26b0294d056a9be9a4f35a83f2920","modified":1447919444539},{"_id":"source/categories/index.md","shasum":"6285e6f5c09dff3c29cde7bb00baf0df33c94f3e","modified":1447919444540},{"_id":"source/donation/index.md","shasum":"bc8a389066972f7a187785672b11566ccab1a15a","modified":1447919444541},{"_id":"source/images/default_avatar.jpg","shasum":"5becca466c4cfc4ec0e960d6c0c8fa38ff4b1b21","modified":1447919444546},{"_id":"source/images/favicon.ico","shasum":"aef77afa442d35d233ba17306fba28f115781d29","modified":1447919444546},{"_id":"source/images/favicon1.ico","shasum":"e954e61d2178e559c72acc85c701a4b8cc66585d","modified":1447919444547},{"_id":"source/images/favicon2.ico","shasum":"5c713499ccd8054767a01337f6ff9b86168f30cf","modified":1447919444547},{"_id":"source/instagram/index.ejs","shasum":"6c1fda4881fe03d0304a20dcbd3d55def72d5c90","modified":1447919444548},{"_id":"source/instagram/ins1.json","shasum":"43e6ff8d41b62fb926d98b72eb2ba475ee915ad1","modified":1447919444549},{"_id":"source/instagram/ins2.json","shasum":"1cef31a539a5f23d009fd5abd331ff71a1dc08c1","modified":1447919444550},{"_id":"source/resume/index.md","shasum":"74a0196abdb360d024de573b738c8cc37c48c89b","modified":1447919444551},{"_id":"source/resume/resume-pdf.md","shasum":"3d075d77e0e434c1fda319ad35ace3d8d2d90d70","modified":1447919444551},{"_id":"source/resume/resume.md","shasum":"5d1c2cb7c693afe42570a556a211361a6502744d","modified":1447919444554},{"_id":"source/tags/index.md","shasum":"2c31155ef43066ad82482079983cb5290e0ad658","modified":1447919444556},{"_id":"source/assets/articleImg/2014-12-21-performances-of-sort-algs.png","shasum":"16108a096336b79d5bca6cd4f43758e383cd39db","modified":1448073330222},{"_id":"source/assets/images/submolarity.png","shasum":"5396d8785bb68c5f7831284614bce9dbd2e50c47","modified":1447919444506},{"_id":"source/assets/images/weixin_denote.jpg","shasum":"23674bb7ce8e042d50a92bbf2bec01c722bc8960","modified":1447919444509},{"_id":"source/assets/images/zhifubao_denote.jpg","shasum":"1172d8a13eee6dadb1785a7d5f592e29c83ed854","modified":1447919444510},{"_id":"source/assets/pdf/Slope One.pdf","shasum":"2d38f623c7c904ecc4022443e1c22f379e89d653","modified":1447919444538},{"_id":"source/instagram/ins0.json","shasum":"1d0ccefbe2d41a61ff3df771e83830c95fa34bfc","modified":1447919444548},{"_id":"source/assets/pdf/A Few Useful Things to Know about Machine Learning.pdf","shasum":"98e43925cff9857667a7cb085cc029fc48623cc0","modified":1447919444531},{"_id":"source/assets/pdf/Full-CheatSheet-on-Machine-Learning-Algorithms(Python-and-R-Codes).pdf","shasum":"4065131ecd59de6a54556a122969d5fb28e76bd2","modified":1448086507133},{"_id":"source/resume/resume-pdf.pdf","shasum":"e822ed94a3168846d196addb9619ce4074472d4c","modified":1447919444553},{"_id":"source/resume/resume.pdf","shasum":"4bd6ba146f079555dfef2dff6e11b33702c48e32","modified":1447919444555},{"_id":"source/assets/blogImg/devin.png","shasum":"9c7922e5995a47a1264f37d462fd4d0679a7fc79","modified":1447919444456},{"_id":"source/assets/images/denote.jpg","shasum":"c954bb995905cc8a09c04990164a9f4930577589","modified":1447919444462},{"_id":"source/assets/images/face.jpg","shasum":"9c7922e5995a47a1264f37d462fd4d0679a7fc79","modified":1447919444473},{"_id":"source/assets/articleImg/2015-12-21-machine-learning-algorithms_1.jpg","shasum":"93cf7dfd762e2844efc08f52740afff3914f7e1e","modified":1448087775562},{"_id":"source/images/bg.png","shasum":"26b2ff0a42335d3b0ab3d5bcc6402b8afd8c9abc","modified":1447919444545},{"_id":"themes/freesky/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1446648948000},{"_id":"themes/freesky/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1446648949000},{"_id":"themes/freesky/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1446648949000},{"_id":"themes/freesky/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1446648949000},{"_id":"themes/freesky/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1446648949000},{"_id":"themes/freesky/source/css/_variables/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1446648949000},{"_id":"source/assets/articleImg/170.jpg","shasum":"0f284ae1baac6109e7565fd80b7c0d0f8f7ff899","modified":1447919444452},{"_id":"themes/freesky/README.md","shasum":"5a4d639cab24e85a51752a0d0509655c1200f1e8","modified":1446648938000},{"_id":"themes/freesky/_config.yml","shasum":"a0bfdeede6de9e1e8ea07b1ad1269aa4d4a73c07","modified":1446648938000},{"_id":"themes/freesky/bower.json","shasum":"f1e262dea42567b2df0d1d0476eac58d7614dcad","modified":1446648938000},{"_id":"themes/freesky/languages/de.yml","shasum":"3af67eda28640a99e17d06eec0c664e54e95fb2d","modified":1446648947000},{"_id":"themes/freesky/languages/default.yml","shasum":"513c22371c3085224c466c10c6b1dd2735877f04","modified":1446648947000},{"_id":"themes/freesky/languages/en.yml","shasum":"513c22371c3085224c466c10c6b1dd2735877f04","modified":1446648947000},{"_id":"themes/freesky/languages/fr-FR.yml","shasum":"694980cca651eca633fec7f63da6e69070a28669","modified":1446648947000},{"_id":"themes/freesky/languages/pt.yml","shasum":"18735138d4bf19e31c65276f9d7d25f49732a9cf","modified":1446648947000},{"_id":"themes/freesky/languages/ru.yml","shasum":"be6821b00c20dfe15717415fca3b1a5d719f4014","modified":1446648947000},{"_id":"themes/freesky/languages/zh-Hans.yml","shasum":"b7d8ec1129f9843b546c64284684a3d08378757f","modified":1446648947000},{"_id":"themes/freesky/languages/zh-hk.yml","shasum":"a36d81d609bb0fbfb1ca5f264c6e1c0d95fb9fae","modified":1446648947000},{"_id":"themes/freesky/languages/zh-tw.yml","shasum":"9fd6f672e503c50d6cc004df178387fc10be62db","modified":1446648947000},{"_id":"themes/freesky/layout/_layout.swig","shasum":"daf79383debd8d086cd3ec5d6ba2c0f37e8af3da","modified":1446648947000},{"_id":"themes/freesky/layout/_macro/about.swig","shasum":"924ce2a21ffd5c888411d3846cb1df9cee59e8c1","modified":1446648947000},{"_id":"themes/freesky/layout/_macro/archive-collapse.swig","shasum":"2e5a0b699a7ac58b49d487a5dcda10c1a76bc8df","modified":1446648947000},{"_id":"themes/freesky/layout/_macro/post-collapse.swig","shasum":"60766ca0cf5ba834d445c3304695d1a7ce0e1a36","modified":1446648947000},{"_id":"themes/freesky/layout/_macro/post.swig","shasum":"765a488615386abcc628f5169af42446924ad722","modified":1446648947000},{"_id":"themes/freesky/layout/_macro/sidebar.swig","shasum":"83536fac60881b2b415fe3c095aba6facc4b2d5e","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/footer.swig","shasum":"6e79d5f951e829957740d7142e951ac204a341d8","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/head.swig","shasum":"0e7a3b7e91051198e871ef5628a91d621c04928f","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/header.swig","shasum":"5ea31cd4d2895ab162d206b17c081e9f9ed8ec4e","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/old-browsers.swig","shasum":"3c4d930d34c234725065173780a23673e1c574f5","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/pagination.swig","shasum":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/search/swiftype.swig","shasum":"73e8294939bbbb46755798215c605ebe5af5918f","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/search/tinysou.swig","shasum":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/search.swig","shasum":"1b86eb85017599392071d1230171e900045f8e69","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/share/duoshuo_share.swig","shasum":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1446648947000},{"_id":"themes/freesky/layout/_partials/share/jiathis.swig","shasum":"12684840de632eb16e53ffa863166306a756fd4f","modified":1446648947000},{"_id":"themes/freesky/layout/_scripts/analytics/baidu-analytics.swig","shasum":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1446648948000},{"_id":"themes/freesky/layout/_scripts/analytics/facebook-sdk.swig","shasum":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1446648948000},{"_id":"themes/freesky/layout/_scripts/analytics/google-analytics.swig","shasum":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1446648948000},{"_id":"themes/freesky/layout/_scripts/analytics.swig","shasum":"5e1b2b547a8f07ea0e3ab2a97dac9cc7d1e13c9a","modified":1446648947000},{"_id":"themes/freesky/layout/_scripts/baidushare.swig","shasum":"640d4dda003f54a0dffa4508fba4d91ac0dcfa6e","modified":1446648947000},{"_id":"themes/freesky/layout/_scripts/bootstrap.scrollspy.swig","shasum":"0aad8d447567b683108b274c841c536b2daa176d","modified":1446648947000},{"_id":"themes/freesky/layout/_scripts/comments/disqus.swig","shasum":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1446648948000},{"_id":"themes/freesky/layout/_scripts/comments/duoshuo.swig","shasum":"c5643f07b121051460331489ab399137d2feb4b7","modified":1446648948000},{"_id":"themes/freesky/layout/_scripts/fancy-box.swig","shasum":"701dfc53d750635de2f08f08d072d6ceb83b636c","modified":1446648947000},{"_id":"themes/freesky/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1446648947000},{"_id":"themes/freesky/layout/_scripts/mathjax.swig","shasum":"e113e497075ac8681c665a7831657901cfa4fb68","modified":1446648947000},{"_id":"themes/freesky/layout/_scripts/motion.swig","shasum":"40439a4d4c8e8c2218da84ee1e586e11db9837be","modified":1446648947000},{"_id":"themes/freesky/layout/_scripts/pages/post-details.swig","shasum":"3ac70198258ab3c2bceca452864b68cc14a9debf","modified":1446648948000},{"_id":"themes/freesky/layout/_scripts/tinysou.swig","shasum":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1446648947000},{"_id":"themes/freesky/layout/about.swig","shasum":"463ae664816472351bf64e43de321a5a7b7fc75d","modified":1446648947000},{"_id":"themes/freesky/layout/archive.swig","shasum":"2f1e8ee59bc84def7ae9ee4d38c2b57e5cebc4b4","modified":1447604617553},{"_id":"themes/freesky/layout/category.swig","shasum":"a995b082f2fd9fcac604068c4558bdeafa5ba731","modified":1446648947000},{"_id":"themes/freesky/layout/index.swig","shasum":"836631665db2b37639028fbc3aaa0b96f059e45c","modified":1447603712492},{"_id":"themes/freesky/layout/page.swig","shasum":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1446648947000},{"_id":"themes/freesky/layout/post.swig","shasum":"e67a6aabe4d71cbcf01a4cace652424bd49acc9b","modified":1446648947000},{"_id":"themes/freesky/layout/tag.swig","shasum":"0b0a089f84e4e80433283e7772de95ce0d22f5e8","modified":1446648947000},{"_id":"themes/freesky/scripts/merge-configs.js","shasum":"2a47a2eb10c4491beffa8c5dd2a04cdb493ee80c","modified":1446648948000},{"_id":"themes/freesky/scripts/tags/center-quote.js","shasum":"99b66949f18398689b904907af23c013be1b978f","modified":1446648948000},{"_id":"themes/freesky/scripts/tags/full-image.js","shasum":"d44c660d4d6f61a17d5a19e195efa2241ee53c83","modified":1446648948000},{"_id":"themes/freesky/scripts/tags/group-pictures.js","shasum":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/back-to-top.styl","shasum":"dac21141c7893ab9de697a8183d3b3f4eb7f0a5a","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/buttons.styl","shasum":"cda511bbc13b1f54019a40d02089705d8945eccd","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/comments.styl","shasum":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/duoshuo.styl","shasum":"76e8e6f5200e5e6063be6643c1cf340a51af6619","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/gallery.styl","shasum":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/group-pictures.styl","shasum":"2a268e0b667c923b95cb562c904dca094cd3707b","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/jiathis.styl","shasum":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/pagination.styl","shasum":"9c087af392035aa89e700b07bda191105aed96da","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/posts-collapse.styl","shasum":"9df61e9f7d4ed30bfea5bc60ab79fe05d18e4415","modified":1446731252137},{"_id":"themes/freesky/source/css/_common/_component/posts-expand.styl","shasum":"0e0ffda818fc62cc9439207e13ee1ccf44d2faee","modified":1446727182651},{"_id":"themes/freesky/source/css/_common/_component/posts-type.styl","shasum":"f28f00b2acb0df0343e77400bcc8246b40ac046c","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/posts.styl","shasum":"abe394c5fbdd77e58df10c00d8a7dea7eeae8b30","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_component/tag-cloud.styl","shasum":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_core/base.styl","shasum":"d07fe0df00cde45de60b843532a0b70130a89656","modified":1446727701099},{"_id":"themes/freesky/source/css/_common/_core/helpers.styl","shasum":"a03ae3bab457bf4ee0771e9326468ace5f959c2f","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_core/normalize.styl","shasum":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_core/scaffolding.styl","shasum":"3702c4c350524622f7dd658b05449fc425a819ef","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_core/tables.styl","shasum":"16a98866f5025c050c56e52312228355a16d00d9","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_fonts/icon-default.styl","shasum":"c46d16429b85570347373fd11db8c222f6ff914e","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_fonts/icon-feather.styl","shasum":"7bdc92a55f2eee20b6b546e93e4566696b459b9d","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"dbb0843ea5aa7c2ac2755a2d1ce60fa662f1b939","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_fonts/icon-font.styl","shasum":"692c01dcdc612c3e1e245cf93d0ace0a4e2aaf3f","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_fonts/icon-linecons.styl","shasum":"a9f5260198225801eb5c16345a69a7e3cab904fe","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_page/archive.styl","shasum":"c324a9eff22b4e81e0280ba0aa5757e1f47e2f2f","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_page/categories.styl","shasum":"6c34f2cf9ad9b9b787007cfca522deeb6b1ae3b7","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_page/post-detail.styl","shasum":"70464ceb64c4239af590f99ef319747d3d1f100b","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_section/body.styl","shasum":"6eaa5d9cb08ecfb2d377a475e541e41fbfe4c1b6","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_section/footer.styl","shasum":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_section/header.styl","shasum":"1b92153f48b8501a5aacceba2405ed2e46b34b99","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_section/layout.styl","shasum":"a22541947ffcf7cd35da9332036641fe2f8ddbb1","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_section/media.styl","shasum":"482784c04c0cd15a3f0d86444966fe306af7d13a","modified":1446648948000},{"_id":"themes/freesky/source/css/_common/_section/sidebar.styl","shasum":"64e935a96cc6129caa65bdf6ae5dbb2e4b7ca3e0","modified":1447164328158},{"_id":"themes/freesky/source/css/_common/_vendor/highlight/highlight.styl","shasum":"b9fb630f80979ea9653099c13ff2a6c71a863029","modified":1447685371637},{"_id":"themes/freesky/source/css/_common/_vendor/highlight/theme.styl","shasum":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1446648949000},{"_id":"themes/freesky/source/css/_custom/custom.styl","shasum":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1446648949000},{"_id":"themes/freesky/source/css/_mixins/base.styl","shasum":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/Mist/_base.styl","shasum":"e4b5b56e1a035c99ebd50d00e93d89e2e8d0b735","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/Mist/_header.styl","shasum":"b023ed45e11107befe023c4cf0efb9eb966050c3","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/Mist/_logo.styl","shasum":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/Mist/_menu.styl","shasum":"490805fe7022ceb708d2b81078d024b58c1edea9","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"003b28a25eb53c1c06809de7a92870cc6d9a6cf9","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/Mist/index.styl","shasum":"f10be4b0c642104a6f533b94ac09e22019aa640e","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/default/_logo.styl","shasum":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/default/_menu.styl","shasum":"dd667be3f5f24cebdc15d0262c7d397f23d751c5","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/default/_search.styl","shasum":"e315ee6f604c2bcc44a5ef9078f5ce420c153a4b","modified":1446648949000},{"_id":"themes/freesky/source/css/_schemes/default/index.styl","shasum":"ecd76494cea5fbf592cc13ba1e4ccdfedbc5bf1b","modified":1446648949000},{"_id":"themes/freesky/source/css/_variables/Mist.styl","shasum":"306149f2f2afe2a7c0277ee3f5116603c6eb8863","modified":1446648949000},{"_id":"themes/freesky/source/css/_variables/base.styl","shasum":"e443b8bc48bf7ce0f908193c8fd10966806fcc6f","modified":1447685347626},{"_id":"themes/freesky/source/css/main.styl","shasum":"0424a4e51413da2366acbd26b54da55a3c650891","modified":1446648948000},{"_id":"themes/freesky/source/fonts/icon-default/icomoon.eot","shasum":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-default/icomoon.svg","shasum":"a2682f9b0a2647ec5cc35201ba37b0aceba86bcf","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-default/icomoon.ttf","shasum":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-default/icomoon.woff","shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-default/selection.json","shasum":"f05d514de60469cb8b77ab6dd68335d3de980377","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-feather/icomoon.eot","shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-feather/icomoon.svg","shasum":"a701877262c33bd521204de4eaf842294a294ca7","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-feather/icomoon.ttf","shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-feather/icomoon.woff","shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-feather/selection.json","shasum":"9a69a90c394f690f96758e0b012d0f85fdbb5d31","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/icomoon.eot","shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/icomoon.svg","shasum":"021bab3a7cb80aaaead0aceeb23a324256470b22","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/icomoon.ttf","shasum":"72fe82e1f3db52414eed706952d385af241cb196","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/icomoon.woff","shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-fifty-shades/selection.json","shasum":"bc7767511444b4bc79c7e986ccd8b0a38dcd1541","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-icomoon/icomoon.eot","shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-icomoon/icomoon.svg","shasum":"51ca86690d0294529bb9a736984e7fa718d15933","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-icomoon/icomoon.ttf","shasum":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-icomoon/icomoon.woff","shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-linecons/icomoon.eot","shasum":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-linecons/icomoon.svg","shasum":"85371b5563515a4f3eed0690653a0c35ee0b9d99","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-linecons/icomoon.ttf","shasum":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1446648949000},{"_id":"themes/freesky/source/fonts/icon-linecons/icomoon.woff","shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1446648950000},{"_id":"themes/freesky/source/fonts/icon-linecons/selection.json","shasum":"8fb52012770b4745b18b43850737585d24a689cf","modified":1446648950000},{"_id":"themes/freesky/source/images/bkdefault_avatar.jpg","shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1446648950000},{"_id":"themes/freesky/source/images/cc-by-nc-nd.svg","shasum":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1446648950000},{"_id":"themes/freesky/source/images/cc-by-nc-sa.svg","shasum":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1446648950000},{"_id":"themes/freesky/source/images/cc-by-nc.svg","shasum":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1446648950000},{"_id":"themes/freesky/source/images/cc-by-nd.svg","shasum":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1446648950000},{"_id":"themes/freesky/source/images/cc-by-sa.svg","shasum":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1446648950000},{"_id":"themes/freesky/source/images/cc-by.svg","shasum":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1446648950000},{"_id":"themes/freesky/source/images/cc-zero.svg","shasum":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1446648950000},{"_id":"themes/freesky/source/images/favicon.ico","shasum":"5c713499ccd8054767a01337f6ff9b86168f30cf","modified":1446648950000},{"_id":"themes/freesky/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1446648950000},{"_id":"themes/freesky/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1446648950000},{"_id":"themes/freesky/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1446648950000},{"_id":"themes/freesky/source/js/bootstrap.scrollspy.js","shasum":"97640be11a524b203781c1a03f623ef0b9195a02","modified":1446648950000},{"_id":"themes/freesky/source/js/fancy-box.js","shasum":"b980c3f972d190fa17d25b1cb11459b47f92d9c5","modified":1446648950000},{"_id":"themes/freesky/source/js/helpers.js","shasum":"092d54b791af7c4a11b1496294dd3259259058b6","modified":1446648950000},{"_id":"themes/freesky/source/js/hook-duoshuo.js","shasum":"ea30e91c6b7fdaa6dce4a848f25cdf90436b072a","modified":1446648950000},{"_id":"themes/freesky/source/js/lazyload.js","shasum":"dd94f7e88df11a1d760ca9994e21a58c07974fb2","modified":1446648950000},{"_id":"themes/freesky/source/js/motion_fallback.js","shasum":"bff3d62933345bb9bba962332b8c3d31f7b01579","modified":1446648950000},{"_id":"themes/freesky/source/js/motion_global.js","shasum":"f7c929d77d67022ed06f2fa4a5f01af0b53a3573","modified":1447163025581},{"_id":"themes/freesky/source/js/nav-toggle.js","shasum":"43c86778408a2c0c97c2f34838687d3dcb018ad4","modified":1446648950000},{"_id":"themes/freesky/source/js/ua-parser.min.js","shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fastclick/LICENSE","shasum":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fastclick/README.md","shasum":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fastclick/bower.json","shasum":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fastclick/lib/fastclick.js","shasum":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1446648950000},{"_id":"themes/freesky/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1446648950000},{"_id":"themes/freesky/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1446648951000},{"_id":"themes/freesky/source/vendors/font-awesome/bower.json","shasum":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1446648950000},{"_id":"themes/freesky/source/vendors/font-awesome/css/font-awesome.css","shasum":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1446648951000},{"_id":"themes/freesky/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1446648951000},{"_id":"themes/freesky/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1446648951000},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1446648951000},{"_id":"themes/freesky/source/vendors/velocity/bower.json","shasum":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1446648951000},{"_id":"themes/freesky/source/vendors/velocity/velocity.min.js","shasum":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1446648951000},{"_id":"themes/freesky/source/vendors/velocity/velocity.ui.js","shasum":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1446648951000},{"_id":"themes/freesky/source/vendors/velocity/velocity.ui.min.js","shasum":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1446648951000},{"_id":"themes/freesky/test/helpers.js","shasum":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1446648951000},{"_id":"themes/freesky/test/intern.js","shasum":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1446648951000},{"_id":"source/assets/images/feature engineering.png","shasum":"4a26e5889bc0f02de146a601d263c113ba446caa","modified":1447919444479},{"_id":"source/assets/pdf/How to Select a Good Training-data Subset for Transcriptionsubmodular active selection from sequences.pdf","shasum":"9719ad883a20297df798b02ba6b27a138920717b","modified":1446648963000},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1446648951000},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1446648951000},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1446648951000},{"_id":"themes/freesky/source/vendors/jquery/index.js","shasum":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1446648951000},{"_id":"source/assets/images/denote.xcf","shasum":"8d8791d47b07d3e8c2c58ca24cf00cd81e1ada04","modified":1447919444470},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1446648951000},{"_id":"themes/freesky/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1446648951000},{"_id":"themes/freesky/source/images/bg.png","shasum":"26b2ff0a42335d3b0ab3d5bcc6402b8afd8c9abc","modified":1446648950000},{"_id":"themes/freesky/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1446648951000},{"_id":"source/assets/pdf/2009- Learning from Imbalanced Data.pdf","shasum":"bfc2537a96c4f8a57f1823719e24042a8ee5af2f","modified":1446648963000},{"_id":"source/assets/articleImg/2015-12-21-machine-learning-algorithms_2.jpg","shasum":"411406772118eb7c5438050fbbe1913a6b818fbf","modified":1448087821418},{"_id":"source/assets/images/feature engineering.tif","shasum":"420b6a1f42cf3ca5dde241b72424e3e9ff12ed70","modified":1447919444503},{"_id":"public/tags/index.html","modified":1448168971029,"shasum":"fc320620caed74c3d2ac00e61a9a40a7627b53df"},{"_id":"public/resume/resume.html","modified":1448164663553,"shasum":"9d1f74f4238026bf91c43daa5c81815f96332b38"},{"_id":"public/resume/index.html","modified":1448164663600,"shasum":"218ed808ea06dc64c008984217a678df1a5ad593"},{"_id":"public/instagram/ins2.json","modified":1448088462075,"shasum":"586ec18d863f9e3e3bc58dbdcb59f72d8fb0e45d"},{"_id":"public/instagram/ins1.json","modified":1448088462079,"shasum":"0358ccadc1a2f76923bef7835e7965efe4282d71"},{"_id":"public/instagram/ins0.json","modified":1448088462083,"shasum":"f61865df33126db2c58c8e8ddc02dd01a35a20d4"},{"_id":"public/instagram/index.html","modified":1448164663678,"shasum":"2ff7c19b8d57eeb1da14b6240ee4b22ee89ab368"},{"_id":"public/donation/index.html","modified":1448164663725,"shasum":"3c8775b789e897f4742379c43f96976c36f05760"},{"_id":"public/categories/index.html","modified":1448164663772,"shasum":"0e5d1a1ec3bad6d3f5b7fc705eb66b6d22f29693"},{"_id":"public/about/index.html","modified":1448164663819,"shasum":"51374445c85182783d98ec2ba66fd06f917cc19d"},{"_id":"public/2015/11/21/2015-11-21-machine-learning-algorithms/index.html","modified":1448164663881,"shasum":"c060c22ce9faf51fa25733a30159113cd27feb7d"},{"_id":"public/2015/11/18/2015-11-18 ExpNotes[1]-Extract protein sequences from a fasta file/index.html","modified":1448164663959,"shasum":"60392713cfa5d81352fe56cbd620d1ff340d2075"},{"_id":"public/2015/11/17/2015-11-17 B=U-A/index.html","modified":1448164664021,"shasum":"7002e88ae80c9ead647b463aa9aed746aa9a85c2"},{"_id":"public/2015/11/16/2015-11-16 Download PDB file with wget command/index.html","modified":1448164664099,"shasum":"b327bc7ba428fc44ff7d5009db5ed548811fcd5d"},{"_id":"public/2015/11/15/2015-11-15 normalization/index.html","modified":1448164664162,"shasum":"200489af6ba0aa69aea277400c49846e126ea6b1"},{"_id":"public/2015/11/03/2015-11-03 Add header and footer to some file/index.html","modified":1448164664224,"shasum":"38233d644d71807d867624034946c26128b8da5a"},{"_id":"public/2015/10/29/2015-10-29 Python RegEx/index.html","modified":1448164664318,"shasum":"f58c53b3e2167b0de1f224d606f0f8a5a1dfbd58"},{"_id":"public/2015/10/25/2015-10-25 scikit-learn preprocessing/index.html","modified":1448164664411,"shasum":"95929fb5be557e9589bf27be8e9c7dc073ef30ac"},{"_id":"public/2015/10/24/2015-10-24 feature engineering/index.html","modified":1448164664505,"shasum":"07891b59128a41c39f619cb0fecba701003eefc7"},{"_id":"public/2015/10/21/2015-10-21 Windows git push no password/index.html","modified":1448164664583,"shasum":"9fdbcf0340852a7659d406860368e01dc4037ef5"},{"_id":"public/2015/09/23/2015-09-23 Machine learning materials/index.html","modified":1448164664692,"shasum":"dd156b160983eec9ebf4b3b95f05b6e53708ab4d"},{"_id":"public/2015/08/29/2015-08-29 Summary/index.html","modified":1448164664786,"shasum":"22d64edad530dbaa2dd9ef1bf98ab16aba22f2c7"},{"_id":"public/2015/08/19/2015-08-19 GBDT/index.html","modified":1448164664911,"shasum":"531442204f94a7847441b3035a6cbac3efb95039"},{"_id":"public/2015/07/28/2015-07-28 crossvalidation/index.html","modified":1448164665004,"shasum":"cbcb3f2b289e0b01e54c90b288db632d32d2275b"},{"_id":"public/2015/07/23/2015-07-23 machine learning tips/index.html","modified":1448164665098,"shasum":"07804c83b61a505f3bf5d0beea4f5c631cec4fc0"},{"_id":"public/2015/07/22/2015-07-22  ensemble/index.html","modified":1448164665176,"shasum":"e6f618ddc6c7e6af5055a9c1ca9decb2e02820c1"},{"_id":"public/2015/07/21/2015-07-21-An-introduction-to-machine-learning-with-scikit-learn/index.html","modified":1448164665238,"shasum":"552f7e21c6791d08a69e314b3d4ce6a69ec41244"},{"_id":"public/2015/07/18/2015-07-18-a precision and recall/index.html","modified":1448164665316,"shasum":"bcee59010e6814937fdf0b5b54ea95a1c3fa0ef5"},{"_id":"public/2015/07/16/2015-07-16 Python timer/index.html","modified":1448164665379,"shasum":"e60515d6d7eb197976d53690c9cdfdc0ba3d68dd"},{"_id":"public/2015/07/13/2015-07-13-10 keys to successful machine learning for developers/index.html","modified":1448164665441,"shasum":"0a132a738a5518206a511dd3b1d66093b8f28129"},{"_id":"public/2015/07/07/2015-07-07-PDB/index.html","modified":1448164665519,"shasum":"31b92835a5076233e0c0d6624464a3ce1985353e"},{"_id":"public/2015/07/05/2015-07-12-Adaboost/index.html","modified":1448164665597,"shasum":"90c6a4b9c9d9555d8ab19389c47ee39ce3f4176b"},{"_id":"public/2015/06/10/2015-06-10 Python simulate command/index.html","modified":1448164665659,"shasum":"3d5811086edc43af48b5711ebd4f760066c74d58"},{"_id":"public/2015/06/04/2015-06-04-Apriori/index.html","modified":1448164665737,"shasum":"c53bbb53f1d6cfda53a8005ea6d688f2638076ff"},{"_id":"public/2015/06/03/2015-06-03-K-means/index.html","modified":1448164665815,"shasum":"b2a4793e92471f1857112e6e5c526772f86b6337"},{"_id":"public/2015/05/31/2015-05-31 scikit-learn training model's save and reused/index.html","modified":1448164665878,"shasum":"8c3e94bc757737a115e9da88b1d73b85f24fde3a"},{"_id":"public/2015/05/28/2015-05-28-NB/index.html","modified":1448164665956,"shasum":"667abcc5c49ca60cfb8d24962eb6394d988e6a9a"},{"_id":"public/2015/05/21/2015-05-21-KNN/index.html","modified":1448164666018,"shasum":"32802a651dac6c09cfa42fa3ef2230b698da3cf8"},{"_id":"public/2015/05/08/2015-05-08-decision tree/index.html","modified":1448164666096,"shasum":"d07d82e1c72f93182d55675ed100bdc48151ac6a"},{"_id":"public/2015/04/15/2015-04-12-Syncing-a-fork/index.html","modified":1448164666159,"shasum":"d92ab98d41779356a8ac1fb6eb5530655e6b4142"},{"_id":"public/2015/03/26/2015-03-26-sublimeLinter/index.html","modified":1448164666237,"shasum":"bedcb1112b570da557e28c3f2216a52fa47bcfb6"},{"_id":"public/2014/12/21/2014-12-21-InsertSort/index.html","modified":1448168973924,"shasum":"a9289251765506e7fea23a95a38dfaf096089dd5"},{"_id":"public/2014/12/19/2014-12-19-The-difference-of-list-and-tupple/index.html","modified":1448168973998,"shasum":"14adc6295136f228d8f4981c0566e3ccc355b81a"},{"_id":"public/2014/11/19/2014-11-19-linux-tree-command/index.html","modified":1448164666517,"shasum":"7561dc6c46aca7ea448cd3853175c2e894ffbd85"},{"_id":"public/archives/index.html","modified":1448164666673,"shasum":"905beff9383d82039473d07bc33f05cda64cbc67"},{"_id":"public/archives/page/2/index.html","modified":1448164666814,"shasum":"658a35fd273c1224490f3dafffe013fab0d91e93"},{"_id":"public/archives/page/3/index.html","modified":1448168974486,"shasum":"f50a5c816f593e7b83b06a8554b99cd7e4524c2c"},{"_id":"public/archives/2014/index.html","modified":1448168974568,"shasum":"66e5a576966a576b4b8bc75d0a5e2fd43b98b032"},{"_id":"public/archives/2014/11/index.html","modified":1448164667063,"shasum":"5999406d9a2fae22fd92182e61ed6f117f43d7bf"},{"_id":"public/archives/2014/12/index.html","modified":1448168974686,"shasum":"d58355529645b6b6b2a755c13c843d54e15c26db"},{"_id":"public/archives/2015/index.html","modified":1448164667266,"shasum":"ed55166e5f50c2f7926f08152dedf43b60879e86"},{"_id":"public/archives/2015/page/2/index.html","modified":1448164667422,"shasum":"a11e4014f4349d01b4c4412e5361818102dd39c0"},{"_id":"public/archives/2015/page/3/index.html","modified":1448164667516,"shasum":"0f1b23d894a2f62ed929fc23ccd36adf62d8a44d"},{"_id":"public/archives/2015/03/index.html","modified":1448164667563,"shasum":"bb60473d11178f6e4ff7f7e9f394d1c331a89a08"},{"_id":"public/archives/2015/04/index.html","modified":1448164667609,"shasum":"d426844e15c2e9dc0b68a9f840b1498d41ead2f3"},{"_id":"public/archives/2015/05/index.html","modified":1448164667687,"shasum":"31760c1c504ae6c49b1e72c0949b3ab9d94629c2"},{"_id":"public/archives/2015/06/index.html","modified":1448164667765,"shasum":"4d34560fdb9925a57324b8141ce95badc9341e24"},{"_id":"public/archives/2015/07/index.html","modified":1448164667890,"shasum":"db7a682bfd8dce1b81257ba987acb85999a9c97e"},{"_id":"public/archives/2015/08/index.html","modified":1448164667937,"shasum":"2333a29e6360843f371831fba038f0d82c227858"},{"_id":"public/archives/2015/09/index.html","modified":1448164667999,"shasum":"94680df846139a06007d841f79d828c56ce155bd"},{"_id":"public/archives/2015/10/index.html","modified":1448164668062,"shasum":"dc9bdbf5bb442259d79c3b30854f623388365e65"},{"_id":"public/archives/2015/11/index.html","modified":1448164668155,"shasum":"d6d04780bb137635e35e4df138365e54e750408f"},{"_id":"public/categories/ML/index.html","modified":1448164668265,"shasum":"3c5a507d2a6b11eda1c2abad0596d6cb20b6819a"},{"_id":"public/categories/ML/page/2/index.html","modified":1448164668327,"shasum":"2dda3c5310ccef87375202ee60009f97ec581608"},{"_id":"public/categories/BioInfo/index.html","modified":1448164668389,"shasum":"c092cf8ef0ecdf44ae1c23cd6305a0c8abedf84b"},{"_id":"public/categories/Python/index.html","modified":1448164668467,"shasum":"1b26d3473b0f77bad13ec999ca84b23b15936c3d"},{"_id":"public/categories/GitHub/index.html","modified":1448164668514,"shasum":"c89d9fb987320d19fb1b7937cb736eb81777c151"},{"_id":"public/categories/总结/index.html","modified":1448164668561,"shasum":"9ccab00f72921a4f1c36f36d45b788f260fde831"},{"_id":"public/categories/译文/index.html","modified":1448164668623,"shasum":"4129e65aa15e8c5e2a16697a7ced8cde29036348"},{"_id":"public/categories/工具/index.html","modified":1448164668670,"shasum":"d26ec7dcde37497e2886e57a442133de3fed88d9"},{"_id":"public/categories/算法与数据结构/index.html","modified":1448168976208,"shasum":"d0f6fa7a6b07702a2d9fd9afe8662c3203fd7f2b"},{"_id":"public/categories/Linux/index.html","modified":1448164668764,"shasum":"c93b48ce5434fb28422e159947789b76c28630ec"},{"_id":"public/atom.xml","modified":1448168976257,"shasum":"1a9ceb0940d2f3cb80ae459b7d86f09e52431f61"},{"_id":"public/index.html","modified":1448164668904,"shasum":"f5b9ceb9a02d2ce53902720845680afb4e6edab5"},{"_id":"public/page/2/index.html","modified":1448164669029,"shasum":"6cb153ee8b6db6ffc66a0ddabc4e8eef4eb7d89c"},{"_id":"public/page/3/index.html","modified":1448168976619,"shasum":"1776865a240859dd25a439fe4af89e98c59421af"},{"_id":"public/tags/Machine-Learning/index.html","modified":1448164669263,"shasum":"1a174ac9a47fd918c1684fd354980e7d82fc6caf"},{"_id":"public/tags/Machine-Learning/page/2/index.html","modified":1448164669325,"shasum":"8d306dfbd451c73a8f898f1c636d51315f42b273"},{"_id":"public/tags/Python/index.html","modified":1448164669419,"shasum":"83c942b83dbe4ec5f35fe7266ca1044c78902085"},{"_id":"public/tags/BioInfo/index.html","modified":1448164669481,"shasum":"eb04ed456ce8f207f2d23475ba990556014b13a8"},{"_id":"public/tags/normalization/index.html","modified":1448164669528,"shasum":"9a6220007dbdb66119ccf8c466f37a12f7dd3d75"},{"_id":"public/tags/正则表达式/index.html","modified":1448164669575,"shasum":"fae2cf17e430ed674269ecaa107ebecf335f70a7"},{"_id":"public/tags/preprocessing/index.html","modified":1448164669622,"shasum":"16e8bc949002a4d90de0b1aa32e0a5797ec14b0a"},{"_id":"public/tags/Feature-Engineering/index.html","modified":1448164669669,"shasum":"07ecb1d47c0b46cf6ea6d387cec40165fccb9d01"},{"_id":"public/tags/GitHub/index.html","modified":1448164669731,"shasum":"585c837fb6fbe309b44e2dbe8a3d39ca96520148"},{"_id":"public/tags/总结/index.html","modified":1448164669778,"shasum":"70641fd826dca91d0eecdf9f1f88b8b1d29c5b24"},{"_id":"public/tags/译文/index.html","modified":1448164669825,"shasum":"f480c71b187422bf979709f789ca4b1ddbe42da9"},{"_id":"public/tags/函数计时器/index.html","modified":1448164669871,"shasum":"d9e13afb11e6aa49528da05ebf345a21e0e3c773"},{"_id":"public/tags/CV/index.html","modified":1448164669918,"shasum":"78c16cce14ed98424de2c1832fafe0096d8e4733"},{"_id":"public/tags/AI/index.html","modified":1448164669981,"shasum":"61b2b443ee56c2741c8b2f4e7a0be35ed072c8d6"},{"_id":"public/tags/scikit-learn/index.html","modified":1448164670012,"shasum":"5c0cd4acfbb7a01986b5fa06153f9ef47689beb1"},{"_id":"public/tags/SublimeLinter/index.html","modified":1448164670059,"shasum":"ba3fdc76f72664df441f69fd2c891c447241b82e"},{"_id":"public/tags/C/index.html","modified":1448168977540,"shasum":"4f6cedfb01dbcdbcc021c66f74aedd9a56b42e40"},{"_id":"public/tags/数据结构/index.html","modified":1448168977592,"shasum":"db572ddd75b86a5184b87ccdf63316948218f877"},{"_id":"public/tags/排序算法/index.html","modified":1448168977647,"shasum":"95b52148991120240312df7b935d01cb38d96527"},{"_id":"public/tags/希尔排序/index.html","modified":1448168977692,"shasum":"f24f6e789b1267c76bb9b9a2a48565ddbd92047d"},{"_id":"public/tags/简单插入排序/index.html","modified":1448168977745,"shasum":"b18cc2fef96a652bfe36a96ebeede06be4b40e93"},{"_id":"public/tags/list/index.html","modified":1448164670371,"shasum":"c5d5bbeba0dd15677cfdd5c7dce77fb0d22caf73"},{"_id":"public/tags/tuple/index.html","modified":1448164670417,"shasum":"5657c8f0b91703602d7197d7d04fb14f7116e9b2"},{"_id":"public/tags/Linux/index.html","modified":1448164670464,"shasum":"e09345c249f290af58c40667adfd6e04bb0c6b4c"},{"_id":"public/tags/Shell/index.html","modified":1448164670511,"shasum":"ed6a83ec4bb6aa2f60dd0723e01a413f9698501c"},{"_id":"source/assets/articleImg/2014-12-21-mergeSort-2.png","shasum":"372e93e25efa88b02a0132bc0d27f8a61fe45591","modified":1448163073703},{"_id":"source/_posts/2014-12-21-MergeSort.md","shasum":"90eb6ba41acb5d9601b640c47b98434f08abf655","modified":1448168936992},{"_id":"source/assets/docs/Merge-sort.docx","shasum":"0aec7f80e29dc6f6dbcc9de673e14ed16c29f9fa","modified":1448162208410},{"_id":"source/assets/articleImg/2014-12-21-mergeSort-1.png","shasum":"fd8b15bb2dcfa32d2f1131a508e567f2c97046e6","modified":1448162405615},{"_id":"public/assets/articleImg/2014-12-21-mergeSort-2.png","modified":1448164663366,"shasum":"372e93e25efa88b02a0132bc0d27f8a61fe45591"},{"_id":"public/assets/articleImg/2014-12-21-mergeSort-1.png","modified":1448164663382,"shasum":"fd8b15bb2dcfa32d2f1131a508e567f2c97046e6"},{"_id":"public/assets/docs/Merge-sort.docx","modified":1448164663397,"shasum":"0aec7f80e29dc6f6dbcc9de673e14ed16c29f9fa"},{"_id":"public/2014/12/21/2014-12-21-MergeSort/index.html","modified":1448168973852,"shasum":"cd7ffda8424936604bb15da84ef18f407b927564"},{"_id":"public/tags/归并排序/index.html","modified":1448164670558,"shasum":"4248020f657e7a0d8543ba40ed910216342f9a6c"},{"_id":"public/tags/算法/index.html","modified":1448164670605,"shasum":"e91077583a2c9ed952dad0928a7b14d45279a3bf"}],"Category":[{"name":"ML","_id":"cih8q8rnt000cr8ujm0xau0jl"},{"name":"BioInfo","_id":"cih8q8ro4000jr8ujubu4a42a"},{"name":"Python","_id":"cih8q8ron000zr8ujdqlvpzg0"},{"name":"GitHub","_id":"cih8q8rpb001ir8ujexh4eako"},{"name":"总结","_id":"cih8q8rpn001qr8ujly4ulrbr"},{"name":"译文","_id":"cih8q8rqe0027r8ujzl9g795t"},{"name":"工具","_id":"cih8q8rt9003or8ujucuwwvfp"},{"name":"算法与数据结构","_id":"cih8q8rub003tr8ujwx78x2og"},{"name":"Linux","_id":"cih8q8ruu004dr8ujlpnmwtht"}],"Data":[],"Page":[{"title":"tags","date":"2015-10-19T03:24:27.000Z","type":"tags","comment":"flase","_content":"\n\n","source":"tags/index.md","raw":"title: tags\ndate: 2015-10-19 11:24:27\ntype: \"tags\"\ncomment: flase\n---\n\n\n","updated":"2015-11-19T07:50:44.556Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cih8q8rlv0000r8ujjaj4gqn2"},{"layout":"page","title":"","noDate":"true","comments":0,"description":"个 人 简 历","fancybox":false,"_content":"<style>\nbody{\n\tfont-size: 12px;\n\tfont-family: Arial,Console,Verdana,Courier New;\n}\n</style>\n<script type=\"text/javascript\" src=\"http://sources.ikeepstudying.com/js/jquery-1.8.3.min.js\"></script>  \n<script type=\"text/javascript\" src=\"jquery.media.js\"></script>  \n<script type=\"text/javascript\">  \n    $(function() {  \n        $('a.resume').resume({width:800, height:600});  \n    });  \n</script>  \n<a class=\"resume\" target=\"_black\" href=\"/resume/resume.pdf\"> 下载PDF</a>\n<div style=\"text-align:center;font-size:26px;padding-top:0px\">个 人 简 历</div>\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:18px;\">基本资料</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>\n\n<div style=\"width:100%;float:left;margin-top:-12px;\"><div style=\"float:left;width:60%;\">\n姓&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;名： 刘帝伟  \n 出生年月： 1991年7月  \n 所在学校： 中南大学\t\t\t\t\t\n 联系方式： 18707489940  \n 腾讯 Q Q： 466454368\t  \t\n 电子邮件： <a href=\"mailto:csu.ldw@csu.edu.cn\">csu.ldw@csu.edu.cn</a>  \n CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\">http://blog.csdn.net/dream_angel_z</a>\n</div><div style=\"width:38%;padding:30px 2% 0 0;float:left;text-align:right;\"><img src=\"../assets/images/face-h200.jpg\" title=\"\" /></div></div>个人说明：中南大学在读硕士， 研究方向为机器学习，数据挖掘以及生物信息领域。热爱生活、乐于Coding！\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-top:13px\">个人能力</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div> \n \n精通数据结构基本算法并熟悉数据挖掘常用分类和聚类算法，能将所学算法运用于实际应用中；  \n熟悉Linux安装、配置及常见问题的解决，以及Linux下账户的创建和维护；  \n熟悉Linux下shell及Python脚本编程，有搭建Hadoop集群和PBS高性能集群经验；  \n掌握SVN、Git服务器的搭建和维护，掌握Git的基本操作；  \n熟悉JavaScript、CSS、AJAX、HTML(XHTML)及XML等Web前端开发技术；  \n熟悉 SSH三大框架以和MVC三层架构开发模式并有相关项目开发经验，掌握常用的设计模式；  \n熟练使用MyEclipse、Eclipse、Dreamweaver、SVN等开发工具和Visio建模工具；  \n熟练使用Tomcat服务器进行项目的开发；  \n熟练使用Oracle、MySQL、Microsoft SQL Server等数据库及SQL语言；  \n英语水平：CET-6  456分 具有良好的文献搜索和阅读能力。  \n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;\">奖励情况</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div> \n \n2015年03月 中软实训基地实训结业并获得“个人优胜奖”及“优秀开发团队奖”；  \n2014年—— 发表论文 \" Yang Meng, Lei Deng, Zhigang Chen, Cheng Zhou, **Diwei Liu**, Chao Fan, and Ting Yan. **A Multi-Instance Multi-Label Learning Approach for Protein Domain Annotation**. **Springer LNBI**,104-111（2014）；  \n2013年06月 获得校级“优秀毕业生”荣誉称号，并且毕业设计及毕业论文荣获“优秀”； \n2012年12月 荣获湖南农业大学“校级三好学生”荣誉称号；   \n2012年12月 荣获国家励志奖学金及湖南农业大学校级二等奖学金；    \n2012年05月 荣获湖南农业大学数学建模大赛二等奖；    \n2011年12月 荣获全国大学生数学建模竞赛湖南赛区本科组三等奖； \n2011年05月 被评为湖南农业大学2010-2011年度校级“优秀学生干部”； \n2010年12月 荣获湖南农业大学校级一等奖学金及国家一等助学金。  \n2010年12月 荣获湖南农业大学2009-2010学年“院级三好学生”荣誉称号；\n2010年05月 被评为湖南农业大学2009-2010年度校级“优秀团员”荣誉称号；  \n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;\">个人经验</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n目前——\t研究蛋白质-RNA结合位点的预测；  \n2015年04月 中南大学2015年研究生自主探索创新项目《基于跨物种基因共表达的蛋白质功能预测》通过，担任项目主要负责人；  \n2015年04月 带中南大学本科生软件工程专业学生《云计算》实验课，并指导学生完成部分实验；  \n2015年03月 中软国际春季实训开发《知音交友网》，担任小组组长兼技术总监，负责项目分工和监督。参与需求分析和数据库的详细设计，负责日志功能模块、恋爱秘籍模块、城市地区模块的代码开发；  \n2014年10月 中软国际秋季实训开发《南书房—网上书城》并担任技术总监，参与数据库的详细设计，主要负责项目总体页面设计以及新用户注册、订单模块和购物车模块的代码开发；  \n2013年05月 开发《音像制品出租与销售网》个人本科毕业设计，荣获“优秀”。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;\">自我评价</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n1.研究欲强，富有创造力；  \n2.性格温和，有耐心，待人友善，能快速适应新环境；  \n3.团队合作能力强，具有较强的合作分工意识，能够积极配合团队工作；   \n4.对自己有严格的要求，做事认真负责，每件事都坚持有始有终，不轻言放弃。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;\">真情独白</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%;margin-bottom:10px\" src=\"../assets/images/navigate.png\"></span></div>  \n\n> 我喜欢，驾驭着代码在风驰电掣中创造完美！  \n> 我喜欢，操纵着代码在随心所欲中体验生活！  \n> 我喜欢，书写着代码在时代浪潮中完成经典！  \n> 每一段新的代码在我手中诞生对我来说就像观看刹那花开的感动！留下传奇，创造生命！  \n \n\n---","source":"resume/resume.md","raw":"---\nlayout: page\ntitle: \"\" \nnoDate: \"true\"\ncomments: false\ndescription: \"个 人 简 历\" \nfancybox: false\n---\n<style>\nbody{\n\tfont-size: 12px;\n\tfont-family: Arial,Console,Verdana,Courier New;\n}\n</style>\n<script type=\"text/javascript\" src=\"http://sources.ikeepstudying.com/js/jquery-1.8.3.min.js\"></script>  \n<script type=\"text/javascript\" src=\"jquery.media.js\"></script>  \n<script type=\"text/javascript\">  \n    $(function() {  \n        $('a.resume').resume({width:800, height:600});  \n    });  \n</script>  \n<a class=\"resume\" target=\"_black\" href=\"/resume/resume.pdf\"> 下载PDF</a>\n<div style=\"text-align:center;font-size:26px;padding-top:0px\">个 人 简 历</div>\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:18px;\">基本资料</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>\n\n<div style=\"width:100%;float:left;margin-top:-12px;\"><div style=\"float:left;width:60%;\">\n姓&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;名： 刘帝伟  \n 出生年月： 1991年7月  \n 所在学校： 中南大学\t\t\t\t\t\n 联系方式： 18707489940  \n 腾讯 Q Q： 466454368\t  \t\n 电子邮件： <a href=\"mailto:csu.ldw@csu.edu.cn\">csu.ldw@csu.edu.cn</a>  \n CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\">http://blog.csdn.net/dream_angel_z</a>\n</div><div style=\"width:38%;padding:30px 2% 0 0;float:left;text-align:right;\"><img src=\"../assets/images/face-h200.jpg\" title=\"\" /></div></div>个人说明：中南大学在读硕士， 研究方向为机器学习，数据挖掘以及生物信息领域。热爱生活、乐于Coding！\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-top:13px\">个人能力</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div> \n \n精通数据结构基本算法并熟悉数据挖掘常用分类和聚类算法，能将所学算法运用于实际应用中；  \n熟悉Linux安装、配置及常见问题的解决，以及Linux下账户的创建和维护；  \n熟悉Linux下shell及Python脚本编程，有搭建Hadoop集群和PBS高性能集群经验；  \n掌握SVN、Git服务器的搭建和维护，掌握Git的基本操作；  \n熟悉JavaScript、CSS、AJAX、HTML(XHTML)及XML等Web前端开发技术；  \n熟悉 SSH三大框架以和MVC三层架构开发模式并有相关项目开发经验，掌握常用的设计模式；  \n熟练使用MyEclipse、Eclipse、Dreamweaver、SVN等开发工具和Visio建模工具；  \n熟练使用Tomcat服务器进行项目的开发；  \n熟练使用Oracle、MySQL、Microsoft SQL Server等数据库及SQL语言；  \n英语水平：CET-6  456分 具有良好的文献搜索和阅读能力。  \n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;\">奖励情况</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div> \n \n2015年03月 中软实训基地实训结业并获得“个人优胜奖”及“优秀开发团队奖”；  \n2014年—— 发表论文 \" Yang Meng, Lei Deng, Zhigang Chen, Cheng Zhou, **Diwei Liu**, Chao Fan, and Ting Yan. **A Multi-Instance Multi-Label Learning Approach for Protein Domain Annotation**. **Springer LNBI**,104-111（2014）；  \n2013年06月 获得校级“优秀毕业生”荣誉称号，并且毕业设计及毕业论文荣获“优秀”； \n2012年12月 荣获湖南农业大学“校级三好学生”荣誉称号；   \n2012年12月 荣获国家励志奖学金及湖南农业大学校级二等奖学金；    \n2012年05月 荣获湖南农业大学数学建模大赛二等奖；    \n2011年12月 荣获全国大学生数学建模竞赛湖南赛区本科组三等奖； \n2011年05月 被评为湖南农业大学2010-2011年度校级“优秀学生干部”； \n2010年12月 荣获湖南农业大学校级一等奖学金及国家一等助学金。  \n2010年12月 荣获湖南农业大学2009-2010学年“院级三好学生”荣誉称号；\n2010年05月 被评为湖南农业大学2009-2010年度校级“优秀团员”荣誉称号；  \n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;\">个人经验</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n目前——\t研究蛋白质-RNA结合位点的预测；  \n2015年04月 中南大学2015年研究生自主探索创新项目《基于跨物种基因共表达的蛋白质功能预测》通过，担任项目主要负责人；  \n2015年04月 带中南大学本科生软件工程专业学生《云计算》实验课，并指导学生完成部分实验；  \n2015年03月 中软国际春季实训开发《知音交友网》，担任小组组长兼技术总监，负责项目分工和监督。参与需求分析和数据库的详细设计，负责日志功能模块、恋爱秘籍模块、城市地区模块的代码开发；  \n2014年10月 中软国际秋季实训开发《南书房—网上书城》并担任技术总监，参与数据库的详细设计，主要负责项目总体页面设计以及新用户注册、订单模块和购物车模块的代码开发；  \n2013年05月 开发《音像制品出租与销售网》个人本科毕业设计，荣获“优秀”。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;\">自我评价</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n1.研究欲强，富有创造力；  \n2.性格温和，有耐心，待人友善，能快速适应新环境；  \n3.团队合作能力强，具有较强的合作分工意识，能够积极配合团队工作；   \n4.对自己有严格的要求，做事认真负责，每件事都坚持有始有终，不轻言放弃。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;\">真情独白</div>\n\n<div style=\"width:100%;\"><span><img style=\"width:100%;margin-bottom:10px\" src=\"../assets/images/navigate.png\"></span></div>  \n\n> 我喜欢，驾驭着代码在风驰电掣中创造完美！  \n> 我喜欢，操纵着代码在随心所欲中体验生活！  \n> 我喜欢，书写着代码在时代浪潮中完成经典！  \n> 每一段新的代码在我手中诞生对我来说就像观看刹那花开的感动！留下传奇，创造生命！  \n \n\n---","date":"2015-11-19T07:50:44.554Z","updated":"2015-11-19T07:50:44.554Z","path":"resume/resume.html","_id":"cih8q8rm10001r8uj0zn7kj17"},{"layout":"page","title":"Resume","icon":"glyphicon-tint","date":"2015-07-13T15:51:00.000Z","description":"个 人 简 历","_content":"<style> \nbody{\n\tline-height:22px;\n}\n</style>\n<div style=\"text-align:center;font-size:26px;padding-top:8px\">个 人 简 历</div>\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">基本资料</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n<div style=\"width:100%;float:left;margin-bottom:5px;\">\n<div style=\"float:left;width:60%;\">\n\n 姓&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;名： 刘帝伟<br>\n 出生年月： 1991年7月<br>\t\t\t\t\t\n 所在学校： 中南大学<br>\t\t\t\t\t\n 联系方式： 18707489940 <br> \n 腾讯 Q Q： 466454368<br>\t\t\t\n 电子邮件： <a href=\"mailto:csu.ldw@csu.edu.cn\">csu.ldw@csu.edu.cn</a><br>\n CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\">http://blog.csdn.net/dream_angel_z</a><br>\n\n</div>\n<div style=\"padding-right:3%;float:left;text-align:right;width:37%\">\n<a><img height=\"150px\" src=\"../assets/images/face.jpg\" /></a>\n</div>\n</div>\n\n个人说明：中南大学在读硕士， 研究方向为机器学习，数据挖掘以及生物信息领域。热爱生活、乐于Coding！\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">个人能力</div>\n\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n精通数据结构基本算法并熟悉数据挖掘常用分类和聚类算法，能将所学算法运用于实际应用中；  \n熟悉Linux安装、配置及常见问题的解决，以及Linux下账户的创建和维护；  \n熟悉Linux下shell及Python脚本编程，有搭建Hadoop集群和PBS高性能集群经验；  \n熟悉SVN、Git服务器的搭建和维护，掌握Git的基本操作；  \n熟悉JavaScript、CSS、AJAX、HTML(XHTML)及XML等Web前端开发技术；  \n熟悉 SSH三大框架以和MVC三层架构开发模式并有相关项目开发经验，掌握常用的设计模式；  \n熟练使用MyEclipse、Eclipse、Dreamweaver、SVN等开发工具和Visio建模工具；  \n熟练使用Tomcat服务器进行项目的开发；  \n熟练使用Oracle、MySQL、Microsoft SQL Server等数据库及SQL语言；  \n英语水平：CET-6  456分 具有良好的文献搜索和阅读能力。\n\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">奖励情况</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n2015年03月 中软实训基地实训结业并获得“个人优胜奖”及“优秀开发团队奖”；  \n2014年—— 发表论文 \" Yang Meng, Lei Deng, Zhigang Chen, Cheng Zhou, **Diwei Liu**, Chao Fan, and Ting Yan. **A Multi-Instance Multi-Label Learning Approach for Protein Domain Annotation**. **Springer LNBI**,104-111（2014）；  \n2013年06月 获得校级“优秀毕业生”荣誉称号，并且毕业设计及毕业论文荣获“优秀”；  \n2012年12月 荣获湖南农业大学“校级三好学生”荣誉称号；   \n2012年12月 荣获国家励志奖学金及湖南农业大学校级二等奖学金；    \n2012年05月 荣获湖南农业大学数学建模大赛二等奖；    \n2011年12月 荣获全国大学生数学建模竞赛湖南赛区本科组三等奖；  \n2011年05月 被评为湖南农业大学2010-2011年度校级“优秀学生干部”；  \n2010年12月 荣获湖南农业大学校级一等奖学金及国家一等助学金。  \n2010年12月 荣获湖南农业大学2009-2010学年“院级三好学生”荣誉称号；  \n2010年05月 被评为湖南农业大学2009-2010年度校级“优秀团员”荣誉称号；   \n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">个人经验</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n目前——\t研究蛋白质-RNA结合位点的预测；  \n2015年04月 中南大学2015年研究生自主探索创新项目《基于跨物种基因共表达的蛋白质功能预测》通过，担任项目主要负责人；  \n2015年04月 带中南大学本科生软件工程专业学生《云计算》实验课，并指导学生完成部分实验；  \n2015年03月 中软国际春季实训开发《知音交友网》，担任小组组长兼技术总监，负责项目分工和监督。参与需求分析和数据库的详细设计，负责日志功能模块、恋爱秘籍模块、城市地区模块的代码开发；  \n2014年10月 中软国际秋季实训开发《南书房—网上书城》并担任技术指导，参与数据库的详细设计，主要负责项目总体页面设计以及新用户注册、订单模块和购物车模块的代码开发；  \n2013年05月 开发《音像制品出租与销售网》个人本科毕业设计，荣获“优秀”。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">自我评价</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n1.研究欲强，富有创造力；  \n2.性格温和，有耐心，待人友善，能快速适应新环境；  \n3.团队合作能力强，具有较强的合作分工意识，能够积极配合团队工作；   \n4.对自己有严格的要求，做事认真负责，每件事都坚持有始有终，不轻言放弃。","source":"resume/resume-pdf.md","raw":"---\nlayout: page\ntitle: Resume \npermalink: /resume/\nicon: glyphicon-tint\ndate: 2015-07-13 23:51 \ndescription: \"个 人 简 历\" \n---\n<style> \nbody{\n\tline-height:22px;\n}\n</style>\n<div style=\"text-align:center;font-size:26px;padding-top:8px\">个 人 简 历</div>\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">基本资料</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n<div style=\"width:100%;float:left;margin-bottom:5px;\">\n<div style=\"float:left;width:60%;\">\n\n 姓&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;名： 刘帝伟<br>\n 出生年月： 1991年7月<br>\t\t\t\t\t\n 所在学校： 中南大学<br>\t\t\t\t\t\n 联系方式： 18707489940 <br> \n 腾讯 Q Q： 466454368<br>\t\t\t\n 电子邮件： <a href=\"mailto:csu.ldw@csu.edu.cn\">csu.ldw@csu.edu.cn</a><br>\n CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\">http://blog.csdn.net/dream_angel_z</a><br>\n\n</div>\n<div style=\"padding-right:3%;float:left;text-align:right;width:37%\">\n<a><img height=\"150px\" src=\"../assets/images/face.jpg\" /></a>\n</div>\n</div>\n\n个人说明：中南大学在读硕士， 研究方向为机器学习，数据挖掘以及生物信息领域。热爱生活、乐于Coding！\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">个人能力</div>\n\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n精通数据结构基本算法并熟悉数据挖掘常用分类和聚类算法，能将所学算法运用于实际应用中；  \n熟悉Linux安装、配置及常见问题的解决，以及Linux下账户的创建和维护；  \n熟悉Linux下shell及Python脚本编程，有搭建Hadoop集群和PBS高性能集群经验；  \n熟悉SVN、Git服务器的搭建和维护，掌握Git的基本操作；  \n熟悉JavaScript、CSS、AJAX、HTML(XHTML)及XML等Web前端开发技术；  \n熟悉 SSH三大框架以和MVC三层架构开发模式并有相关项目开发经验，掌握常用的设计模式；  \n熟练使用MyEclipse、Eclipse、Dreamweaver、SVN等开发工具和Visio建模工具；  \n熟练使用Tomcat服务器进行项目的开发；  \n熟练使用Oracle、MySQL、Microsoft SQL Server等数据库及SQL语言；  \n英语水平：CET-6  456分 具有良好的文献搜索和阅读能力。\n\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">奖励情况</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n2015年03月 中软实训基地实训结业并获得“个人优胜奖”及“优秀开发团队奖”；  \n2014年—— 发表论文 \" Yang Meng, Lei Deng, Zhigang Chen, Cheng Zhou, **Diwei Liu**, Chao Fan, and Ting Yan. **A Multi-Instance Multi-Label Learning Approach for Protein Domain Annotation**. **Springer LNBI**,104-111（2014）；  \n2013年06月 获得校级“优秀毕业生”荣誉称号，并且毕业设计及毕业论文荣获“优秀”；  \n2012年12月 荣获湖南农业大学“校级三好学生”荣誉称号；   \n2012年12月 荣获国家励志奖学金及湖南农业大学校级二等奖学金；    \n2012年05月 荣获湖南农业大学数学建模大赛二等奖；    \n2011年12月 荣获全国大学生数学建模竞赛湖南赛区本科组三等奖；  \n2011年05月 被评为湖南农业大学2010-2011年度校级“优秀学生干部”；  \n2010年12月 荣获湖南农业大学校级一等奖学金及国家一等助学金。  \n2010年12月 荣获湖南农业大学2009-2010学年“院级三好学生”荣誉称号；  \n2010年05月 被评为湖南农业大学2009-2010年度校级“优秀团员”荣誉称号；   \n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">个人经验</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n目前——\t研究蛋白质-RNA结合位点的预测；  \n2015年04月 中南大学2015年研究生自主探索创新项目《基于跨物种基因共表达的蛋白质功能预测》通过，担任项目主要负责人；  \n2015年04月 带中南大学本科生软件工程专业学生《云计算》实验课，并指导学生完成部分实验；  \n2015年03月 中软国际春季实训开发《知音交友网》，担任小组组长兼技术总监，负责项目分工和监督。参与需求分析和数据库的详细设计，负责日志功能模块、恋爱秘籍模块、城市地区模块的代码开发；  \n2014年10月 中软国际秋季实训开发《南书房—网上书城》并担任技术指导，参与数据库的详细设计，主要负责项目总体页面设计以及新用户注册、订单模块和购物车模块的代码开发；  \n2013年05月 开发《音像制品出租与销售网》个人本科毕业设计，荣获“优秀”。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:16px\">自我评价</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n1.研究欲强，富有创造力；  \n2.性格温和，有耐心，待人友善，能快速适应新环境；  \n3.团队合作能力强，具有较强的合作分工意识，能够积极配合团队工作；   \n4.对自己有严格的要求，做事认真负责，每件事都坚持有始有终，不轻言放弃。","updated":"2015-11-19T07:50:44.551Z","path":"/resume/index.html","comments":1,"_id":"cih8q8rm40002r8ujxmahgh1a"},{"layout":"page","title":"","noDate":"true","comments":0,"description":"个 人 简 历","fancybox":false,"_content":"\n<div style=\"text-align:center;font-size:26px;padding-top:30px\">个 人 简 历</div>\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:13px\">基本资料</div>\n\n<div style=\"width:100%;margin-top:-12px;margin-bottom:-12px\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>\n\n<div style=\"width:100%;float:left;margin-top:-12px;\"><div style=\"float:left;width:60%;\">\n姓&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;名： 刘帝伟  \n 出生年月： 1991年7月  \n 所在学校： 中南大学\t\t\t\t\t\n 联系方式： 18707489940  \n 腾讯 Q Q： 466454368\t  \t\n 电子邮件： <a href=\"mailto:csu.ldw@csu.edu.cn\">csu.ldw@csu.edu.cn</a>  \n CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\">http://blog.csdn.net/dream_angel_z</a>\n</div><div style=\"width:37%;padding:30px 3% 0 0;float:left;text-align:right;\"><img src=\"../assets/images/face-h200.jpg\" title=\"\" /></div></div>个人说明：中南大学在读硕士， 研究方向为机器学习，数据挖掘以及生物信息领域。热爱生活、乐于Coding！\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px\">个人能力</div>\n\n<div style=\"width:100%;margin-top:-12px;padding-bottom:8px\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div> \n \n精通数据结构基本算法并熟悉数据挖掘常用分类和聚类算法，如KNN、SVM、NB、RF、Apriori等,能将所学机器学习算法运用于实际应用中；  \n熟悉C++、JAVA和Python编程语言，并有相关项目经验，了解Perl、R语言以及Matlab编程；  \n熟悉Linux基本命令和Shell高级脚本语言，掌握Git基本操作，有搭建Hadoop集群和PBS高性能集群经验；  \n熟悉JavaScript、CSS、AJAX、HTML(XHTML)，XML等前端开发技术；  \n熟悉SSH三大框架和MVC三层架构开发模式，掌握常用的设计模式；  \n熟练使用MyEclipse、Eclipse、Dreamweaver、SVN等开发工具以及visio建模工具；  \n熟练使用Tomcat服务器进行项目的开发；  \n熟练使用Oracle、MySQL、Microsoft SQL Server等数据库及SQL语言；  \n英语水平：CET-6  456分 具有良好的文献搜索和阅读能力。   \n其它技能：C1机动车辆驾驶证 \n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;padding-bottom:8px\">奖励情况</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div> \n \n2015年03月 中软实训基地实训结业并获得“个人优胜奖”及“优秀开发团队奖”；  \n2014年—— 发表论文 \" Yang Meng, Lei Deng, Zhigang Chen, Cheng Zhou, **Diwei Liu**, Chao Fan, and Ting Yan. **A Multi-Instance Multi-Label Learning Approach for Protein Domain Annotation**. **Springer LNBI**,104-111（2014）；  \n2013年06月 获得校级“优秀毕业生”荣誉称号，并且毕业设计及毕业论文荣获“优秀”； \n2012年12月 荣获湖南农业大学“校级三好学生”荣誉称号；   \n2012年12月 荣获国家励志奖学金及湖南农业大学校级二等奖学金；    \n2012年05月 荣获湖南农业大学数学建模大赛二等奖；    \n2011年12月 荣获全国大学生数学建模竞赛湖南赛区本科组三等奖； \n2011年05月 被评为湖南农业大学2010-2011年度校级“优秀学生干部”； \n2010年12月 荣获湖南农业大学校级一等奖学金及国家一等助学金。  \n2010年12月 荣获湖南农业大学2009-2010学年“院级三好学生”荣誉称号；\n2010年05月 被评为湖南农业大学2009-2010年度校级“优秀团员”荣誉称号；  \n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;padding-bottom:8px\">个人经验</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n目前——\t研究蛋白质-RNA结合位点的预测；  \n2015年04月 中南大学2015年研究生自主探索创新项目《基于跨物种基因共表达的蛋白质功能预测》通过，担任项目主要负责人；  \n2015年04月 带中南大学本科生软件工程专业学生《云计算》实验课，并指导学生完成部分实验；  \n2015年03月 中软国际春季实训开发《知音交友网》，担任小组组长兼技术总监，负责项目分工和监督。参与需求分析和数据库的详细设计，负责日志功能模块、恋爱秘籍模块、城市地区模块的代码开发；  \n2014年10月 中软国际秋季实训开发《南书房—网上书城》并担任技术总监，参与数据库的详细设计，主要负责项目总体页面设计以及新用户注册、订单模块和购物车模块的代码开发；  \n2013年05月 开发《音像制品出租与销售网》个人本科毕业设计，荣获“优秀”。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;padding-bottom:8px\">自我评价</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n1.研究欲强，富有创造力；  \n2.性格温和，有耐心，待人友善，能快速适应新环境；  \n3.团队合作能力强，具有较强的合作分工意识，能够积极配合团队工作；   \n4.对自己有严格的要求，做事认真负责，每件事都坚持有始有终，不轻言放弃。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;padding-bottom:8px\">真情独白</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n> 我喜欢，驾驭着代码在风驰电掣中创造完美！  \n> 我喜欢，操纵着代码在随心所欲中体验生活！  \n> 我喜欢，书写着代码在时代浪潮中完成经典！  \n> 每一段新的代码在我手中诞生对我来说就像观看刹那花开的感动！留下传奇，创造生命！  \n \n\n---","source":"resume/index.md","raw":"---\nlayout: page\ntitle: \"\" \nnoDate: \"true\"\ncomments: false\ndescription: \"个 人 简 历\" \nfancybox: false\n---\n\n<div style=\"text-align:center;font-size:26px;padding-top:30px\">个 人 简 历</div>\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:13px\">基本资料</div>\n\n<div style=\"width:100%;margin-top:-12px;margin-bottom:-12px\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>\n\n<div style=\"width:100%;float:left;margin-top:-12px;\"><div style=\"float:left;width:60%;\">\n姓&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;名： 刘帝伟  \n 出生年月： 1991年7月  \n 所在学校： 中南大学\t\t\t\t\t\n 联系方式： 18707489940  \n 腾讯 Q Q： 466454368\t  \t\n 电子邮件： <a href=\"mailto:csu.ldw@csu.edu.cn\">csu.ldw@csu.edu.cn</a>  \n CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\">http://blog.csdn.net/dream_angel_z</a>\n</div><div style=\"width:37%;padding:30px 3% 0 0;float:left;text-align:right;\"><img src=\"../assets/images/face-h200.jpg\" title=\"\" /></div></div>个人说明：中南大学在读硕士， 研究方向为机器学习，数据挖掘以及生物信息领域。热爱生活、乐于Coding！\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px\">个人能力</div>\n\n<div style=\"width:100%;margin-top:-12px;padding-bottom:8px\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div> \n \n精通数据结构基本算法并熟悉数据挖掘常用分类和聚类算法，如KNN、SVM、NB、RF、Apriori等,能将所学机器学习算法运用于实际应用中；  \n熟悉C++、JAVA和Python编程语言，并有相关项目经验，了解Perl、R语言以及Matlab编程；  \n熟悉Linux基本命令和Shell高级脚本语言，掌握Git基本操作，有搭建Hadoop集群和PBS高性能集群经验；  \n熟悉JavaScript、CSS、AJAX、HTML(XHTML)，XML等前端开发技术；  \n熟悉SSH三大框架和MVC三层架构开发模式，掌握常用的设计模式；  \n熟练使用MyEclipse、Eclipse、Dreamweaver、SVN等开发工具以及visio建模工具；  \n熟练使用Tomcat服务器进行项目的开发；  \n熟练使用Oracle、MySQL、Microsoft SQL Server等数据库及SQL语言；  \n英语水平：CET-6  456分 具有良好的文献搜索和阅读能力。   \n其它技能：C1机动车辆驾驶证 \n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;padding-bottom:8px\">奖励情况</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div> \n \n2015年03月 中软实训基地实训结业并获得“个人优胜奖”及“优秀开发团队奖”；  \n2014年—— 发表论文 \" Yang Meng, Lei Deng, Zhigang Chen, Cheng Zhou, **Diwei Liu**, Chao Fan, and Ting Yan. **A Multi-Instance Multi-Label Learning Approach for Protein Domain Annotation**. **Springer LNBI**,104-111（2014）；  \n2013年06月 获得校级“优秀毕业生”荣誉称号，并且毕业设计及毕业论文荣获“优秀”； \n2012年12月 荣获湖南农业大学“校级三好学生”荣誉称号；   \n2012年12月 荣获国家励志奖学金及湖南农业大学校级二等奖学金；    \n2012年05月 荣获湖南农业大学数学建模大赛二等奖；    \n2011年12月 荣获全国大学生数学建模竞赛湖南赛区本科组三等奖； \n2011年05月 被评为湖南农业大学2010-2011年度校级“优秀学生干部”； \n2010年12月 荣获湖南农业大学校级一等奖学金及国家一等助学金。  \n2010年12月 荣获湖南农业大学2009-2010学年“院级三好学生”荣誉称号；\n2010年05月 被评为湖南农业大学2009-2010年度校级“优秀团员”荣誉称号；  \n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;padding-bottom:8px\">个人经验</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n目前——\t研究蛋白质-RNA结合位点的预测；  \n2015年04月 中南大学2015年研究生自主探索创新项目《基于跨物种基因共表达的蛋白质功能预测》通过，担任项目主要负责人；  \n2015年04月 带中南大学本科生软件工程专业学生《云计算》实验课，并指导学生完成部分实验；  \n2015年03月 中软国际春季实训开发《知音交友网》，担任小组组长兼技术总监，负责项目分工和监督。参与需求分析和数据库的详细设计，负责日志功能模块、恋爱秘籍模块、城市地区模块的代码开发；  \n2014年10月 中软国际秋季实训开发《南书房—网上书城》并担任技术总监，参与数据库的详细设计，主要负责项目总体页面设计以及新用户注册、订单模块和购物车模块的代码开发；  \n2013年05月 开发《音像制品出租与销售网》个人本科毕业设计，荣获“优秀”。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;padding-bottom:8px\">自我评价</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n1.研究欲强，富有创造力；  \n2.性格温和，有耐心，待人友善，能快速适应新环境；  \n3.团队合作能力强，具有较强的合作分工意识，能够积极配合团队工作；   \n4.对自己有严格的要求，做事认真负责，每件事都坚持有始有终，不轻言放弃。\n\n\n<div style=\"width:100%;color:#518cc7;font-weight:bold;font-size:20px;padding-bottom:6px;padding-top:13px;padding-bottom:8px\">真情独白</div>\n\n<div style=\"width:100%;margin-top:-12px;\"><span><img style=\"width:100%\" src=\"../assets/images/navigate.png\"></span></div>  \n\n> 我喜欢，驾驭着代码在风驰电掣中创造完美！  \n> 我喜欢，操纵着代码在随心所欲中体验生活！  \n> 我喜欢，书写着代码在时代浪潮中完成经典！  \n> 每一段新的代码在我手中诞生对我来说就像观看刹那花开的感动！留下传奇，创造生命！  \n \n\n---","date":"2015-11-19T07:50:44.551Z","updated":"2015-11-19T07:50:44.551Z","path":"resume/index.html","_id":"cih8q8rm80003r8ujmokxblg6"},{"_content":"{\"pagination\":{},\"meta\":{\"code\":200},\"data\":[{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1394290738\",\"link\":\"https:\\/\\/instagram.com\\/p\\/lSSxd8I7kB\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/outbound-distilleryimage11\\/t0.0-17\\/OBPTH\\/a9496b08a6d111e395e20aa496a2d2bb_6.jpg\",\"width\":306,\"height\":306},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/outbound-distilleryimage11\\/t0.0-17\\/OBPTH\\/a9496b08a6d111e395e20aa496a2d2bb_5.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/outbound-distilleryimage11\\/t0.0-17\\/OBPTH\\/a9496b08a6d111e395e20aa496a2d2bb_8.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1394290738\",\"text\":\"\\u4eca\\u5929\\u4e0b\\u96e8\\uff0c\\u7684\\u58eb\\u53f8\\u673a\\u90fd\\u4e0d\\u80af\\u7406\\u6211\\u3002\\u5934\\u4e0a\\u8def\\u706f\\u5149\\u8292\\u9065\\u4e0d\\u53ef\\u53ca\\uff0c\\u811a\\u4e0b\\u8def\\u9762\\u68f1\\u89d2\\u51b0\\u51b7\\u9c9c\\u660e\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"671681859937352191\"},\"type\":\"image\",\"id\":\"671681858670672129_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1394040131\",\"link\":\"https:\\/\\/instagram.com\\/p\\/lK0xswI7s6\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/outbound-distilleryimage4\\/t0.0-17\\/OBPTH\\/26ff9176a48911e3bf7e12aca78890dc_6.jpg\",\"width\":306,\"height\":306},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/outbound-distilleryimage4\\/t0.0-17\\/OBPTH\\/26ff9176a48911e3bf7e12aca78890dc_5.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/outbound-distilleryimage4\\/t0.0-17\\/OBPTH\\/26ff9176a48911e3bf7e12aca78890dc_8.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1394040131\",\"text\":\"\\u8d77\\u98ce\\u5427\\uff0c\\u660e\\u5929\\u3002\\u559c\\u6b22\\u504f\\u51b7\\u7684\\u65e5\\u5b50\\uff0c\\u5047\\u5982\\u662f\\u6625\\u5929\\uff0c\\u5047\\u5982\\u662f\\u98ce\\u5927\\uff0c\\u592a\\u5b8c\\u7f8e\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"669579608720652783\"},\"type\":\"image\",\"id\":\"669579608343165754_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1393706362\",\"link\":\"https:\\/\\/instagram.com\\/p\\/lA4KaBI7go\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/outbound-distilleryimage9\\/t0.0-17\\/OBPTH\\/30cb58b8a18011e396f3121282ee2c71_6.jpg\",\"width\":306,\"height\":306},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/outbound-distilleryimage9\\/t0.0-17\\/OBPTH\\/30cb58b8a18011e396f3121282ee2c71_5.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/outbound-distilleryimage9\\/t0.0-17\\/OBPTH\\/30cb58b8a18011e396f3121282ee2c71_8.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1393706362\",\"text\":\"\\u817e\\u8baf\\u7684\\u51cc\\u6668\\u56db\\u70b9\\u534a\\u3002\\u7b2c\\u4e00\\u6b21\\u5728\\u6b64\\u8fc7\\u591c\\uff0c\\u542c\\u7740\\u8033\\u719f\\u4e0d\\u80fd\\u8be6\\u7684\\u6b4c\\uff0c\\u770b\\u7740\\u5e73\\u9759\\u4e0d\\u5fae\\u7b11\\u7684\\u4eba\\u3002\\u7136\\u540e\\u8bb0\\u8d77\\uff0c\\u5bb6\\u91cc\\u6253\\u6765\\u88ab\\u6211\\u6309\\u6389\\u7684\\u7535\\u8bdd\\uff0c\\u5fd8\\u4e86\\u56de\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"666779751014447553\"},\"type\":\"image\",\"id\":\"666779750586628136_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1393603959\",\"link\":\"https:\\/\\/instagram.com\\/p\\/k902HUI7ms\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/1741772_1426622784247263_147777246_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/1741772_1426622784247263_147777246_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/1741772_1426622784247263_147777246_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1393603959\",\"text\":\"\\u4ece\\u524d\\u6709\\u4e00\\u5ea7\\u817e\\u8baf\\u5927\\u53a6\\uff0c\\u91cc\\u9762\\u6709\\u4e00\\u4e2a\\u8001\\u7a0b\\u5e8f\\u5458\\uff0c\\u5728\\u8ddf\\u4e00\\u4e2a\\u5c0f\\u7a0b\\u5e8f\\u5458\\u8bb2\\u6545\\u4e8b\\u3002\\u8bb2\\u7684\\u4ec0\\u4e48\\u6545\\u4e8b\\u5462\\uff1f\\u4ece\\u524d\\u6709\\u4e00\\u5ea7\\u817e\\u8baf\\u5927\\u53a6\\u2026\\u5728\\u8fd9\\u79cd\\u9012\\u5f52\\u51fd\\u6570\\u7684\\u7d27\\u5bc6\\u5c01\\u88c5\\u4e2d\\uff0c\\u5c0f\\u7a0b\\u5e8f\\u5458\\u558a\\u9053:\\u6211\\u4e0d\\u542c\\uff01\\u4e0d\\u8981\\u5267\\u900f\\u554a\\uff01\\u7528\\u8fd9\\u79cd\\u65b9\\u5f0f\\uff0c\\u4ed6break\\u4e86\\u51fa\\u53bb\\uff01\\u661f\\u591c\\u9003\\u5954\\uff0c\\u655b\\u5f71\\u6f5c\\u5f62\\u3002\\u73b0\\u5728\\u6211\\u89c9\\u5f97\\u81ea\\u5df1\\u4f3c\\u4e4e\\u662f\\u4e2a\\u82f1\\u96c4\\u2026\\u867d\\u7136\\u8fd9\\u9519\\u89c9\\u53ea\\u6709\\u4e00\\u77ac\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"665920737657469242\"},\"type\":\"image\",\"id\":\"665920737045100972_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":22.571178926,\"longitude\":113.899987696},\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1393135615\",\"link\":\"https:\\/\\/instagram.com\\/p\\/kv3jNgI7sw\\/\",\"likes\":{\"count\":3,\"data\":[{\"username\":\"wallbase.hd\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10617029_283951291805046_1229690122_a.jpg\",\"id\":\"1489501811\",\"full_name\":\"\"},{\"username\":\"dingstyle\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_30683156_75sq_1333592929.jpg\",\"id\":\"30683156\",\"full_name\":\"Linjie\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/1737225_591794970889160_1849235580_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/1737225_591794970889160_1849235580_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/1737225_591794970889160_1849235580_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1393135615\",\"text\":\"\\u201c\\u4e0d\\u80fd\\u5403\\u592a\\u80d6\\u5594\\uff0c\\u4f1a\\u88ab\\u6740\\u6389\\u7684\\uff01\\u201d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"661991984237623781\"},\"type\":\"image\",\"id\":\"661991982484405040_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":22.566938333,\"longitude\":113.903916667},\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Rise\",\"created_time\":\"1393004094\",\"link\":\"https:\\/\\/instagram.com\\/p\\/kr8sW8I7nR\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/1741200_451260698337036_577792061_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/1741200_451260698337036_577792061_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/1741200_451260698337036_577792061_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1393004094\",\"text\":\"\\u4eca\\u665a\\uff0c\\u5df2\\u7ecf\\u770b\\u5230\\u4e24\\u4e2a\\u5c0f\\u5973\\u751f\\u5728\\u95ee\\uff0c\\u8fd9\\u91cc\\u6709\\u300a\\u4e5d\\u4e91\\u68a6\\u300b\\u5417\\uff1f\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"660888701821500154\"},\"type\":\"image\",\"id\":\"660888701418846673_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}}]}","source":"instagram/ins2.json","raw":"{\"pagination\":{},\"meta\":{\"code\":200},\"data\":[{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1394290738\",\"link\":\"https:\\/\\/instagram.com\\/p\\/lSSxd8I7kB\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/outbound-distilleryimage11\\/t0.0-17\\/OBPTH\\/a9496b08a6d111e395e20aa496a2d2bb_6.jpg\",\"width\":306,\"height\":306},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/outbound-distilleryimage11\\/t0.0-17\\/OBPTH\\/a9496b08a6d111e395e20aa496a2d2bb_5.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/outbound-distilleryimage11\\/t0.0-17\\/OBPTH\\/a9496b08a6d111e395e20aa496a2d2bb_8.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1394290738\",\"text\":\"\\u4eca\\u5929\\u4e0b\\u96e8\\uff0c\\u7684\\u58eb\\u53f8\\u673a\\u90fd\\u4e0d\\u80af\\u7406\\u6211\\u3002\\u5934\\u4e0a\\u8def\\u706f\\u5149\\u8292\\u9065\\u4e0d\\u53ef\\u53ca\\uff0c\\u811a\\u4e0b\\u8def\\u9762\\u68f1\\u89d2\\u51b0\\u51b7\\u9c9c\\u660e\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"671681859937352191\"},\"type\":\"image\",\"id\":\"671681858670672129_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1394040131\",\"link\":\"https:\\/\\/instagram.com\\/p\\/lK0xswI7s6\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/outbound-distilleryimage4\\/t0.0-17\\/OBPTH\\/26ff9176a48911e3bf7e12aca78890dc_6.jpg\",\"width\":306,\"height\":306},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/outbound-distilleryimage4\\/t0.0-17\\/OBPTH\\/26ff9176a48911e3bf7e12aca78890dc_5.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/outbound-distilleryimage4\\/t0.0-17\\/OBPTH\\/26ff9176a48911e3bf7e12aca78890dc_8.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1394040131\",\"text\":\"\\u8d77\\u98ce\\u5427\\uff0c\\u660e\\u5929\\u3002\\u559c\\u6b22\\u504f\\u51b7\\u7684\\u65e5\\u5b50\\uff0c\\u5047\\u5982\\u662f\\u6625\\u5929\\uff0c\\u5047\\u5982\\u662f\\u98ce\\u5927\\uff0c\\u592a\\u5b8c\\u7f8e\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"669579608720652783\"},\"type\":\"image\",\"id\":\"669579608343165754_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1393706362\",\"link\":\"https:\\/\\/instagram.com\\/p\\/lA4KaBI7go\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/outbound-distilleryimage9\\/t0.0-17\\/OBPTH\\/30cb58b8a18011e396f3121282ee2c71_6.jpg\",\"width\":306,\"height\":306},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/outbound-distilleryimage9\\/t0.0-17\\/OBPTH\\/30cb58b8a18011e396f3121282ee2c71_5.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/outbound-distilleryimage9\\/t0.0-17\\/OBPTH\\/30cb58b8a18011e396f3121282ee2c71_8.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1393706362\",\"text\":\"\\u817e\\u8baf\\u7684\\u51cc\\u6668\\u56db\\u70b9\\u534a\\u3002\\u7b2c\\u4e00\\u6b21\\u5728\\u6b64\\u8fc7\\u591c\\uff0c\\u542c\\u7740\\u8033\\u719f\\u4e0d\\u80fd\\u8be6\\u7684\\u6b4c\\uff0c\\u770b\\u7740\\u5e73\\u9759\\u4e0d\\u5fae\\u7b11\\u7684\\u4eba\\u3002\\u7136\\u540e\\u8bb0\\u8d77\\uff0c\\u5bb6\\u91cc\\u6253\\u6765\\u88ab\\u6211\\u6309\\u6389\\u7684\\u7535\\u8bdd\\uff0c\\u5fd8\\u4e86\\u56de\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"666779751014447553\"},\"type\":\"image\",\"id\":\"666779750586628136_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1393603959\",\"link\":\"https:\\/\\/instagram.com\\/p\\/k902HUI7ms\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/1741772_1426622784247263_147777246_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/1741772_1426622784247263_147777246_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/1741772_1426622784247263_147777246_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1393603959\",\"text\":\"\\u4ece\\u524d\\u6709\\u4e00\\u5ea7\\u817e\\u8baf\\u5927\\u53a6\\uff0c\\u91cc\\u9762\\u6709\\u4e00\\u4e2a\\u8001\\u7a0b\\u5e8f\\u5458\\uff0c\\u5728\\u8ddf\\u4e00\\u4e2a\\u5c0f\\u7a0b\\u5e8f\\u5458\\u8bb2\\u6545\\u4e8b\\u3002\\u8bb2\\u7684\\u4ec0\\u4e48\\u6545\\u4e8b\\u5462\\uff1f\\u4ece\\u524d\\u6709\\u4e00\\u5ea7\\u817e\\u8baf\\u5927\\u53a6\\u2026\\u5728\\u8fd9\\u79cd\\u9012\\u5f52\\u51fd\\u6570\\u7684\\u7d27\\u5bc6\\u5c01\\u88c5\\u4e2d\\uff0c\\u5c0f\\u7a0b\\u5e8f\\u5458\\u558a\\u9053:\\u6211\\u4e0d\\u542c\\uff01\\u4e0d\\u8981\\u5267\\u900f\\u554a\\uff01\\u7528\\u8fd9\\u79cd\\u65b9\\u5f0f\\uff0c\\u4ed6break\\u4e86\\u51fa\\u53bb\\uff01\\u661f\\u591c\\u9003\\u5954\\uff0c\\u655b\\u5f71\\u6f5c\\u5f62\\u3002\\u73b0\\u5728\\u6211\\u89c9\\u5f97\\u81ea\\u5df1\\u4f3c\\u4e4e\\u662f\\u4e2a\\u82f1\\u96c4\\u2026\\u867d\\u7136\\u8fd9\\u9519\\u89c9\\u53ea\\u6709\\u4e00\\u77ac\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"665920737657469242\"},\"type\":\"image\",\"id\":\"665920737045100972_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":22.571178926,\"longitude\":113.899987696},\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1393135615\",\"link\":\"https:\\/\\/instagram.com\\/p\\/kv3jNgI7sw\\/\",\"likes\":{\"count\":3,\"data\":[{\"username\":\"wallbase.hd\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10617029_283951291805046_1229690122_a.jpg\",\"id\":\"1489501811\",\"full_name\":\"\"},{\"username\":\"dingstyle\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_30683156_75sq_1333592929.jpg\",\"id\":\"30683156\",\"full_name\":\"Linjie\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/1737225_591794970889160_1849235580_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/1737225_591794970889160_1849235580_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/1737225_591794970889160_1849235580_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1393135615\",\"text\":\"\\u201c\\u4e0d\\u80fd\\u5403\\u592a\\u80d6\\u5594\\uff0c\\u4f1a\\u88ab\\u6740\\u6389\\u7684\\uff01\\u201d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"661991984237623781\"},\"type\":\"image\",\"id\":\"661991982484405040_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":22.566938333,\"longitude\":113.903916667},\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Rise\",\"created_time\":\"1393004094\",\"link\":\"https:\\/\\/instagram.com\\/p\\/kr8sW8I7nR\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/1741200_451260698337036_577792061_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/1741200_451260698337036_577792061_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/1741200_451260698337036_577792061_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1393004094\",\"text\":\"\\u4eca\\u665a\\uff0c\\u5df2\\u7ecf\\u770b\\u5230\\u4e24\\u4e2a\\u5c0f\\u5973\\u751f\\u5728\\u95ee\\uff0c\\u8fd9\\u91cc\\u6709\\u300a\\u4e5d\\u4e91\\u68a6\\u300b\\u5417\\uff1f\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"660888701821500154\"},\"type\":\"image\",\"id\":\"660888701418846673_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}}]}","date":"2015-11-19T07:50:44.550Z","updated":"2015-11-19T07:50:44.550Z","path":"instagram/ins2.json","layout":"false","title":"","comments":1,"_id":"cih8q8rmn0004r8ujv9fbye0n"},{"_content":"{\"pagination\":{\"next_url\":\"https:\\/\\/api.instagram.com\\/v1\\/users\\/438522285\\/media\\/recent?count=100\\u0026callback=jQuery19008141340191941708_1433432491285\\u0026client_id=956dd096b6e5496aba6662165b9b8443\\u0026max_id=762309207182785278_438522285\\u0026_=1433432491286\",\"next_max_id\":\"762309207182785278_438522285\"},\"meta\":{\"code\":200},\"data\":[{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1411210501\",\"text\":\"hi~\",\"from\":{\"username\":\"hawaiiboyzshelwin\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10948635_702403553211063_1668445983_a.jpg\",\"id\":\"293705161\",\"full_name\":\"Hawaii\"},\"id\":\"813615113719495343\"}]},\"filter\":\"Mayfair\",\"created_time\":\"1411177261\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tJjQlAo7kH\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/925287_1464119273867077_427071626_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/925287_1464119273867077_427071626_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/925287_1464119273867077_427071626_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1411177261\",\"text\":\"\\u6c89\\u7720\\u7684\\u5e97\\u4e3b\\u5931\\u7720\\u7684\\u72d7\\u3002\\u60f3\\u8d77\\u5927\\u5b66\\u7684\\u6700\\u540e\\u65f6\\u5149\\uff0c\\u5bbf\\u820d24\\u5c0f\\u65f6\\u90fd\\u6709\\u4eba\\u9192\\u7740\\uff0c\\u81ea\\u7531\\u7684\\u4eba\\u751f\\uff0c\\u81ea\\u7531\\u7684\\u9152\\u548c\\u66f2\\u7ec8\\u4eba\\u6563\\uff0c\\u5927\\u5bb6\\u901a\\u5e38\\u6ca1\\u6709\\u53e6\\u4e00\\u534a\\uff0c\\u6ca1\\u6709\\u94b1\\uff0c\\u6ca1\\u6709\\u5fe7\\u6101\\uff0c\\u723d\\u6210\\u72d7\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"813336279132649576\"},\"type\":\"image\",\"id\":\"813336278595778823_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1410970444\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tDYyUeo7oX\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/925284_1534308033454310_855505111_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/925284_1534308033454310_855505111_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/925284_1534308033454310_855505111_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410970444\",\"text\":\"\\u5982\\u679c\\u4ed6\\u662f\\u7a0b\\u5e8f\\u5458\\u2026\\nvar date = lifetime;\\rif(rotate(mountain, water, stupa)){ \\/*return nextLifetime;*\\/ return meetyou(journey);\\r}\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"811601369455900672\"},\"type\":\"image\",\"id\":\"811601368935807511_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1410924584\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tCBULHo7sW\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10666267_1550871771803214_2074300649_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10666267_1550871771803214_2074300649_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10666267_1550871771803214_2074300649_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410924584\",\"text\":\"\\u542c\\u7740\\u5c71\\u5be8\\u7684\\u6c11\\u8c23\\u7535\\u5b50\\u4e50\\uff0c\\u770b\\u7740\\u7f8e\\u597d\\u7684\\u59d1\\u5a18\\u3002\\u529f\\u5fb7\\u65e0\\u91cf\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"811216667700083459\"},\"type\":\"image\",\"id\":\"811216667255487254_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1411008352\",\"text\":\"\\u6bcf\\u5929\\u90fd\\u8ba9\\u5750\\u5728\\u7535\\u8111\\u524d\\u7684\\u6211\\u76f8\\u4fe1\\u751f\\u6d3b\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"811919369774020696\"}]},\"filter\":\"Mayfair\",\"created_time\":\"1410923563\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tB_Xmao7qG\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10693244_734401199942901_1572709880_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10693244_734401199942901_1572709880_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10693244_734401199942901_1572709880_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410923563\",\"text\":\"\\u5f25\\u91cc\\u5858\\u592a\\u5b81\\u9759\\u3002\\u5728\\u8fd9\\u6211\\u4e00\\u76f4\\u60f3\\u8d77\\u6bcf\\u4e00\\u4e2a\\u88ab\\u6df1\\u5733\\u8f66\\u6c34\\u9a6c\\u9f99\\u58f0\\u5435\\u9192\\u7684\\u65e9\\u6668\\uff0c\\u771f\\u662f\\u5149\\u8f89\\u7684\\u5c81\\u6708\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"811208107217893670\"},\"type\":\"image\",\"id\":\"811208106630691462_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1410794550\",\"text\":\"\\u9ad8\\u539f\\u53cd\\u5e94\\u4e25\\u91cd\\u5417\\uff1fP.S. \\u963f\\u817e\\u4f60\\u5565\\u65f6\\u5019\\u56de\\u6765\\uff1f\",\"from\":{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},\"id\":\"810125861157321531\"},{\"created_time\":\"1410923814\",\"text\":\"@winiex \\u54c8\\u54c8\\uff0c\\u6ca1\\u4ec0\\u4e48\\u53cd\\u5e94\\u53ea\\u8981\\u6211\\u4e0d\\u4e71\\u8dd1\\u52a8\\u3002\\u5f88\\u5feb\\u56de\\u6765\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"811210206056004013\"}]},\"filter\":\"Normal\",\"created_time\":\"1410737336\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s8cKzLI7pM\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10693771_1517437541834868_665867908_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10693771_1517437541834868_665867908_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10693771_1517437541834868_665867908_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410737336\",\"text\":\"\\u8fdb\\u85cf\\u3002\\u5929\\u7a7a\\u6302\\u6ee1\\u7740\\u4e91\\uff0c\\u9ed1\\u7684\\u767d\\u7684\\u90fd\\u6709\\u3002\\u4e91\\u6735\\u8f6c\\u773c\\u98d8\\u6563\\uff0c\\u5b83\\u5374\\u4f9d\\u7136\\u662f\\u84dd\\u8272\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"809645920867301928\"},\"type\":\"image\",\"id\":\"809645920464648780_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t50.2886-16\\/10701710_281586128699201_335902712_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10701471_605249519584920_450596792_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t50.2886-16\\/10701900_770932669629703_1501695708_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Stinson\",\"created_time\":\"1410688270\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s6-lOFo7ip\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s320x320\\/e15\\/10693822_497709657032441_1125408654_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s150x150\\/e15\\/10693822_497709657032441_1125408654_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/e15\\/10693822_497709657032441_1125408654_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410688270\",\"text\":\"\\u201c\\u97f3\\u6d6a\\u592a\\u5f3a\\u4e0d\\u6643\\u4f1a\\u88ab\\u649e\\u5230\\u5730\\u4e0a\\u2026\\u201d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"809234320184293724\"},\"type\":\"video\",\"id\":\"809234319697754281_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1410625333\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s5GifkI7q7\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/10683941_796597910390683_12441123_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/10683941_796597910390683_12441123_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/10683941_796597910390683_12441123_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410625333\",\"text\":\"\\u964c\\u751f\\u7684\\u670b\\u53cb\\uff0c\\u613f\\u4e0b\\u6b21\\u518d\\u80fd\\u4e0e\\u4f60\\u4eec\\u76f8\\u805a\\u5728\\u4e3d\\u6c5flove wine \\u0026 half\\u3002\\u6211\\u65e0\\u6cd5\\u878d\\u89e3\\u4f60\\u60b2\\u89c2\\u73b0\\u5b9e\\u7684\\u60f3\\u6cd5\\uff0c\\u4f60\\u4e5f\\u65e0\\u6cd5\\u8bf4\\u670d\\u6211\\u65c5\\u884c\\u5e76\\u4e0d\\u662f\\u9003\\u907f\\u3002\\u4f46\\u8fd9\\u90fd\\u5f88\\u6709\\u610f\\u601d\\u3002\\u53ea\\u662f\\u60f3\\u8d77\\u4ee5\\u524d\\u6709\\u4e2a\\u4eba\\u53eb\\u6211\\u4e0d\\u80fd\\u559d\\u592a\\u591a\\u7684\\u9152\\uff0c\\u4e00\\u60f3\\u5230\\u8fd9\\u4e2a\\u5440\\u6211\\u5c31\\u8d8a\\u559d\\u8d8a\\u591a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"808706367646054518\"},\"type\":\"image\",\"id\":\"808706366723308219_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t50.2886-16\\/10701691_550252955102921_1153150516_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/l\\/t50.2886-16\\/10705857_251763575033861_1402444343_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10701411_275533589303527_2032117818_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1410668529\",\"text\":\"\\u54c7\\uff0cgood,\\u4f60\\u8bf7\\u5047\\u53bb\\u65c5\\u6e38\\u7684\\u5417\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"809068726839392635\"},{\"created_time\":\"1410706116\",\"text\":\"@zheng_ji \\u662f\\u5440\\uff0c\\u653e\\u677e\\u4e0b\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"809384027007203495\"}]},\"filter\":\"Normal\",\"created_time\":\"1410579121\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s3uZcmo7uj\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10661142_164227523747936_1526737465_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10661142_164227523747936_1526737465_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10661142_164227523747936_1526737465_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410579121\",\"text\":\"\\u7389\\u9f99\\u96ea\\u5c71\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"808318717479074388\"},\"type\":\"video\",\"id\":\"808318716975758243_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1410629707\",\"text\":\"\\u53bb\\u675f\\u6cb3\\u4e86\\u5417\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"808743058343704606\"},{\"created_time\":\"1410706038\",\"text\":\"@sasanzuo \\u53bb\\u4e86\\uff0c\\u4e3d\\u6c5f\\u6700\\u559c\\u6b22\\u675f\\u6cb3\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"809383369692657787\"}]},\"filter\":\"Normal\",\"created_time\":\"1410535625\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s2bb5io7p-\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s320x320\\/e15\\/10661182_550889531706942_2043749716_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s150x150\\/e15\\/10661182_550889531706942_2043749716_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/e15\\/10661182_550889531706942_2043749716_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410535625\",\"text\":\"\\u4ee5\\u524d\\u60f3\\u53bb\\u4e3d\\u6c5f\\uff0c\\u4f46\\u53bb\\u8fc7\\u7684\\u4eba\\u90fd\\u704c\\u8f93\\u7740\\u4f60\\u4e5f\\u8bb8\\u4f1a\\u5931\\u671b\\u7684\\u89c2\\u5ff5\\uff0c\\u56e0\\u800c\\u751a\\u81f3\\u4e0d\\u6562\\u52a8\\u8eab\\u3002\\u8fd9\\u662f\\u4e00\\u79cd\\u201c\\u6015\\u201d\\u3002\\u6709\\u65f6\\u5019\\u771f\\u5f97\\u81ea\\u5df1\\u53bb\\u770b\\u770b\\u624d\\u4f1a\\u4e86\\u7136\\u3002\\u7b2c\\u4e00\\u5929\\u5728\\u4e3d\\u6c5f\\uff0c\\u6c11\\u8c23\\u5409\\u4ed6\\u7f13\\u7f13\\u6d41\\u8fc7\\u5546\\u4e1a\\u5316\\u7684\\u8857\\u9053\\uff0c\\u539f\\u6765\\u6ca1\\u6709\\u60ca\\u559c\\uff0c\\u4e5f\\u6ca1\\u6709\\u5931\\u671b\\uff0c\\u4e00\\u5207\\u521a\\u521a\\u597d\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807953848229673047\"},\"type\":\"image\",\"id\":\"807953847625693822_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10687579_864566316888364_601110692_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10705731_491458530957700_895623007_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t50.2886-16\\/10701554_631893030261190_220785276_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Maven\",\"created_time\":\"1410529596\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s2P72tI7o6\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10520334_1523531751215211_1344090061_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10520334_1523531751215211_1344090061_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10520334_1523531751215211_1344090061_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410529596\",\"text\":\"\\u6211\\u6ce8\\u5b9a\\u8981\\u56de\\u5230\\u8001\\u8def\\u4e0a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807903268480203532\"},\"type\":\"video\",\"id\":\"807903267045751354_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":5,\"data\":[{\"created_time\":\"1410529334\",\"text\":\"\\u7ec8\\u4e8e\\u53d1\\u73b0\\u4e86\\u963f\\u817e\\u7684 Instagram:)\",\"from\":{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},\"id\":\"807901070295808629\"},{\"created_time\":\"1410534900\",\"text\":\"@winiex \\u54c8\\u54c8\\uff0c\\u8bf4\\u5b9e\\u8bdd\\u2026\\u5fae\\u535a\\u548c\\u5fae\\u4fe1\\u52a0\\u4e86\\u5f88\\u591a\\u540c\\u4e8b\\uff0c\\u603b\\u611f\\u89c9\\u4e0d\\u81ea\\u5728\\uff0c\\u5c31\\u7528ins\\u6bd4\\u8f83\\u591a\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807947760767842994\"},{\"created_time\":\"1410537411\",\"text\":\"@litten225 \\u662f\\u8bf4\\u524d\\u6bb5\\u65f6\\u95f4\\u5ffd\\u7136\\u60f3\\u8d77\\u6765\\u4e0a\\u8001\\u6ca1\\u770b\\u5230\\u4f60\\u52a8\\u9759\\u5462;)\\u3002\\u53ef\\u80fd\\u516c\\u53f8\\u5927\\u4e86\\uff0c\\u670b\\u53cb\\u90fd\\u5982\\u725b\\u6392\\uff0c\\u4e03\\u5206\\u719f\\u6700\\u4f73:)\\u3002\",\"from\":{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},\"id\":\"807968828790388817\"},{\"created_time\":\"1410537434\",\"text\":\"\\u5fae\\u535a\\u4e0a\\uff0ctypo \\u5566\",\"from\":{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},\"id\":\"807969017861224538\"},{\"created_time\":\"1410571556\",\"text\":\"@winiex \\u662f\\u554a\\uff0c\\u8ddf\\u540c\\u5b66\\u53ef\\u4ee5\\u4e00\\u8d77\\u5410\\u69fd\\u8001\\u5e08\\u548c\\u6559\\u5b66\\uff0c\\u771f\\u5b9e\\u7684\\u60f3\\u6cd5\\u65e0\\u9700\\u987e\\u8651\\u3002\\u4f46\\u662f\\u8ddf\\u540c\\u4e8b\\u4e00\\u8d77\\u5410\\u69fd\\u8001\\u5927\\u548c\\u5de5\\u4f5c\\uff0c\\u53c8\\u662f\\u53e6\\u5916\\u4e00\\u56de\\u4e8b\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"808255256711641620\"}]},\"filter\":\"Normal\",\"created_time\":\"1410523991\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s2FPpGI7o_\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s320x320\\/e15\\/10693390_547748238660649_761529890_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s150x150\\/e15\\/10693390_547748238660649_761529890_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/e15\\/10693390_547748238660649_761529890_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410523991\",\"text\":\"\\u5f69\\u4e91\\u4e4b\\u5357\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807856248839190621\"},\"type\":\"image\",\"id\":\"807856248310708799_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1410493579\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s1LPQPo7v8\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"wallbase.hd\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10617029_283951291805046_1229690122_a.jpg\",\"id\":\"1489501811\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10693650_837768039589771_1793184733_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10693650_837768039589771_1793184733_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10693650_837768039589771_1793184733_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410493579\",\"text\":\"\\u4e91\\u5357\\uff0c\\u5411\\u5f80\\u5df2\\u4e45\\u7684\\u5730\\u65b9\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807601135591602253\"},\"type\":\"image\",\"id\":\"807601134928903164_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Lo-fi\",\"created_time\":\"1410433815\",\"link\":\"https:\\/\\/instagram.com\\/p\\/szZP5Io7lY\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"wallbase.hd\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10617029_283951291805046_1229690122_a.jpg\",\"id\":\"1489501811\",\"full_name\":\"\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xft1\\/t51.2885-15\\/s320x320\\/e15\\/914812_1529561143923493_1662159287_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xft1\\/t51.2885-15\\/s150x150\\/e15\\/914812_1529561143923493_1662159287_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xft1\\/t51.2885-15\\/e15\\/914812_1529561143923493_1662159287_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410433815\",\"text\":\"QQ\\u540c\\u65f6\\u5728\\u7ebf\\u4eba\\u6570\\u78342\\u4ebf\\u7eaa\\u5ff5\\uff0c\\u4f5c\\u4e3a\\u4e00\\u9897\\u5c0f\\u5c0f\\u87ba\\u4e1d\\u9489\\uff0c\\u540d\\u5b57\\u6b63\\u597d\\u9576\\u5230\\u4f01\\u9e45\\u7684\\u5927\\u5634\\u5df4\\u4e0a\\u3002\\u8fd9\\u65f6\\u89c9\\u5f97\\u6709\\u4e00\\u4e1d\\u5149\\u8363\\uff0c\\u4e00\\u79cd\\u52aa\\u529b\\u88ab\\u5b9e\\u5316\\u7684\\u9519\\u89c9\\uff1b\\u7136\\u540e\\u53c8\\u6709\\u70b9\\u4e0d\\u8212\\u670d\\uff0c\\u611f\\u89c9\\u6b64\\u65f6\\u7684\\u81ea\\u5df1\\uff0c\\u548c\\u540d\\u5b57\\u8eab\\u8fb9\\u7684\\u4eba\\u4e00\\u6837\\u3002\\u53ef\\u6211\\u60f3\\u8981\\u7684\\u5c31\\u662f\\u4e0d\\u4e00\\u6837\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807099801993984938\"},\"type\":\"image\",\"id\":\"807099801532610904_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1410373253\",\"text\":\"\\u4e00\\u8d77\\u73a9INS\\ue328\\ue328@gggiselle3333\",\"from\":{\"username\":\"yokiaee\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/10598222_301874203326431_1095562300_a.jpg\",\"id\":\"1450755432\",\"full_name\":\"\\u7cd6\\u5b9d\"},\"id\":\"806591765504309560\"}]},\"filter\":\"Sierra\",\"created_time\":\"1410184482\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sr9rtNo7lM\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},{\"username\":\"fiona2523\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11350911_404317656438368_954826284_a.jpg\",\"id\":\"465984487\",\"full_name\":\"\\ud83c\\udf38Fiona\\ud83c\\udf38\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10644019_368509079979549_2085033896_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10644019_368509079979549_2085033896_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10644019_368509079979549_2085033896_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410184482\",\"text\":\"\\u966a\\u4f34\\u4e00\\u5b9a\\u5f97\\u662f\\u4ef6\\u6f2b\\u957f\\u7684\\u4e8b\\u5475\\u3002\\u548c\\u5976\\u5976\\u5728\\u4e00\\u8d77\\u7684\\u4e2d\\u79cb\\u8282\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"805008243199032014\"},\"type\":\"image\",\"id\":\"805008242737658188_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t50.2886-16\\/10687823_350153388474464_1223789041_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t50.2886-16\\/10701732_344063979085756_1879637417_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10688739_629114507205181_1066132726_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Maven\",\"created_time\":\"1410183340\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sr7gXKI7h_\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10684161_918887498139099_2081383304_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10684161_918887498139099_2081383304_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10684161_918887498139099_2081383304_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410183340\",\"text\":\"\\u4e2d\\u79cb\\u548c\\u5bb6\\u4eba\\u4e00\\u8d77\\u53bb\\u770b\\u5b54\\u660e\\u706f\\uff0c\\u70ed\\u95f9\\u800c\\u5b89\\u9038\\uff0c\\u8fd9\\u662f\\u5c0f\\u57ce\\u5e02\\u7684\\u7f8e\\u597d\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"804998667946932332\"},\"type\":\"video\",\"id\":\"804998667049351295_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1410239540\",\"text\":\"\\u8bf4\\u7684\\u6211\\u4e5f\\u52a8\\u5bb9\\u4e86\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"805470101433465439\"},{\"created_time\":\"1410359659\",\"text\":\"@zheng_ji \\u4e00\\u5207\\u597d\\u795e\\u5947\\uff0c\\u5c31\\u662f\\u8d70\\u5230\\u90a3\\uff0c\\u53d1\\u73b0\\u5979\\u8fd8\\u5728\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"806477733090801988\"}]},\"filter\":\"Unknown\",\"created_time\":\"1410155775\",\"link\":\"https:\\/\\/instagram.com\\/p\\/srG7fjo7sV\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s320x320\\/e15\\/10683828_327931784041264_894089329_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s150x150\\/e15\\/10683828_327931784041264_894089329_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/e15\\/10683828_327931784041264_894089329_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410155775\",\"text\":\"\\u8001\\u5bb6\\u7684\\u8461\\u8404\\u85e4\\uff0c\\u4ece\\u6211\\u521d\\u4e2d\\u65f6\\u5c31\\u6302\\u5728\\u8fd9\\uff0c\\u518d\\u89c1\\u5df2\\u662f\\u5341\\u4e00\\u5e74\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"804767435447318654\"},\"type\":\"image\",\"id\":\"804767435027888917_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1410085359\",\"link\":\"https:\\/\\/instagram.com\\/p\\/spAnrio7oh\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s320x320\\/e15\\/10666028_872988212713750_1345360858_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s150x150\\/e15\\/10666028_872988212713750_1345360858_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/e15\\/10666028_872988212713750_1345360858_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410085359\",\"text\":\"\\u5bb6\\u91cc\\u6a44\\u6984\\u719f\\u4e86\\uff0c\\u76d0\\u6e0d\\uff0c\\u66b4\\u6652\\uff0c\\u8638\\u871c\\uff0c\\u7b80\\u76f4\\u4eba\\u95f4\\u7f8e\\u5473!\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"804176735760529648\"},\"type\":\"image\",\"id\":\"804176735273990689_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1409914668\",\"text\":\"\\u4e2d\\u79cb\\u795d\\u597d\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"802744876627376939\"},{\"created_time\":\"1410085406\",\"text\":\"@zheng_ji \\u4e2d\\u79cb\\u8282\\u5feb\\u4e50\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"804177137474189571\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1409913076\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sj4BGgI7t_\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10665501_1452353738387652_2075798065_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10665501_1452353738387652_2075798065_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10665501_1452353738387652_2075798065_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1409913076\",\"text\":\"\\u5728\\u4e00\\u573a\\u592a\\u9633\\u96e8\\u91cc\\u56de\\u5230\\u5bb6\\u4e2d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"802731525369215150\"},\"type\":\"image\",\"id\":\"802731524907842431_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":5,\"data\":[{\"created_time\":\"1409495738\",\"text\":\"\\u5929\\u5929\\u5728\\u88ab\\u670d\\u52a1\\u5668\\u8650\\u6ca1\\u4e2a\\u4eba\\u65f6\\u95f4\\u4e86\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"799230636918553169\"},{\"created_time\":\"1409537231\",\"text\":\"\\u4f60\\u53bb\\u542c\\u542c\\u91ce\\u5b69\\u5b50\\uff0c\\u5f20\\u73ae\\u73ae\\u90ed\\u9f99\\u7684\\u767d\\u94f6\\u996d\\u5e97\\u548c\\u6211\\u7b49\\u7740\\u4f60\\u56de\\u6765\\uff0c\\u770b\\u770b\\u662f\\u5426\\u559c\\u6b22\\u8fd9\\u79cd\\u98ce\\u683c\\u3002\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"799578708500527379\"},{\"created_time\":\"1409913295\",\"text\":\"@sasanzuo \\u6211\\u542c\\u6c11\\u8c23\\u6bd4\\u8f83\\u591a\\uff0c\\u674e\\u5fd7\\u5f20\\u73ae\\u73ae\\u4e00\\u76f4\\u5f88\\u559c\\u6b22\\u5450\\uff0c\\u91ce\\u5b69\\u5b50\\u5c31\\u542c\\u5f97\\u5f88\\u5c11\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"802733361660672253\"},{\"created_time\":\"1409913403\",\"text\":\"@zheng_ji \\u8fd9\\u4e48\\u60e8\\uff1f\\u8d76\\u7d27\\u9a6f\\u670d\\u5b83\\uff01\\u4e00\\u5207\\u78e8\\u4eba\\u7684\\u670d\\u52a1\\u5668\\u90fd\\u662f\\u7eb8\\u8001\\u864e\\uff01\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"802734270063032609\"},{\"created_time\":\"1409917831\",\"text\":\"@litten225 \\u554a\\u90a3\\u6709\\u8bdd\\u804a\\uff0c\\u4ed6\\u4eec\\u90fd\\u662f\\u6211\\u5f88\\u597d\\u7684\\u670b\\u53cb\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"802771409702206463\"}]},\"filter\":\"Unknown\",\"created_time\":\"1409495189\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sXa9g6I7jB\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s320x320\\/e15\\/10654876_610857929023752_364709543_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s150x150\\/e15\\/10654876_610857929023752_364709543_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/e15\\/10654876_610857929023752_364709543_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1409495189\",\"text\":\"\\u5728\\u4e66\\u5e97\\u7684\\u665a\\u4e0a\\u7ec8\\u4e8e\\u628a\\u65b0\\u4e13\\u53cd\\u590d\\u542c\\u5b8c\\u3002\\u592a\\u67d4\\u4e86\\u2026\\u6253\\u4e00\\u661f\\u4e24\\u661f\\u7684\\u4eba\\u80af\\u5b9a\\u662f\\u771f\\u7231\\u7c89\\uff0c\\u8fd9\\u70b9\\u6709\\u4eba\\u6562\\u6000\\u7591\\uff1f\\u6211\\u4e0d\\u662f\\uff0c\\u6253\\u56db\\u661f\\uff01\\u505c\\u4e0d\\u4e0b\\u6765\\uff0c\\u76f4\\u5230\\u4e66\\u5e97\\u54cd\\u8d77:\\u6df1\\u5733\\u5373\\u5c06\\u5165\\u7720\\u3002\\u4f4622\\u70b9\\u8fd8\\u662f\\u6df1\\u5733\\u7684\\u65e9\\u6668\\u5440\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"799226037537061117\"},\"type\":\"image\",\"id\":\"799226035314079937_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10619367_685656154851110_766778884_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t50.2886-16\\/10655768_594287900680172_2084417441_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t50.2886-16\\/10648015_1491243041113750_339844084_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1409238867\",\"text\":\"\\u554a\\u9f13\\u624b\\u662f\\u6211\\u597d\\u670b\\u53cb\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"797075846717487722\"},{\"created_time\":\"1409495262\",\"text\":\"@sasanzuo \\u771f\\u597d\\uff01\\u4f60\\u6709\\u8fd9\\u6837\\u7684\\u670b\\u53cb\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"799226645367208237\"}]},\"filter\":\"Stinson\",\"created_time\":\"1409236676\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sPt4u4I7kA\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10644013_777642448965989_544517718_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10644013_777642448965989_544517718_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10644013_777642448965989_544517718_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1409236676\",\"text\":\"\\u6162\\u4e09\\u7684\\u534e\\u5c14\\u5179\\uff0c\\u5927\\u7bc7\\u5e45\\u7684\\u7235\\u58eb\\u5373\\u5174\\u3002\\u611f\\u89c9\\u751f\\u6d3b\\u5f97\\u592a\\u6d6e\\u8e81\\u3002\\u4e5f\\u592a\\u5b89\\u9038\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"797057470305646918\"},\"type\":\"video\",\"id\":\"797057469785553152_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Lo-fi\",\"created_time\":\"1408804690\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sC18G0o7qb\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/s320x320\\/e15\\/924456_1471485796442896_1699836323_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/s150x150\\/e15\\/924456_1471485796442896_1699836323_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/e15\\/924456_1471485796442896_1699836323_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1408804690\",\"text\":\"\\u597d\\u4e45\\u6ca1\\u770b\\u8bdd\\u5267\\uff0c\\u8fd9\\u90e8\\u679c\\u7136\\u6ca1\\u8ba9\\u4eba\\u5931\\u671b\\u3002\\u5bfc\\u6f14\\u592a\\u4f1a\\u8bb2\\u6545\\u4e8b\\u4e86\\uff0c1024\\u4e2a\\u8d5e\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"793433712932141876\"},\"type\":\"image\",\"id\":\"793433711329917595_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1408715905\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sAMmEWI7oC\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10607913_692632367472666_1829853902_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10607913_692632367472666_1829853902_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10607913_692632367472666_1829853902_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1408715905\",\"text\":\"\\u7eb5\\u6709\\u4e00\\u4e07\\u79cd\\u60b2\\u4f24\\u7684\\u7f8e\\u4e3d\\uff0c\\u4e5f\\u6bd4\\u4e0d\\u8fc7\\u8fd9\\u6bb5\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"792688927703284532\"},\"type\":\"image\",\"id\":\"792688926981863938_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"X-Pro II\",\"created_time\":\"1408282865\",\"link\":\"https:\\/\\/instagram.com\\/p\\/rzSow4o7lH\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10611052_1466241683635233_830264506_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10611052_1466241683635233_830264506_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10611052_1466241683635233_830264506_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1408282865\",\"text\":\"\\u5728\\u4e66\\u57ce\\u91cc\\u770b\\u5230\\u7684\\u003c\\u540e\\u4f1a\\u65e0\\u671f\\u003e\\u5206\\u955c\\u56fe\\u3002\\u7535\\u5f71\\u90a3\\u4e48\\u7f8e\\uff0c\\u5206\\u955c\\u662f\\u8fd9\\u6837\\uff0c\\u8fd9\\u5c31\\u662f\\u73b0\\u5b9e~\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"789056326245530503\"},\"type\":\"image\",\"id\":\"789056325826099527_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hudson\",\"created_time\":\"1407932800\",\"link\":\"https:\\/\\/instagram.com\\/p\\/ro28LPI7oc\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10617144_829548960388746_1611410337_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10617144_829548960388746_1611410337_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10617144_829548960388746_1611410337_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1407932800\",\"text\":\"\\u5982\\u679c\\u4f60\\u4ece\\u5317\\u4eac\\u6765\\u770b\\u6211\\uff0c\\u6211\\u4f1a\\u5f88\\u611f\\u52a8;\\u5982\\u679c\\u4f60\\u50cf\\u5149\\uff0c\\u4ece\\u592a\\u9633\\u90a3\\u5934\\u8fc7\\u6765\\uff0c\\u6211\\u4e0d\\u4ee5\\u4e3a\\u7136\\u3002\\u56e0\\u4e3a\\u5149\\u5230\\u5730\\u7403\\u53ea\\u89818.3\\u5206\\u949f\\u3002\\u6211\\u4eec\\u7ecf\\u5e38\\u9519\\u7528\\u4ee3\\u4ef7\\u6765\\u8861\\u91cf\\u60c5\\u611f\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"786119765132556496\"},\"type\":\"image\",\"id\":\"786119764721515036_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1407328697\",\"text\":\"\\u5bb6\\u91cc\\u4eba\\u5417\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"781052182645685044\"},{\"created_time\":\"1408283949\",\"text\":\"@zheng_ji \\u5bf9\\uff0c\\u6765\\u6df1\\u5733\\u73a9\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"789065414052395483\"}]},\"filter\":\"Nashville\",\"created_time\":\"1407161569\",\"link\":\"https:\\/\\/instagram.com\\/p\\/rR37wLo7iu\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10453953_542161702576881_1621059386_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10453953_542161702576881_1621059386_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10453953_542161702576881_1621059386_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1407161569\",\"text\":\"\\u76f8\\u805a\\u603b\\u6709\\u65f6:)\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"779650209673361431\"},\"type\":\"image\",\"id\":\"779650209253931182_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1406438900\",\"text\":\"\\u4eba\\u554a\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"773588027516893195\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1406343109\",\"link\":\"https:\\/\\/instagram.com\\/p\\/q5e2KpI7qn\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/925559_1482425071996009_1940959046_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/925559_1482425071996009_1940959046_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/925559_1482425071996009_1940959046_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1406343109\",\"text\":\"\\u968f\\u4fbf\\u8d70\\u8d70\\uff0c\\u53d1\\u73b0\\u4e16\\u754c\\u8fd8\\u662f\\u5f88\\u7f8e\\u597d\\u7684\\u3002\\u5f53\\u62e5\\u6709\\u7f8e\\u597d\\u4e8b\\u7269\\u65f6\\uff0c\\u7ecf\\u5e38\\u4e60\\u60ef\\u6027\\u7684\\u719f\\u89c6\\u65e0\\u7779;\\u5f53\\u52aa\\u529b\\u6293\\u4f4f\\u4f60\\u60f3\\u8981\\u7684\\u4e1c\\u897f\\u65f6\\uff0c\\u5b83\\u53c8\\u53ef\\u80fd\\u77ac\\u95f4\\u7834\\u788e\\u3002\\u4f46\\u4f9d\\u65e7\\u9700\\u8981\\u4e0d\\u59a5\\u534f\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"772784475122940015\"},\"type\":\"image\",\"id\":\"772784474745453223_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Valencia\",\"created_time\":\"1406104308\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qyXXpNI7q5\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"dingstyle\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_30683156_75sq_1333592929.jpg\",\"id\":\"30683156\",\"full_name\":\"Linjie\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10554006_501929086608023_917623457_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10554006_501929086608023_917623457_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10554006_501929086608023_917623457_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1406104308\",\"text\":\"\\u8354\\u679d\\u2014\\u2014\\u6211\\u5fc3\\u76ee\\u4e2d\\u7684\\u6c34\\u679c\\u4e4b\\u738b\\uff08\\u6709\\u4e4b\\u4e00\\uff09\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"770781266472843689\"},\"type\":\"image\",\"id\":\"770781266095356601_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Unknown\",\"created_time\":\"1406074922\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qxfUe0I7lp\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10576105_624878090953161_638111947_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10576105_624878090953161_638111947_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10576105_624878090953161_638111947_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1406074922\",\"text\":\"\\u9ad8\\u4e2d\\u65f6\\u4ee3\\u6700\\u65b0\\u6b3e\\u7684mp4\\uff0c\\u73b0\\u5df2\\u6210\\u4e86\\u8001\\u53e4\\u8463\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"770534759307917387\"},\"type\":\"image\",\"id\":\"770534758175455593_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Unknown\",\"created_time\":\"1405855985\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qq9usdo7hr\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10570119_332808380211109_125412512_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10570119_332808380211109_125412512_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10570119_332808380211109_125412512_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405855985\",\"text\":\"\\u53f0\\u98ce\\u6765\\u4e34\\u65f6\\uff0c\\u521a\\u597d\\u4f1a\\u662f\\u6691\\u5047\\u3002\\u4f46\\u6211\\u5df2\\u6ca1\\u6709\\u6691\\u5047\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"768698176489372642\"},\"type\":\"image\",\"id\":\"768698176095107179_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":23.476046667,\"longitude\":111.2695},\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1405858388\",\"text\":\"\\u697c\\u4e0b\\u597d\\u6f02\\u4eae\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"768718334289230647\"},{\"created_time\":\"1405860430\",\"text\":\"@zheng_ji \\u662f\\u54e6\\uff0c\\u5f88\\u5c0f\\u7684\\u57ce\\u5e02\\uff0c\\u7eff\\u5316\\u4ec0\\u4e48\\u7684\\u90fd\\u7a0d\\u5fae\\u4f1a\\u6bd4\\u5927\\u57ce\\u5e02\\u597d\\u70b9\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"768735469036092032\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1405752498\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qn4WCIo7hi\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/926536_828142997203682_1319760676_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/926536_828142997203682_1319760676_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/926536_828142997203682_1319760676_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405752498\",\"text\":\"\\u770b\\u7740\\u4e00\\u573a\\u96e8\\u7531\\u8fdc\\u53ca\\u8fd1\\u7684\\u6dcb\\u6e7f\\u9662\\u5b50\\uff0c\\u592a\\u6f02\\u4eae\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"767830066634930596\"},\"type\":\"image\",\"id\":\"767830066215499874_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":23.475891667,\"longitude\":111.270028333},\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Lo-fi\",\"created_time\":\"1405683338\",\"link\":\"https:\\/\\/instagram.com\\/p\\/ql0brho7vN\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/923702_252705761596555_721784545_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/923702_252705761596555_721784545_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/923702_252705761596555_721784545_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405683338\",\"text\":\"\\u5f52\\u6765\\u5374\\u7a7a\\u7a7a\\u7684\\u884c\\u56ca  \\u90a3\\u6545\\u4e61\\u7684\\u4e91  \\u90a3\\u6545\\u4e61\\u7684\\u98ce  \\u5566\\u5566\\u5566\\u5566\\u5566 \\u5566\\u5566\\u5566\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"767249912527305209\"},\"type\":\"image\",\"id\":\"767249912116263885_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hudson\",\"created_time\":\"1405640336\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qkiaYDo7t9\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10549755_708603639175850_2095584541_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10549755_708603639175850_2095584541_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10549755_708603639175850_2095584541_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405640336\",\"text\":\"\\u5728\\u4eca\\u5e74\\u7b2c\\u4e00\\u4e2a\\u72c2\\u98ce\\u5927\\u4f5c\\u7684\\u65e9\\u4e0a\\uff0c\\u56de\\u5bb6\\u53bb\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"766889183097895198\"},\"type\":\"image\",\"id\":\"766889182678465405_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Unknown\",\"created_time\":\"1405094360\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qURC9fI7r-\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/928307_1442957109299429_297849354_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/928307_1442957109299429_297849354_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/928307_1442957109299429_297849354_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405094360\",\"text\":\"98\\u5e74\\uff0c\\u4e16\\u754c\\u676f\\u7b2c\\u4e00\\u6b21\\u5728\\u6211\\u8111\\u4e2d\\u7559\\u4e0b\\u8bb0\\u5fc6\\uff0c\\u548c\\u7238\\uff0c\\u56f4\\u7740\\u90a3\\u53f0\\u5f88\\u5c0f\\u7684tcl\\u3002\\u4eca\\u5929\\uff0c\\u7238\\u8fd8\\u6253\\u7535\\u8bdd\\u7ed9\\u6211\\uff0c\\u8ba9\\u6211\\u522b\\u770b\\u592a\\u665a\\u5f71\\u54cd\\u5230\\u660e\\u5929\\u5de5\\u4f5c\\uff0c\\u4f46\\u6211\\u77e5\\u9053\\u4ed6\\u81ea\\u5df1\\u4e5f\\u4f1a\\u53bb\\u770b\\u7684\\u3002\\u662f\\u7684\\uff0c\\u6211\\u4eec\\u7231\\u8db3\\u7403\\uff0c\\u4eca\\u751f\\u4eca\\u4e16\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"762309208290081347\"},\"type\":\"image\",\"id\":\"762309207182785278_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}}]}","source":"instagram/ins1.json","raw":"{\"pagination\":{\"next_url\":\"https:\\/\\/api.instagram.com\\/v1\\/users\\/438522285\\/media\\/recent?count=100\\u0026callback=jQuery19008141340191941708_1433432491285\\u0026client_id=956dd096b6e5496aba6662165b9b8443\\u0026max_id=762309207182785278_438522285\\u0026_=1433432491286\",\"next_max_id\":\"762309207182785278_438522285\"},\"meta\":{\"code\":200},\"data\":[{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1411210501\",\"text\":\"hi~\",\"from\":{\"username\":\"hawaiiboyzshelwin\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10948635_702403553211063_1668445983_a.jpg\",\"id\":\"293705161\",\"full_name\":\"Hawaii\"},\"id\":\"813615113719495343\"}]},\"filter\":\"Mayfair\",\"created_time\":\"1411177261\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tJjQlAo7kH\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/925287_1464119273867077_427071626_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/925287_1464119273867077_427071626_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/925287_1464119273867077_427071626_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1411177261\",\"text\":\"\\u6c89\\u7720\\u7684\\u5e97\\u4e3b\\u5931\\u7720\\u7684\\u72d7\\u3002\\u60f3\\u8d77\\u5927\\u5b66\\u7684\\u6700\\u540e\\u65f6\\u5149\\uff0c\\u5bbf\\u820d24\\u5c0f\\u65f6\\u90fd\\u6709\\u4eba\\u9192\\u7740\\uff0c\\u81ea\\u7531\\u7684\\u4eba\\u751f\\uff0c\\u81ea\\u7531\\u7684\\u9152\\u548c\\u66f2\\u7ec8\\u4eba\\u6563\\uff0c\\u5927\\u5bb6\\u901a\\u5e38\\u6ca1\\u6709\\u53e6\\u4e00\\u534a\\uff0c\\u6ca1\\u6709\\u94b1\\uff0c\\u6ca1\\u6709\\u5fe7\\u6101\\uff0c\\u723d\\u6210\\u72d7\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"813336279132649576\"},\"type\":\"image\",\"id\":\"813336278595778823_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1410970444\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tDYyUeo7oX\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/925284_1534308033454310_855505111_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/925284_1534308033454310_855505111_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/925284_1534308033454310_855505111_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410970444\",\"text\":\"\\u5982\\u679c\\u4ed6\\u662f\\u7a0b\\u5e8f\\u5458\\u2026\\nvar date = lifetime;\\rif(rotate(mountain, water, stupa)){ \\/*return nextLifetime;*\\/ return meetyou(journey);\\r}\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"811601369455900672\"},\"type\":\"image\",\"id\":\"811601368935807511_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1410924584\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tCBULHo7sW\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10666267_1550871771803214_2074300649_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10666267_1550871771803214_2074300649_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10666267_1550871771803214_2074300649_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410924584\",\"text\":\"\\u542c\\u7740\\u5c71\\u5be8\\u7684\\u6c11\\u8c23\\u7535\\u5b50\\u4e50\\uff0c\\u770b\\u7740\\u7f8e\\u597d\\u7684\\u59d1\\u5a18\\u3002\\u529f\\u5fb7\\u65e0\\u91cf\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"811216667700083459\"},\"type\":\"image\",\"id\":\"811216667255487254_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1411008352\",\"text\":\"\\u6bcf\\u5929\\u90fd\\u8ba9\\u5750\\u5728\\u7535\\u8111\\u524d\\u7684\\u6211\\u76f8\\u4fe1\\u751f\\u6d3b\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"811919369774020696\"}]},\"filter\":\"Mayfair\",\"created_time\":\"1410923563\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tB_Xmao7qG\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10693244_734401199942901_1572709880_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10693244_734401199942901_1572709880_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10693244_734401199942901_1572709880_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410923563\",\"text\":\"\\u5f25\\u91cc\\u5858\\u592a\\u5b81\\u9759\\u3002\\u5728\\u8fd9\\u6211\\u4e00\\u76f4\\u60f3\\u8d77\\u6bcf\\u4e00\\u4e2a\\u88ab\\u6df1\\u5733\\u8f66\\u6c34\\u9a6c\\u9f99\\u58f0\\u5435\\u9192\\u7684\\u65e9\\u6668\\uff0c\\u771f\\u662f\\u5149\\u8f89\\u7684\\u5c81\\u6708\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"811208107217893670\"},\"type\":\"image\",\"id\":\"811208106630691462_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1410794550\",\"text\":\"\\u9ad8\\u539f\\u53cd\\u5e94\\u4e25\\u91cd\\u5417\\uff1fP.S. \\u963f\\u817e\\u4f60\\u5565\\u65f6\\u5019\\u56de\\u6765\\uff1f\",\"from\":{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},\"id\":\"810125861157321531\"},{\"created_time\":\"1410923814\",\"text\":\"@winiex \\u54c8\\u54c8\\uff0c\\u6ca1\\u4ec0\\u4e48\\u53cd\\u5e94\\u53ea\\u8981\\u6211\\u4e0d\\u4e71\\u8dd1\\u52a8\\u3002\\u5f88\\u5feb\\u56de\\u6765\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"811210206056004013\"}]},\"filter\":\"Normal\",\"created_time\":\"1410737336\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s8cKzLI7pM\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10693771_1517437541834868_665867908_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10693771_1517437541834868_665867908_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10693771_1517437541834868_665867908_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410737336\",\"text\":\"\\u8fdb\\u85cf\\u3002\\u5929\\u7a7a\\u6302\\u6ee1\\u7740\\u4e91\\uff0c\\u9ed1\\u7684\\u767d\\u7684\\u90fd\\u6709\\u3002\\u4e91\\u6735\\u8f6c\\u773c\\u98d8\\u6563\\uff0c\\u5b83\\u5374\\u4f9d\\u7136\\u662f\\u84dd\\u8272\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"809645920867301928\"},\"type\":\"image\",\"id\":\"809645920464648780_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t50.2886-16\\/10701710_281586128699201_335902712_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10701471_605249519584920_450596792_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t50.2886-16\\/10701900_770932669629703_1501695708_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Stinson\",\"created_time\":\"1410688270\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s6-lOFo7ip\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s320x320\\/e15\\/10693822_497709657032441_1125408654_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s150x150\\/e15\\/10693822_497709657032441_1125408654_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/e15\\/10693822_497709657032441_1125408654_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410688270\",\"text\":\"\\u201c\\u97f3\\u6d6a\\u592a\\u5f3a\\u4e0d\\u6643\\u4f1a\\u88ab\\u649e\\u5230\\u5730\\u4e0a\\u2026\\u201d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"809234320184293724\"},\"type\":\"video\",\"id\":\"809234319697754281_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1410625333\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s5GifkI7q7\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/10683941_796597910390683_12441123_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/10683941_796597910390683_12441123_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/10683941_796597910390683_12441123_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410625333\",\"text\":\"\\u964c\\u751f\\u7684\\u670b\\u53cb\\uff0c\\u613f\\u4e0b\\u6b21\\u518d\\u80fd\\u4e0e\\u4f60\\u4eec\\u76f8\\u805a\\u5728\\u4e3d\\u6c5flove wine \\u0026 half\\u3002\\u6211\\u65e0\\u6cd5\\u878d\\u89e3\\u4f60\\u60b2\\u89c2\\u73b0\\u5b9e\\u7684\\u60f3\\u6cd5\\uff0c\\u4f60\\u4e5f\\u65e0\\u6cd5\\u8bf4\\u670d\\u6211\\u65c5\\u884c\\u5e76\\u4e0d\\u662f\\u9003\\u907f\\u3002\\u4f46\\u8fd9\\u90fd\\u5f88\\u6709\\u610f\\u601d\\u3002\\u53ea\\u662f\\u60f3\\u8d77\\u4ee5\\u524d\\u6709\\u4e2a\\u4eba\\u53eb\\u6211\\u4e0d\\u80fd\\u559d\\u592a\\u591a\\u7684\\u9152\\uff0c\\u4e00\\u60f3\\u5230\\u8fd9\\u4e2a\\u5440\\u6211\\u5c31\\u8d8a\\u559d\\u8d8a\\u591a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"808706367646054518\"},\"type\":\"image\",\"id\":\"808706366723308219_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t50.2886-16\\/10701691_550252955102921_1153150516_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/l\\/t50.2886-16\\/10705857_251763575033861_1402444343_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10701411_275533589303527_2032117818_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1410668529\",\"text\":\"\\u54c7\\uff0cgood,\\u4f60\\u8bf7\\u5047\\u53bb\\u65c5\\u6e38\\u7684\\u5417\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"809068726839392635\"},{\"created_time\":\"1410706116\",\"text\":\"@zheng_ji \\u662f\\u5440\\uff0c\\u653e\\u677e\\u4e0b\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"809384027007203495\"}]},\"filter\":\"Normal\",\"created_time\":\"1410579121\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s3uZcmo7uj\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10661142_164227523747936_1526737465_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10661142_164227523747936_1526737465_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10661142_164227523747936_1526737465_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410579121\",\"text\":\"\\u7389\\u9f99\\u96ea\\u5c71\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"808318717479074388\"},\"type\":\"video\",\"id\":\"808318716975758243_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1410629707\",\"text\":\"\\u53bb\\u675f\\u6cb3\\u4e86\\u5417\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"808743058343704606\"},{\"created_time\":\"1410706038\",\"text\":\"@sasanzuo \\u53bb\\u4e86\\uff0c\\u4e3d\\u6c5f\\u6700\\u559c\\u6b22\\u675f\\u6cb3\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"809383369692657787\"}]},\"filter\":\"Normal\",\"created_time\":\"1410535625\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s2bb5io7p-\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s320x320\\/e15\\/10661182_550889531706942_2043749716_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s150x150\\/e15\\/10661182_550889531706942_2043749716_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/e15\\/10661182_550889531706942_2043749716_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410535625\",\"text\":\"\\u4ee5\\u524d\\u60f3\\u53bb\\u4e3d\\u6c5f\\uff0c\\u4f46\\u53bb\\u8fc7\\u7684\\u4eba\\u90fd\\u704c\\u8f93\\u7740\\u4f60\\u4e5f\\u8bb8\\u4f1a\\u5931\\u671b\\u7684\\u89c2\\u5ff5\\uff0c\\u56e0\\u800c\\u751a\\u81f3\\u4e0d\\u6562\\u52a8\\u8eab\\u3002\\u8fd9\\u662f\\u4e00\\u79cd\\u201c\\u6015\\u201d\\u3002\\u6709\\u65f6\\u5019\\u771f\\u5f97\\u81ea\\u5df1\\u53bb\\u770b\\u770b\\u624d\\u4f1a\\u4e86\\u7136\\u3002\\u7b2c\\u4e00\\u5929\\u5728\\u4e3d\\u6c5f\\uff0c\\u6c11\\u8c23\\u5409\\u4ed6\\u7f13\\u7f13\\u6d41\\u8fc7\\u5546\\u4e1a\\u5316\\u7684\\u8857\\u9053\\uff0c\\u539f\\u6765\\u6ca1\\u6709\\u60ca\\u559c\\uff0c\\u4e5f\\u6ca1\\u6709\\u5931\\u671b\\uff0c\\u4e00\\u5207\\u521a\\u521a\\u597d\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807953848229673047\"},\"type\":\"image\",\"id\":\"807953847625693822_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10687579_864566316888364_601110692_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10705731_491458530957700_895623007_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t50.2886-16\\/10701554_631893030261190_220785276_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Maven\",\"created_time\":\"1410529596\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s2P72tI7o6\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10520334_1523531751215211_1344090061_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10520334_1523531751215211_1344090061_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10520334_1523531751215211_1344090061_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410529596\",\"text\":\"\\u6211\\u6ce8\\u5b9a\\u8981\\u56de\\u5230\\u8001\\u8def\\u4e0a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807903268480203532\"},\"type\":\"video\",\"id\":\"807903267045751354_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":5,\"data\":[{\"created_time\":\"1410529334\",\"text\":\"\\u7ec8\\u4e8e\\u53d1\\u73b0\\u4e86\\u963f\\u817e\\u7684 Instagram:)\",\"from\":{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},\"id\":\"807901070295808629\"},{\"created_time\":\"1410534900\",\"text\":\"@winiex \\u54c8\\u54c8\\uff0c\\u8bf4\\u5b9e\\u8bdd\\u2026\\u5fae\\u535a\\u548c\\u5fae\\u4fe1\\u52a0\\u4e86\\u5f88\\u591a\\u540c\\u4e8b\\uff0c\\u603b\\u611f\\u89c9\\u4e0d\\u81ea\\u5728\\uff0c\\u5c31\\u7528ins\\u6bd4\\u8f83\\u591a\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807947760767842994\"},{\"created_time\":\"1410537411\",\"text\":\"@litten225 \\u662f\\u8bf4\\u524d\\u6bb5\\u65f6\\u95f4\\u5ffd\\u7136\\u60f3\\u8d77\\u6765\\u4e0a\\u8001\\u6ca1\\u770b\\u5230\\u4f60\\u52a8\\u9759\\u5462;)\\u3002\\u53ef\\u80fd\\u516c\\u53f8\\u5927\\u4e86\\uff0c\\u670b\\u53cb\\u90fd\\u5982\\u725b\\u6392\\uff0c\\u4e03\\u5206\\u719f\\u6700\\u4f73:)\\u3002\",\"from\":{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},\"id\":\"807968828790388817\"},{\"created_time\":\"1410537434\",\"text\":\"\\u5fae\\u535a\\u4e0a\\uff0ctypo \\u5566\",\"from\":{\"username\":\"winiex\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_45182020_75sq_1380706182.jpg\",\"id\":\"45182020\",\"full_name\":\"winiex nie\"},\"id\":\"807969017861224538\"},{\"created_time\":\"1410571556\",\"text\":\"@winiex \\u662f\\u554a\\uff0c\\u8ddf\\u540c\\u5b66\\u53ef\\u4ee5\\u4e00\\u8d77\\u5410\\u69fd\\u8001\\u5e08\\u548c\\u6559\\u5b66\\uff0c\\u771f\\u5b9e\\u7684\\u60f3\\u6cd5\\u65e0\\u9700\\u987e\\u8651\\u3002\\u4f46\\u662f\\u8ddf\\u540c\\u4e8b\\u4e00\\u8d77\\u5410\\u69fd\\u8001\\u5927\\u548c\\u5de5\\u4f5c\\uff0c\\u53c8\\u662f\\u53e6\\u5916\\u4e00\\u56de\\u4e8b\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"808255256711641620\"}]},\"filter\":\"Normal\",\"created_time\":\"1410523991\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s2FPpGI7o_\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s320x320\\/e15\\/10693390_547748238660649_761529890_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s150x150\\/e15\\/10693390_547748238660649_761529890_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/e15\\/10693390_547748238660649_761529890_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410523991\",\"text\":\"\\u5f69\\u4e91\\u4e4b\\u5357\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807856248839190621\"},\"type\":\"image\",\"id\":\"807856248310708799_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1410493579\",\"link\":\"https:\\/\\/instagram.com\\/p\\/s1LPQPo7v8\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"wallbase.hd\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10617029_283951291805046_1229690122_a.jpg\",\"id\":\"1489501811\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10693650_837768039589771_1793184733_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10693650_837768039589771_1793184733_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10693650_837768039589771_1793184733_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410493579\",\"text\":\"\\u4e91\\u5357\\uff0c\\u5411\\u5f80\\u5df2\\u4e45\\u7684\\u5730\\u65b9\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807601135591602253\"},\"type\":\"image\",\"id\":\"807601134928903164_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Lo-fi\",\"created_time\":\"1410433815\",\"link\":\"https:\\/\\/instagram.com\\/p\\/szZP5Io7lY\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"wallbase.hd\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10617029_283951291805046_1229690122_a.jpg\",\"id\":\"1489501811\",\"full_name\":\"\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xft1\\/t51.2885-15\\/s320x320\\/e15\\/914812_1529561143923493_1662159287_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xft1\\/t51.2885-15\\/s150x150\\/e15\\/914812_1529561143923493_1662159287_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xft1\\/t51.2885-15\\/e15\\/914812_1529561143923493_1662159287_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410433815\",\"text\":\"QQ\\u540c\\u65f6\\u5728\\u7ebf\\u4eba\\u6570\\u78342\\u4ebf\\u7eaa\\u5ff5\\uff0c\\u4f5c\\u4e3a\\u4e00\\u9897\\u5c0f\\u5c0f\\u87ba\\u4e1d\\u9489\\uff0c\\u540d\\u5b57\\u6b63\\u597d\\u9576\\u5230\\u4f01\\u9e45\\u7684\\u5927\\u5634\\u5df4\\u4e0a\\u3002\\u8fd9\\u65f6\\u89c9\\u5f97\\u6709\\u4e00\\u4e1d\\u5149\\u8363\\uff0c\\u4e00\\u79cd\\u52aa\\u529b\\u88ab\\u5b9e\\u5316\\u7684\\u9519\\u89c9\\uff1b\\u7136\\u540e\\u53c8\\u6709\\u70b9\\u4e0d\\u8212\\u670d\\uff0c\\u611f\\u89c9\\u6b64\\u65f6\\u7684\\u81ea\\u5df1\\uff0c\\u548c\\u540d\\u5b57\\u8eab\\u8fb9\\u7684\\u4eba\\u4e00\\u6837\\u3002\\u53ef\\u6211\\u60f3\\u8981\\u7684\\u5c31\\u662f\\u4e0d\\u4e00\\u6837\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"807099801993984938\"},\"type\":\"image\",\"id\":\"807099801532610904_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1410373253\",\"text\":\"\\u4e00\\u8d77\\u73a9INS\\ue328\\ue328@gggiselle3333\",\"from\":{\"username\":\"yokiaee\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/10598222_301874203326431_1095562300_a.jpg\",\"id\":\"1450755432\",\"full_name\":\"\\u7cd6\\u5b9d\"},\"id\":\"806591765504309560\"}]},\"filter\":\"Sierra\",\"created_time\":\"1410184482\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sr9rtNo7lM\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},{\"username\":\"fiona2523\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11350911_404317656438368_954826284_a.jpg\",\"id\":\"465984487\",\"full_name\":\"\\ud83c\\udf38Fiona\\ud83c\\udf38\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10644019_368509079979549_2085033896_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10644019_368509079979549_2085033896_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10644019_368509079979549_2085033896_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410184482\",\"text\":\"\\u966a\\u4f34\\u4e00\\u5b9a\\u5f97\\u662f\\u4ef6\\u6f2b\\u957f\\u7684\\u4e8b\\u5475\\u3002\\u548c\\u5976\\u5976\\u5728\\u4e00\\u8d77\\u7684\\u4e2d\\u79cb\\u8282\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"805008243199032014\"},\"type\":\"image\",\"id\":\"805008242737658188_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t50.2886-16\\/10687823_350153388474464_1223789041_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t50.2886-16\\/10701732_344063979085756_1879637417_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10688739_629114507205181_1066132726_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Maven\",\"created_time\":\"1410183340\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sr7gXKI7h_\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10684161_918887498139099_2081383304_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10684161_918887498139099_2081383304_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10684161_918887498139099_2081383304_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410183340\",\"text\":\"\\u4e2d\\u79cb\\u548c\\u5bb6\\u4eba\\u4e00\\u8d77\\u53bb\\u770b\\u5b54\\u660e\\u706f\\uff0c\\u70ed\\u95f9\\u800c\\u5b89\\u9038\\uff0c\\u8fd9\\u662f\\u5c0f\\u57ce\\u5e02\\u7684\\u7f8e\\u597d\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"804998667946932332\"},\"type\":\"video\",\"id\":\"804998667049351295_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1410239540\",\"text\":\"\\u8bf4\\u7684\\u6211\\u4e5f\\u52a8\\u5bb9\\u4e86\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"805470101433465439\"},{\"created_time\":\"1410359659\",\"text\":\"@zheng_ji \\u4e00\\u5207\\u597d\\u795e\\u5947\\uff0c\\u5c31\\u662f\\u8d70\\u5230\\u90a3\\uff0c\\u53d1\\u73b0\\u5979\\u8fd8\\u5728\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"806477733090801988\"}]},\"filter\":\"Unknown\",\"created_time\":\"1410155775\",\"link\":\"https:\\/\\/instagram.com\\/p\\/srG7fjo7sV\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s320x320\\/e15\\/10683828_327931784041264_894089329_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s150x150\\/e15\\/10683828_327931784041264_894089329_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/e15\\/10683828_327931784041264_894089329_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410155775\",\"text\":\"\\u8001\\u5bb6\\u7684\\u8461\\u8404\\u85e4\\uff0c\\u4ece\\u6211\\u521d\\u4e2d\\u65f6\\u5c31\\u6302\\u5728\\u8fd9\\uff0c\\u518d\\u89c1\\u5df2\\u662f\\u5341\\u4e00\\u5e74\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"804767435447318654\"},\"type\":\"image\",\"id\":\"804767435027888917_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1410085359\",\"link\":\"https:\\/\\/instagram.com\\/p\\/spAnrio7oh\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s320x320\\/e15\\/10666028_872988212713750_1345360858_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s150x150\\/e15\\/10666028_872988212713750_1345360858_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/e15\\/10666028_872988212713750_1345360858_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1410085359\",\"text\":\"\\u5bb6\\u91cc\\u6a44\\u6984\\u719f\\u4e86\\uff0c\\u76d0\\u6e0d\\uff0c\\u66b4\\u6652\\uff0c\\u8638\\u871c\\uff0c\\u7b80\\u76f4\\u4eba\\u95f4\\u7f8e\\u5473!\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"804176735760529648\"},\"type\":\"image\",\"id\":\"804176735273990689_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1409914668\",\"text\":\"\\u4e2d\\u79cb\\u795d\\u597d\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"802744876627376939\"},{\"created_time\":\"1410085406\",\"text\":\"@zheng_ji \\u4e2d\\u79cb\\u8282\\u5feb\\u4e50\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"804177137474189571\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1409913076\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sj4BGgI7t_\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10665501_1452353738387652_2075798065_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10665501_1452353738387652_2075798065_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10665501_1452353738387652_2075798065_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1409913076\",\"text\":\"\\u5728\\u4e00\\u573a\\u592a\\u9633\\u96e8\\u91cc\\u56de\\u5230\\u5bb6\\u4e2d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"802731525369215150\"},\"type\":\"image\",\"id\":\"802731524907842431_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":5,\"data\":[{\"created_time\":\"1409495738\",\"text\":\"\\u5929\\u5929\\u5728\\u88ab\\u670d\\u52a1\\u5668\\u8650\\u6ca1\\u4e2a\\u4eba\\u65f6\\u95f4\\u4e86\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"799230636918553169\"},{\"created_time\":\"1409537231\",\"text\":\"\\u4f60\\u53bb\\u542c\\u542c\\u91ce\\u5b69\\u5b50\\uff0c\\u5f20\\u73ae\\u73ae\\u90ed\\u9f99\\u7684\\u767d\\u94f6\\u996d\\u5e97\\u548c\\u6211\\u7b49\\u7740\\u4f60\\u56de\\u6765\\uff0c\\u770b\\u770b\\u662f\\u5426\\u559c\\u6b22\\u8fd9\\u79cd\\u98ce\\u683c\\u3002\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"799578708500527379\"},{\"created_time\":\"1409913295\",\"text\":\"@sasanzuo \\u6211\\u542c\\u6c11\\u8c23\\u6bd4\\u8f83\\u591a\\uff0c\\u674e\\u5fd7\\u5f20\\u73ae\\u73ae\\u4e00\\u76f4\\u5f88\\u559c\\u6b22\\u5450\\uff0c\\u91ce\\u5b69\\u5b50\\u5c31\\u542c\\u5f97\\u5f88\\u5c11\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"802733361660672253\"},{\"created_time\":\"1409913403\",\"text\":\"@zheng_ji \\u8fd9\\u4e48\\u60e8\\uff1f\\u8d76\\u7d27\\u9a6f\\u670d\\u5b83\\uff01\\u4e00\\u5207\\u78e8\\u4eba\\u7684\\u670d\\u52a1\\u5668\\u90fd\\u662f\\u7eb8\\u8001\\u864e\\uff01\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"802734270063032609\"},{\"created_time\":\"1409917831\",\"text\":\"@litten225 \\u554a\\u90a3\\u6709\\u8bdd\\u804a\\uff0c\\u4ed6\\u4eec\\u90fd\\u662f\\u6211\\u5f88\\u597d\\u7684\\u670b\\u53cb\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"802771409702206463\"}]},\"filter\":\"Unknown\",\"created_time\":\"1409495189\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sXa9g6I7jB\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s320x320\\/e15\\/10654876_610857929023752_364709543_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s150x150\\/e15\\/10654876_610857929023752_364709543_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/e15\\/10654876_610857929023752_364709543_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1409495189\",\"text\":\"\\u5728\\u4e66\\u5e97\\u7684\\u665a\\u4e0a\\u7ec8\\u4e8e\\u628a\\u65b0\\u4e13\\u53cd\\u590d\\u542c\\u5b8c\\u3002\\u592a\\u67d4\\u4e86\\u2026\\u6253\\u4e00\\u661f\\u4e24\\u661f\\u7684\\u4eba\\u80af\\u5b9a\\u662f\\u771f\\u7231\\u7c89\\uff0c\\u8fd9\\u70b9\\u6709\\u4eba\\u6562\\u6000\\u7591\\uff1f\\u6211\\u4e0d\\u662f\\uff0c\\u6253\\u56db\\u661f\\uff01\\u505c\\u4e0d\\u4e0b\\u6765\\uff0c\\u76f4\\u5230\\u4e66\\u5e97\\u54cd\\u8d77:\\u6df1\\u5733\\u5373\\u5c06\\u5165\\u7720\\u3002\\u4f4622\\u70b9\\u8fd8\\u662f\\u6df1\\u5733\\u7684\\u65e9\\u6668\\u5440\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"799226037537061117\"},\"type\":\"image\",\"id\":\"799226035314079937_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t50.2886-16\\/10619367_685656154851110_766778884_a.mp4\",\"width\":480,\"height\":480},\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t50.2886-16\\/10655768_594287900680172_2084417441_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t50.2886-16\\/10648015_1491243041113750_339844084_n.mp4\",\"width\":640,\"height\":640}},\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1409238867\",\"text\":\"\\u554a\\u9f13\\u624b\\u662f\\u6211\\u597d\\u670b\\u53cb\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"797075846717487722\"},{\"created_time\":\"1409495262\",\"text\":\"@sasanzuo \\u771f\\u597d\\uff01\\u4f60\\u6709\\u8fd9\\u6837\\u7684\\u670b\\u53cb\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"799226645367208237\"}]},\"filter\":\"Stinson\",\"created_time\":\"1409236676\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sPt4u4I7kA\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10644013_777642448965989_544517718_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10644013_777642448965989_544517718_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10644013_777642448965989_544517718_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1409236676\",\"text\":\"\\u6162\\u4e09\\u7684\\u534e\\u5c14\\u5179\\uff0c\\u5927\\u7bc7\\u5e45\\u7684\\u7235\\u58eb\\u5373\\u5174\\u3002\\u611f\\u89c9\\u751f\\u6d3b\\u5f97\\u592a\\u6d6e\\u8e81\\u3002\\u4e5f\\u592a\\u5b89\\u9038\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"797057470305646918\"},\"type\":\"video\",\"id\":\"797057469785553152_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Lo-fi\",\"created_time\":\"1408804690\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sC18G0o7qb\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/s320x320\\/e15\\/924456_1471485796442896_1699836323_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/s150x150\\/e15\\/924456_1471485796442896_1699836323_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/e15\\/924456_1471485796442896_1699836323_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1408804690\",\"text\":\"\\u597d\\u4e45\\u6ca1\\u770b\\u8bdd\\u5267\\uff0c\\u8fd9\\u90e8\\u679c\\u7136\\u6ca1\\u8ba9\\u4eba\\u5931\\u671b\\u3002\\u5bfc\\u6f14\\u592a\\u4f1a\\u8bb2\\u6545\\u4e8b\\u4e86\\uff0c1024\\u4e2a\\u8d5e\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"793433712932141876\"},\"type\":\"image\",\"id\":\"793433711329917595_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1408715905\",\"link\":\"https:\\/\\/instagram.com\\/p\\/sAMmEWI7oC\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10607913_692632367472666_1829853902_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10607913_692632367472666_1829853902_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10607913_692632367472666_1829853902_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1408715905\",\"text\":\"\\u7eb5\\u6709\\u4e00\\u4e07\\u79cd\\u60b2\\u4f24\\u7684\\u7f8e\\u4e3d\\uff0c\\u4e5f\\u6bd4\\u4e0d\\u8fc7\\u8fd9\\u6bb5\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"792688927703284532\"},\"type\":\"image\",\"id\":\"792688926981863938_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"X-Pro II\",\"created_time\":\"1408282865\",\"link\":\"https:\\/\\/instagram.com\\/p\\/rzSow4o7lH\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10611052_1466241683635233_830264506_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10611052_1466241683635233_830264506_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10611052_1466241683635233_830264506_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1408282865\",\"text\":\"\\u5728\\u4e66\\u57ce\\u91cc\\u770b\\u5230\\u7684\\u003c\\u540e\\u4f1a\\u65e0\\u671f\\u003e\\u5206\\u955c\\u56fe\\u3002\\u7535\\u5f71\\u90a3\\u4e48\\u7f8e\\uff0c\\u5206\\u955c\\u662f\\u8fd9\\u6837\\uff0c\\u8fd9\\u5c31\\u662f\\u73b0\\u5b9e~\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"789056326245530503\"},\"type\":\"image\",\"id\":\"789056325826099527_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hudson\",\"created_time\":\"1407932800\",\"link\":\"https:\\/\\/instagram.com\\/p\\/ro28LPI7oc\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10617144_829548960388746_1611410337_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10617144_829548960388746_1611410337_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10617144_829548960388746_1611410337_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1407932800\",\"text\":\"\\u5982\\u679c\\u4f60\\u4ece\\u5317\\u4eac\\u6765\\u770b\\u6211\\uff0c\\u6211\\u4f1a\\u5f88\\u611f\\u52a8;\\u5982\\u679c\\u4f60\\u50cf\\u5149\\uff0c\\u4ece\\u592a\\u9633\\u90a3\\u5934\\u8fc7\\u6765\\uff0c\\u6211\\u4e0d\\u4ee5\\u4e3a\\u7136\\u3002\\u56e0\\u4e3a\\u5149\\u5230\\u5730\\u7403\\u53ea\\u89818.3\\u5206\\u949f\\u3002\\u6211\\u4eec\\u7ecf\\u5e38\\u9519\\u7528\\u4ee3\\u4ef7\\u6765\\u8861\\u91cf\\u60c5\\u611f\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"786119765132556496\"},\"type\":\"image\",\"id\":\"786119764721515036_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1407328697\",\"text\":\"\\u5bb6\\u91cc\\u4eba\\u5417\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"781052182645685044\"},{\"created_time\":\"1408283949\",\"text\":\"@zheng_ji \\u5bf9\\uff0c\\u6765\\u6df1\\u5733\\u73a9\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"789065414052395483\"}]},\"filter\":\"Nashville\",\"created_time\":\"1407161569\",\"link\":\"https:\\/\\/instagram.com\\/p\\/rR37wLo7iu\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10453953_542161702576881_1621059386_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10453953_542161702576881_1621059386_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10453953_542161702576881_1621059386_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1407161569\",\"text\":\"\\u76f8\\u805a\\u603b\\u6709\\u65f6:)\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"779650209673361431\"},\"type\":\"image\",\"id\":\"779650209253931182_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1406438900\",\"text\":\"\\u4eba\\u554a\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"773588027516893195\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1406343109\",\"link\":\"https:\\/\\/instagram.com\\/p\\/q5e2KpI7qn\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/925559_1482425071996009_1940959046_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/925559_1482425071996009_1940959046_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/925559_1482425071996009_1940959046_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1406343109\",\"text\":\"\\u968f\\u4fbf\\u8d70\\u8d70\\uff0c\\u53d1\\u73b0\\u4e16\\u754c\\u8fd8\\u662f\\u5f88\\u7f8e\\u597d\\u7684\\u3002\\u5f53\\u62e5\\u6709\\u7f8e\\u597d\\u4e8b\\u7269\\u65f6\\uff0c\\u7ecf\\u5e38\\u4e60\\u60ef\\u6027\\u7684\\u719f\\u89c6\\u65e0\\u7779;\\u5f53\\u52aa\\u529b\\u6293\\u4f4f\\u4f60\\u60f3\\u8981\\u7684\\u4e1c\\u897f\\u65f6\\uff0c\\u5b83\\u53c8\\u53ef\\u80fd\\u77ac\\u95f4\\u7834\\u788e\\u3002\\u4f46\\u4f9d\\u65e7\\u9700\\u8981\\u4e0d\\u59a5\\u534f\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"772784475122940015\"},\"type\":\"image\",\"id\":\"772784474745453223_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Valencia\",\"created_time\":\"1406104308\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qyXXpNI7q5\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"dingstyle\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_30683156_75sq_1333592929.jpg\",\"id\":\"30683156\",\"full_name\":\"Linjie\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10554006_501929086608023_917623457_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10554006_501929086608023_917623457_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10554006_501929086608023_917623457_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1406104308\",\"text\":\"\\u8354\\u679d\\u2014\\u2014\\u6211\\u5fc3\\u76ee\\u4e2d\\u7684\\u6c34\\u679c\\u4e4b\\u738b\\uff08\\u6709\\u4e4b\\u4e00\\uff09\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"770781266472843689\"},\"type\":\"image\",\"id\":\"770781266095356601_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Unknown\",\"created_time\":\"1406074922\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qxfUe0I7lp\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10576105_624878090953161_638111947_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10576105_624878090953161_638111947_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10576105_624878090953161_638111947_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1406074922\",\"text\":\"\\u9ad8\\u4e2d\\u65f6\\u4ee3\\u6700\\u65b0\\u6b3e\\u7684mp4\\uff0c\\u73b0\\u5df2\\u6210\\u4e86\\u8001\\u53e4\\u8463\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"770534759307917387\"},\"type\":\"image\",\"id\":\"770534758175455593_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Unknown\",\"created_time\":\"1405855985\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qq9usdo7hr\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10570119_332808380211109_125412512_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10570119_332808380211109_125412512_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10570119_332808380211109_125412512_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405855985\",\"text\":\"\\u53f0\\u98ce\\u6765\\u4e34\\u65f6\\uff0c\\u521a\\u597d\\u4f1a\\u662f\\u6691\\u5047\\u3002\\u4f46\\u6211\\u5df2\\u6ca1\\u6709\\u6691\\u5047\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"768698176489372642\"},\"type\":\"image\",\"id\":\"768698176095107179_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":23.476046667,\"longitude\":111.2695},\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1405858388\",\"text\":\"\\u697c\\u4e0b\\u597d\\u6f02\\u4eae\",\"from\":{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"},\"id\":\"768718334289230647\"},{\"created_time\":\"1405860430\",\"text\":\"@zheng_ji \\u662f\\u54e6\\uff0c\\u5f88\\u5c0f\\u7684\\u57ce\\u5e02\\uff0c\\u7eff\\u5316\\u4ec0\\u4e48\\u7684\\u90fd\\u7a0d\\u5fae\\u4f1a\\u6bd4\\u5927\\u57ce\\u5e02\\u597d\\u70b9\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"768735469036092032\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1405752498\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qn4WCIo7hi\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/926536_828142997203682_1319760676_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/926536_828142997203682_1319760676_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/926536_828142997203682_1319760676_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405752498\",\"text\":\"\\u770b\\u7740\\u4e00\\u573a\\u96e8\\u7531\\u8fdc\\u53ca\\u8fd1\\u7684\\u6dcb\\u6e7f\\u9662\\u5b50\\uff0c\\u592a\\u6f02\\u4eae\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"767830066634930596\"},\"type\":\"image\",\"id\":\"767830066215499874_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":23.475891667,\"longitude\":111.270028333},\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Lo-fi\",\"created_time\":\"1405683338\",\"link\":\"https:\\/\\/instagram.com\\/p\\/ql0brho7vN\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/923702_252705761596555_721784545_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/923702_252705761596555_721784545_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/923702_252705761596555_721784545_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405683338\",\"text\":\"\\u5f52\\u6765\\u5374\\u7a7a\\u7a7a\\u7684\\u884c\\u56ca  \\u90a3\\u6545\\u4e61\\u7684\\u4e91  \\u90a3\\u6545\\u4e61\\u7684\\u98ce  \\u5566\\u5566\\u5566\\u5566\\u5566 \\u5566\\u5566\\u5566\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"767249912527305209\"},\"type\":\"image\",\"id\":\"767249912116263885_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hudson\",\"created_time\":\"1405640336\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qkiaYDo7t9\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10549755_708603639175850_2095584541_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10549755_708603639175850_2095584541_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10549755_708603639175850_2095584541_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405640336\",\"text\":\"\\u5728\\u4eca\\u5e74\\u7b2c\\u4e00\\u4e2a\\u72c2\\u98ce\\u5927\\u4f5c\\u7684\\u65e9\\u4e0a\\uff0c\\u56de\\u5bb6\\u53bb\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"766889183097895198\"},\"type\":\"image\",\"id\":\"766889182678465405_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Unknown\",\"created_time\":\"1405094360\",\"link\":\"https:\\/\\/instagram.com\\/p\\/qURC9fI7r-\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zheng_ji\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/anonymousUser.jpg\",\"id\":\"1176976812\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/928307_1442957109299429_297849354_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/928307_1442957109299429_297849354_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/928307_1442957109299429_297849354_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1405094360\",\"text\":\"98\\u5e74\\uff0c\\u4e16\\u754c\\u676f\\u7b2c\\u4e00\\u6b21\\u5728\\u6211\\u8111\\u4e2d\\u7559\\u4e0b\\u8bb0\\u5fc6\\uff0c\\u548c\\u7238\\uff0c\\u56f4\\u7740\\u90a3\\u53f0\\u5f88\\u5c0f\\u7684tcl\\u3002\\u4eca\\u5929\\uff0c\\u7238\\u8fd8\\u6253\\u7535\\u8bdd\\u7ed9\\u6211\\uff0c\\u8ba9\\u6211\\u522b\\u770b\\u592a\\u665a\\u5f71\\u54cd\\u5230\\u660e\\u5929\\u5de5\\u4f5c\\uff0c\\u4f46\\u6211\\u77e5\\u9053\\u4ed6\\u81ea\\u5df1\\u4e5f\\u4f1a\\u53bb\\u770b\\u7684\\u3002\\u662f\\u7684\\uff0c\\u6211\\u4eec\\u7231\\u8db3\\u7403\\uff0c\\u4eca\\u751f\\u4eca\\u4e16\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"762309208290081347\"},\"type\":\"image\",\"id\":\"762309207182785278_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}}]}","date":"2015-11-19T07:50:44.549Z","updated":"2015-11-19T07:50:44.549Z","path":"instagram/ins1.json","layout":"false","title":"","comments":1,"_id":"cih8q8rmq0005r8ujg9hi4ifj"},{"_content":"{\"pagination\":{\"next_url\":\"https:\\/\\/api.instagram.com\\/v1\\/users\\/438522285\\/media\\/recent?count=100\\u0026callback=jQuery19008141340191941708_1433432491285\\u0026client_id=956dd096b6e5496aba6662165b9b8443\\u0026max_id=817324725551479434_438522285\\u0026_=1433432491286\",\"next_max_id\":\"817324725551479434_438522285\"},\"meta\":{\"code\":200},\"data\":[{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Lark\",\"created_time\":\"1433424772\",\"link\":\"https:\\/\\/instagram.com\\/p\\/3glBKbI7jm\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/11375982_491190547696110_2013240096_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/11375982_491190547696110_2013240096_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/11375982_491190547696110_2013240096_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1433424772\",\"text\":\"\\u5c0f\\u841d\\u8389\\u4e0d\\u613f\\u56de\\u5bb6\\uff0c\\u8ddf\\u5976\\u5976\\u8bf4\\uff1a\\u201c\\u518d\\u8ba9\\u6211\\u73a9\\u4f1a\\uff0c\\u660e\\u5929\\u8981\\u5b66\\u94a2\\u7434\\uff0c\\u540e\\u5929\\u8981\\u5b66\\u8df3\\u821e\\uff0c\\u5c31\\u6765\\u4e0d\\u4e86\\u8fd9\\u513f\\u73a9\\u4e86\\u3002\\u201d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"999961926134119385\"},\"type\":\"image\",\"id\":\"999961924909381862_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":5,\"data\":[{\"created_time\":\"1432100935\",\"text\":\"\\ud83d\\ude0a\",\"from\":{\"username\":\"muvanmf\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/11334455_1615248035385837_1443100648_a.jpg\",\"id\":\"1200885749\",\"full_name\":\"\"},\"id\":\"988856776283895820\"},{\"created_time\":\"1432500874\",\"text\":\"\\ud83d\\ude0a\",\"from\":{\"username\":\"y_lang99\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11373510_386713434848322_1596956169_a.jpg\",\"id\":\"1509502800\",\"full_name\":\"\\u2728\\u5c0f\\u963f\\u6d6a\\uff5e\"},\"id\":\"992211705421609081\"},{\"created_time\":\"1432886603\",\"text\":\"\\ud83d\\udc4d\",\"from\":{\"username\":\"cp_water_h2o\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/11191155_897877480271222_1196332450_a.jpg\",\"id\":\"46708139\",\"full_name\":\"\"},\"id\":\"995447436348733496\"},{\"created_time\":\"1433035543\",\"text\":\"\\ud83d\\ude04\",\"from\":{\"username\":\"vocalmomoko\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/10601848_849046995107581_1799487354_a.jpg\",\"id\":\"280464724\",\"full_name\":\"Momoko\"},\"id\":\"996696839524956493\"},{\"created_time\":\"1433035564\",\"text\":\"nice  @Ijustinchen\",\"from\":{\"username\":\"dikenxoen\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/925345_933363483364074_1000071537_a.jpg\",\"id\":\"1649582238\",\"full_name\":\"\"},\"id\":\"996697009528486242\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1432095934\",\"link\":\"https:\\/\\/instagram.com\\/p\\/24-dd6o7uB\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"oliviayhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11326269_1439141373071498_1054025241_a.jpg\",\"id\":\"10631089\",\"full_name\":\"Olivia Yang\"},{\"username\":\"zx_9451\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11327937_953513731373032_1587298722_a.jpg\",\"id\":\"1147297522\",\"full_name\":\"\\u8d24\\u59b9\\u59b9ZX\"},{\"username\":\"irissssw\",\"profile_picture\":\"https:\\/\\/igcdn-photos-d-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/11005023_732965413468795_1308833307_a.jpg\",\"id\":\"231558542\",\"full_name\":\"Iris.W\"},{\"username\":\"juxiequechuicai\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10932562_1408525596106461_81586164_a.jpg\",\"id\":\"1649588862\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/11252751_1444216632541093_1558227860_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/11252751_1444216632541093_1558227860_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/11252751_1444216632541093_1558227860_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1432095934\",\"text\":\"\\u98ce\\u96e8\\u6b32\\u6765\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"988814823345338742\"},\"type\":\"image\",\"id\":\"988814822078659457_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t50.2886-16\\/11234567_805492662880042_967794598_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t50.2886-16\\/11235514_1629635357248662_1505532808_n.mp4\",\"width\":640,\"height\":640},\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t50.2886-16\\/11234567_805492662880042_967794598_s.mp4\",\"width\":480,\"height\":480}},\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Ashby\",\"created_time\":\"1431736282\",\"link\":\"https:\\/\\/instagram.com\\/p\\/2uQeuaI7nv\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"ashleyfashionblogger\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/11190869_428988550612824_1565351360_a.jpg\",\"id\":\"1172999152\",\"full_name\":\"Ashley\\u7cbe\\u5c16\\u5962\\u54c1\"},{\"username\":\"jijileexi\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10914307_1531769583766522_1188586237_a.jpg\",\"id\":\"1668534092\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/11226595_701075516681953_1354085958_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/11226595_701075516681953_1354085958_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/11226595_701075516681953_1354085958_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1431736282\",\"text\":\"\\u91ce\\u751f\\u6d77\\u5e26\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"985797850168539756\"},\"type\":\"video\",\"id\":\"985797848599869935_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t50.2886-16\\/11100588_1627658390782524_1406603363_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t50.2886-16\\/11123341_1574707489481834_1444136079_n.mp4\",\"width\":640,\"height\":640},\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t50.2886-16\\/11100588_1627658390782524_1406603363_s.mp4\",\"width\":480,\"height\":480}},\"tags\":[],\"location\":null,\"comments\":{\"count\":3,\"data\":[{\"created_time\":\"1428633555\",\"text\":\"@nanako0606 :)\",\"from\":{\"username\":\"lvhombeme\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/11190759_712908695501663_547363914_a.jpg\",\"id\":\"30244942\",\"full_name\":\"\"},\"id\":\"959770281262693297\"},{\"created_time\":\"1428952602\",\"text\":\"\\ud83d\\udc98\\ud83d\\udc98 @MIKATTONG\",\"from\":{\"username\":\"kaogai\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10431811_753900654665570_1046066069_a.jpg\",\"id\":\"1588508371\",\"full_name\":\"\"},\"id\":\"962446649029016324\"},{\"created_time\":\"1430583831\",\"text\":\"\\ud83d\\ude0a\",\"from\":{\"username\":\"geyaoxian\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/11203210_832251100188962_1484152822_a.jpg\",\"id\":\"1026707646\",\"full_name\":\"\\u845b\\u8000\\u5148\"},\"id\":\"976130389424978098\"}]},\"filter\":\"Clarendon\",\"created_time\":\"1428315781\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1IUZByo7vP\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"barb1e2u\",\"profile_picture\":\"https:\\/\\/igcdn-photos-d-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/11184633_436852723162235_673116011_a.jpg\",\"id\":\"1543932897\",\"full_name\":\"Barbie\\ud83d\\udc8bWeChat:88315113\\ud83d\\udcf2\"},{\"username\":\"huanglh3o3\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xtf1\\/t51.2885-19\\/11098542_1557115881228953_2108051141_a.jpg\",\"id\":\"1244702090\",\"full_name\":\"\"},{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"lixxin1\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/10724134_1498809703714993_666658303_a.jpg\",\"id\":\"474735109\",\"full_name\":\"\\u674e\\u7d2b\\u6b23\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/s320x320\\/e15\\/11142212_609961145801361_1913577076_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/s150x150\\/e15\\/11142212_609961145801361_1913577076_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/e15\\/11142212_609961145801361_1913577076_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428315781\",\"text\":\"\\u8981\\u56de\\u53bb\\u5566\\uff0c\\u518d\\u89c1\\u5317\\u6d41\\u6cb3\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"957104601967082317\"},\"type\":\"video\",\"id\":\"957104601656703951_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Ludwig\",\"created_time\":\"1428314611\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1ISKRxo7r8\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/11049421_1375007652828983_401355534_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/11049421_1375007652828983_401355534_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/11049421_1375007652828983_401355534_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428314611\",\"text\":\"\\u7075\\u829dget\\u221a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"957094792144337138\"},\"type\":\"image\",\"id\":\"957094791934622460_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Nashville\",\"created_time\":\"1428245860\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1GPBzpo7qW\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s320x320\\/e15\\/11137852_1649834698581861_1050691792_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s150x150\\/e15\\/11137852_1649834698581861_1050691792_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/e15\\/11137852_1649834698581861_1050691792_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428245860\",\"text\":\"\\u8fd9\\u91cc\\u7684\\u6e05\\u660e\\u662f\\u4e2a\\u5f88\\u91cd\\u8981\\u7684\\u8282\\u65e5\\uff0c\\u5b50\\u5b59\\u4eec\\u90fd\\u4f1a\\u56de\\u6765\\uff0c\\u8dcb\\u5c71\\u6d89\\u6c34\\uff0c\\u7af9\\u6392\\u6e21\\u6c5f\\uff0c\\u8352\\u5c71\\u5bfb\\u8def\\uff0c\\u51ed\\u96c6\\u4f53\\u7684\\u8bb0\\u5fc6\\u5bfb\\u627e\\u5217\\u7956\\u5217\\u5b97\\u7684\\u5b9d\\u5730\\uff0c\\u5bc4\\u54c0\\u601d\\uff0c\\u4e5f\\u6c42\\u798f\\u5fb7\\u3002\\u4e00\\u8def\\u4e0a\\u53ef\\u4ee5\\u542c\\u4ed6\\u4eec\\u5520\\u53e8\\u65e7\\u4e8b\\uff0c\\u4e5f\\u6709\\u8d85\\u7ea7\\u9760\\u8c31\\u7684\\u98ce\\u6c34\\u79d1\\u666e\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"956518065923930728\"},\"type\":\"image\",\"id\":\"956518065739381398_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Mayfair\",\"created_time\":\"1428228071\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1FtGO3I7kN\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/11055751_1573536912901494_1683773508_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/11055751_1573536912901494_1683773508_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/11055751_1573536912901494_1683773508_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428228071\",\"text\":\"\\u4e3a\\u4e86\\u90e8\\u843d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"956368836446370643\"},\"type\":\"image\",\"id\":\"956368836253432077_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Mayfair\",\"created_time\":\"1428131481\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1C03iPI7hZ\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/11055897_1407191599597961_1763496348_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/11055897_1407191599597961_1763496348_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/11055897_1407191599597961_1763496348_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428131481\",\"text\":\"\\u5728\\u6e05\\u660e\\u7684\\u5c71\\u8def\\u9047\\u5230\\u4e86\\u5929\\u7136\\u677e\\u9999\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"955558585941866653\"},\"type\":\"image\",\"id\":\"955558585706985561_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Crema\",\"created_time\":\"1427801745\",\"link\":\"https:\\/\\/instagram.com\\/p\\/04_8fwo7gL\\/\",\"likes\":{\"count\":3,\"data\":[{\"username\":\"bo0oo0\",\"profile_picture\":\"https:\\/\\/igcdn-photos-e-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/10507930_301607313382260_661513528_a.jpg\",\"id\":\"51426891\",\"full_name\":\"\"},{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/s320x320\\/e15\\/11123665_1542600796003839_1576473443_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/s150x150\\/e15\\/11123665_1542600796003839_1576473443_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/e15\\/11123665_1542600796003839_1576473443_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1427801745\",\"text\":\"\\u5982\\u679c\\u4f60\\u98de\\u5f97\\u50cf\\u6708\\u4eae\\u8fd9\\u4e48\\u9ad8\\uff0c\\u5c31\\u4e0d\\u4f1a\\u6401\\u6d45\\u5728\\u6811\\u4e0a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"952792555599411873\"},\"type\":\"image\",\"id\":\"952792555389696011_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":22.538938333,\"longitude\":113.92382},\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1425469470\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zzfe7Oo7uc\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"kai_efforts\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11326569_447841455377553_1276311913_a.jpg\",\"id\":\"1319736417\",\"full_name\":\"\\u5f35\\u51f1\\u8317KAI\"},{\"username\":\"yinggg0830\",\"profile_picture\":\"https:\\/\\/igcdn-photos-e-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/11191229_478700095619252_1507412393_a.jpg\",\"id\":\"303041107\",\"full_name\":\"\"},{\"username\":\"aofeixi\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/10899120_578003152334536_1461658615_a.jpg\",\"id\":\"1648133428\",\"full_name\":\"\"},{\"username\":\"ritababe_\",\"profile_picture\":\"https:\\/\\/igcdn-photos-e-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11018358_387855874729324_717730599_a.jpg\",\"id\":\"40610366\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s320x320\\/e15\\/11008101_1593505510894691_369067449_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s150x150\\/e15\\/11008101_1593505510894691_369067449_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/e15\\/11008101_1593505510894691_369067449_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1425469470\",\"text\":\"\\u559c\\u6b22\\u8fd9\\u4e2a\\u5b63\\u8282\\u7684\\u5929\\u7a7a\\uff0c\\u4f60\\u627e\\u4e2a\\u8349\\u576a\\u4e00\\u8eba\\uff0c\\u98de\\u673a\\uff0c\\u98ce\\u7b5d\\uff0c\\u9e1f\\u513f\\u5c31\\u90fd\\u5728\\u4e0a\\u8fb9\\uff0c\\u5929\\u6c14\\u597d\\u65f6\\u8fd8\\u80fd\\u770b\\u5230\\u767d\\u5929\\u7684\\u6708\\u4eae\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"933228012653230637\"},\"type\":\"image\",\"id\":\"933228012418349980_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":23.479396667,\"longitude\":111.271811667},\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1425083565\",\"text\":\"\\u597d\\u60f3\\u5403\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"929990810867579125\"}]},\"filter\":\"Sierra\",\"created_time\":\"1424692998\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zcWez6I7uo\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10958252_1405701033068537_2023890854_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10958252_1405701033068537_2023890854_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10958252_1405701033068537_2023890854_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1424692998\",\"text\":\"\\u5f88\\u591a\\u4e1c\\u897f\\u968f\\u7740\\u6162\\u6162\\u957f\\u5927\\uff0c\\u53d8\\u5f97\\u4e0d\\u50cf\\u5c0f\\u65f6\\u5019\\u90a3\\u6837\\u76fc\\u671b\\u70ed\\u5207\\uff0c\\u6bd4\\u5982\\u5de7\\u514b\\u529b\\u9ea6\\u5f53\\u52b3\\u85af\\u7247\\u96ea\\u7cd5\\u3002\\u53ea\\u6709\\u5bf9\\u62c5\\u5b50\\u7c89\\u7684\\u7231\\u6c38\\u8fdc\\u4e0d\\u53d8\\u7684\\u8bf4\\u2026\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"926714497851439701\"},\"type\":\"image\",\"id\":\"926714497675279272_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1424356143\",\"text\":\"\\u5927\\u5bb6\\u597d\\u6211\\u662f\\u5f71\\u5e1d\\u65af\\u79d1\\u62c9\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"923888749621000808\"}]},\"filter\":\"Normal\",\"created_time\":\"1424320197\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zRPazvI7ol\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"hank_shop\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/11190127_567862313355599_688691834_a.jpg\",\"id\":\"1612494131\",\"full_name\":\"\\u9ad8\\u7ea7\\u73e0\\u5b9d\\u79c1\\u4eba\\u5b9a\\u5236\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10832246_413065338853260_183697882_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10832246_413065338853260_183697882_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10832246_413065338853260_183697882_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1424320197\",\"text\":\"\\u636e\\u8bf4\\u662f\\u4e00\\u5e74\\u4e00\\u5ea6\\u8003\\u9a8c\\u6f14\\u6280\\u7684\\u65f6\\u5019\\u2026\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"923587211736365325\"},\"type\":\"image\",\"id\":\"923587211543427621_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Aden\",\"created_time\":\"1424252263\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zPN2LtI7sT\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/10268927_436139166536328_1377561628_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/10268927_436139166536328_1377561628_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/10268927_436139166536328_1377561628_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1424252263\",\"text\":\"\\u9508\\u8ff9\\u6591\\u6591\\u7684\\u9999\\u7089\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"923017346843654518\"},\"type\":\"image\",\"id\":\"923017346659105555_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1424099803\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zKrDWlo7gZ\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/s320x320\\/e15\\/11008343_410508022446936_713236389_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/s150x150\\/e15\\/11008343_410508022446936_713236389_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/e15\\/11008343_410508022446936_713236389_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1424099803\",\"text\":\"\\u56de\\u8001\\u5bb6\\u4e86\\uff0c\\u5c0f\\u65f6\\u5019\\u8ddf\\u6211\\u6253\\u8fc7\\u73bb\\u7483\\u73e0\\u7684\\u5c0f\\u4f19\\u4f34\\u4eec\\u5462\\uff1f\\u4f60\\u4eec\\u4e00\\u4e2a\\u5728\\u5317\\u4eac\\uff0c\\u4e00\\u4e2a\\u5728\\u5b89\\u5fbd\\uff0c\\u4e00\\u4e2a\\u5728\\u6fb3\\u6d32\\uff0c\\u4e00\\u4e2a\\u6211\\u90fd\\u4e0d\\u77e5\\u9053\\u4e86\\u2026\\u4f46\\u4f60\\u4eec\\u770b\\u5230\\u73bb\\u7483\\u73e0\\u7684\\u65f6\\u5019\\uff0c\\u8981\\u60f3\\u8d77\\u6211\\u6765\\u554a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"921738420473281180\"},\"type\":\"image\",\"id\":\"921738420162902041_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1422532011\",\"link\":\"https:\\/\\/instagram.com\\/p\\/yb8uaCI7tt\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"hoffy1117\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/10848344_1661033877456607_416512853_a.jpg\",\"id\":\"754263937\",\"full_name\":\"\\ud83c\\udde8\\ud83c\\uddf3Hao.G\\ud83c\\udde8\\ud83c\\uddf3\"},{\"username\":\"zrrff97\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10995234_376996879137889_1932382326_a.jpg\",\"id\":\"460957803\",\"full_name\":\"\"},{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"venus_nan\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xft1\\/t51.2885-19\\/10549834_354763768065767_311951679_a.jpg\",\"id\":\"469639381\",\"full_name\":\"\\ud83d\\udc51\\u6db5baby\\ud83d\\udc51\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10932550_620643038062978_1729442807_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10932550_620643038062978_1729442807_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10932550_620643038062978_1729442807_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1422532011\",\"text\":\"\\u8349\\u5730\\u4e0a\\u9057\\u843d\\u7684\\u978b\\u5b50\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"908586821869615866\"},\"type\":\"image\",\"id\":\"908586821685066605_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1422231801\",\"text\":\"\\u2728 @houuuuuuuuuu\",\"from\":{\"username\":\"callmejamieee\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/11379143_1028356523843961_557603003_a.jpg\",\"id\":\"176277794\",\"full_name\":\"Jamie\"},\"id\":\"906068479900367270\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1421930605\",\"link\":\"https:\\/\\/instagram.com\\/p\\/yKBopho7mX\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/891532_1563899373855738_1180535181_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/891532_1563899373855738_1180535181_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/891532_1563899373855738_1180535181_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1421930605\",\"text\":\"\\u6709\\u4f4d\\u5f88\\u4e45\\u6ca1\\u8054\\u7cfb\\u7684\\u670b\\u53cb\\u5bc4\\u6765\\u660e\\u4fe1\\u7247\\uff0c\\u8bf4\\uff1a\\u6211\\u5f88\\u5c11\\u770b\\u5230\\u6d77\\uff0c\\u6b63\\u5982\\u4f60\\u6ca1\\u89c1\\u8fc7\\u51e0\\u6b21\\u96ea\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"903541867174672911\"},\"type\":\"image\",\"id\":\"903541866654579095_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1421601776\",\"link\":\"https:\\/\\/instagram.com\\/p\\/yAOcawI7pA\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10005439_338105566394046_854247264_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10005439_338105566394046_854247264_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10005439_338105566394046_854247264_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1421601776\",\"text\":\"\\u6df1\\u591c\\u603b\\u662f\\u7075\\u611f\\u4e4d\\u73b0\\u7684\\u6700\\u4f73\\u65f6\\u671f\\uff0c\\u53ea\\u662f\\u51e0\\u4e2a\\u8bbe\\u8ba1\\u65b9\\u6848\\u90fd\\u6ca1\\u6cd5\\u4f7f\\u81ea\\u5df1\\u6ee1\\u610f\\u3002\\u7d2f\\u4e86\\u6253\\u5f00\\u7a97\\u770b\\u5230\\u5929\\u4e0a\\u6709\\u4e2a\\u5927\\u6708\\u4eae\\uff0c\\u53ea\\u60f3\\u7528\\u56fe\\u7ae0\\u5de5\\u5177\\u628a\\u5b83\\u5e72\\u6389\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"900783451389803192\"},\"type\":\"image\",\"id\":\"900783450995538496_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1421378982\",\"text\":\"\\u8fd9\\u662f\\u85b0\\u8863\\u8349\\u4e48\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"898914514733611565\"},{\"created_time\":\"1421601128\",\"text\":\"@whitebadwind \\u4e0d\\u77e5\\u9053\\u4ec0\\u4e48\\u82b1\\uff0c\\u4f46\\u5e94\\u8be5\\u4e0d\\u662f\\u85b0\\u8863\\u8349\\uff0c\\u6728\\u6709\\u9999\\u5473\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"900778013826988166\"}]},\"filter\":\"Normal\",\"created_time\":\"1421370258\",\"link\":\"https:\\/\\/instagram.com\\/p\\/x5U25kI7sN\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"nwheather\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_1018712769_75sq_1390664966.jpg\",\"id\":\"1018712769\",\"full_name\":\"Heather Hynes\"},{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"dingstyle\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_30683156_75sq_1333592929.jpg\",\"id\":\"30683156\",\"full_name\":\"Linjie\"},{\"username\":\"candychang1113\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10725077_1498470533762845_1695396371_a.jpg\",\"id\":\"1133304108\",\"full_name\":\"Candy Chang\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10903312_693622147425934_1766884651_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10903312_693622147425934_1766884651_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10903312_693622147425934_1766884651_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1421370258\",\"text\":\"\\u9762\\u671d\\u5927\\u6d77\\u51ac\\u6696\\u82b1\\u5f00\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"898841334497130569\"},\"type\":\"image\",\"id\":\"898841334228695821_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1421235225\",\"link\":\"https:\\/\\/instagram.com\\/p\\/x1TTZUo7gW\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10914460_1546003772305181_1301162053_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10914460_1546003772305181_1301162053_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10914460_1546003772305181_1301162053_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1421235225\",\"text\":\"\\u5206\\u4eab\\u65e5\\u5e38\\u4e0d\\u6b63\\u5e38\\u751f\\u6d3b\\u7167\\u4e00\\u5f20\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"897708596666809269\"},\"type\":\"image\",\"id\":\"897708596473870358_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1420456723\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xeGbWuo7if\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"sleepgo\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/10296686_814576801887247_861033020_a.jpg\",\"id\":\"332373544\",\"full_name\":\"Tony H\"},{\"username\":\"panpanbiu\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/11190893_828079227246904_2044492120_a.jpg\",\"id\":\"299823572\",\"full_name\":\"PANPAN\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s320x320\\/e15\\/10903277_832760670116494_255352239_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s150x150\\/e15\\/10903277_832760670116494_255352239_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/e15\\/10903277_832760670116494_255352239_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1420456723\",\"text\":\"\\u5176\\u5b9e\\u6211\\u60f3\\uff0c\\u90a3\\u4e9b\\u53e4\\u8001\\u7684\\u6e14\\u6c11\\u4eec\\uff0c\\u6bcf\\u5929\\u770b\\u7740\\u6d77\\u5cb8\\u7ebf\\u7684\\u65e5\\u843d\\u65e5\\u51fa\\uff0c\\u80af\\u5b9a\\u662f\\u6709\\u4eba\\u60f3\\u8fc7\\u5730\\u7403\\u662f\\u5706\\u7684\\u3002\\u800c\\u201c\\u60f3\\u6cd5\\u201d\\u4e0e\\u201c\\u8bc1\\u660e\\u201d\\u4e4b\\u95f4\\uff0c\\u5374\\u8de8\\u8d8a\\u4e86\\u4e00\\u6574\\u6761\\u9ea6\\u54f2\\u4f26\\u822a\\u9053\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"891178044837051035\"},\"type\":\"image\",\"id\":\"891178044375677087_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":22.100710837,\"name\":\"\\u73e0\\u6d77\\u957f\\u9686\\u6d77\\u6d0b\\u738b\\u56fd Zhuhai Chimelong Ocean Kingdom\",\"longitude\":113.535968094,\"id\":259203746},\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1420249250\",\"text\":\"\\u8fd9\\u9c7c\\u597d\\u56e7\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"889437634154445764\"},{\"created_time\":\"1420455887\",\"text\":\"@whitebadwind \\u5927\\u732b\\u4f1a\\u559c\\u6b22\\u7684\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"891171033185499457\"}]},\"filter\":\"Normal\",\"created_time\":\"1420241506\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xXr70fI7iD\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/924083_1539057536347062_2062767438_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/924083_1539057536347062_2062767438_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/924083_1539057536347062_2062767438_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1420241506\",\"text\":\"\\u9c7c\\u5c71\\u9c7c\\u6d77\\u4e2d\\uff0c\\u53ea\\u6709\\u4f60\\uff0c\\u80af\\u5b89\\u9759\\u7684\\u8db4\\u572865\\u5398\\u7c73\\u539a\\u7684\\u4e9a\\u514b\\u529b\\u677f\\u5b50\\u4e0a\\u4e0e\\u6211\\u5408\\u5f71\\uff0c\\u5927\\u4e11\\u9c7c\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"889372678713227478\"},\"type\":\"image\",\"id\":\"889372678235076739_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1420118795\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xUB4dOI7g1\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10890944_765121966897759_2039585477_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10890944_765121966897759_2039585477_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10890944_765121966897759_2039585477_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1420118795\",\"text\":\"\\u65b0\\u5e74\\u5355\\u4eba\\u65c5\\u884c\\u8d70\\u8d77\\u3002\\u5176\\u5b9e\\u4ece\\u4e5d\\u6d32\\u6e2f\\u7801\\u5934\\u5f00\\u59cb\\uff0c\\u73e0\\u6d77\\u5e76\\u6ca1\\u6709\\u7ed9\\u4eba\\u5f88\\u60ca\\u559c\\u7684\\u611f\\u89c9\\uff0c\\u5305\\u62ec\\u76db\\u540d\\u4e4b\\u4e0b\\u7684\\u6cbf\\u6d77\\u98ce\\u5149\\u4e0e\\u6e14\\u5973\\u96d5\\u5851\\u3002\\u5012\\u662f\\u4ea4\\u901a\\u4e0d\\u901a\\u7545\\uff0c\\u4ece\\u8f6e\\u6e21\\u5230\\u516c\\u4ea4\\u90fd\\u7ed9\\u6211\\u5e26\\u6765\\u4e86\\u8bb8\\u591a\\u9ebb\\u70e6\\u3002\\u76f4\\u5230\\uff0c\\u665a\\u4e0a\\u5403\\u70e4\\u751f\\u869d\\u7684\\u7b2c\\u4e00\\u53e3\\uff0c\\u6211\\u53c8\\u89c9\\u5f97\\u4ec0\\u4e48\\u4e8b\\u60c5\\u90fd\\u662f\\u53ef\\u4ee5\\u539f\\u8c05\\u7684\\u2026\\u2026\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"888343304673147100\"},\"type\":\"image\",\"id\":\"888343304211773493_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Unknown\",\"created_time\":\"1420028793\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xRWN47I7pW\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"elkakosmoss\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11235915_926324447432373_299446423_a.jpg\",\"id\":\"515503821\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10899183_999582293404177_745539859_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10899183_999582293404177_745539859_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10899183_999582293404177_745539859_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1420028793\",\"text\":\"2014\\u5e74\\u6700\\u540e\\u7684\\u9633\\u5149\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"887588313553418897\"},\"type\":\"image\",\"id\":\"887588313066879574_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1419956909\",\"text\":\"life is art. happy new year! kitty!\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"886985301730507751\"},{\"created_time\":\"1420000813\",\"text\":\"@whitebadwind \\u5143\\u65e6\\u5feb\\u4e50\\uff01\\u5343\\u4e07\\u8bb0\\u5f97\\u8981\\u628a\\u6050\\u9f99\\u670d\\u7a7f\\u4e0a\\uff01\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"887353597667556016\"}]},\"filter\":\"Rise\",\"created_time\":\"1419945664\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xO3qREI7iW\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xat1\\/t51.2885-15\\/s320x320\\/e15\\/10894909_702627706517406_1277557620_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xat1\\/t51.2885-15\\/s150x150\\/e15\\/10894909_702627706517406_1277557620_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xat1\\/t51.2885-15\\/e15\\/10894909_702627706517406_1277557620_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1419945664\",\"text\":\"\\u6700\\u540e\\u4e00\\u8282\\u5409\\u4ed6\\u8bfe\\u7ed3\\u675f\\u540e\\uff0c\\u9a6c\\u8def\\u4e0a\\u90a3\\u98ce\\u4e00\\u76f4\\u5439\\uff0c\\u624d\\u611f\\u89c9\\u5357\\u65b9\\u7684\\u51ac\\u5929\\u7ec8\\u4e8e\\u662f\\u6765\\u4e86\\u3002\\u5176\\u5b9e\\u5409\\u4ed6\\u5728\\u51ac\\u5929\\u4f1a\\u6709\\u8bb8\\u591a\\u795e\\u5947\\u7684\\u4e8b\\u60c5\\u3002\\u6bd4\\u5982\\u7434\\u5f26\\u5982\\u808c\\u8089\\u4e00\\u6837\\u56e0\\u51b7\\u800c\\u7d27\\u7ef7\\uff0c\\u53d1\\u51fa\\u6bd4\\u4ee5\\u5f80\\u6c89\\u95f7\\u7684\\u4f4e\\u8bed\\uff1b\\u800c\\u7a7a\\u65f7\\u7684\\u5927\\u6559\\u5ba4\\u91cc\\uff0c\\u5982\\u6709\\u5176\\u4ed6\\u540c\\u4f34\\u62e8\\u54cd\\u548c\\u5f26\\uff0c\\u624b\\u4e2d\\u672c\\u5df2\\u6309\\u706d\\u7684\\u7434\\u5f26\\u53c8\\u4f1a\\u56e0\\u5171\\u9e23\\u5fae\\u5fae\\u98a4\\u52a8\\u3002\\u50cf\\u6709\\u751f\\u547d\\u4e00\\u6837\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"886890974224300917\"},\"type\":\"image\",\"id\":\"886890973737760918_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":5,\"data\":[{\"created_time\":\"1417442768\",\"text\":\"\\u554a\\u96be\\u9053\\u4e0d\\u662f\\u7d2b\\u8346\\uff1f\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"865895159683070128\"},{\"created_time\":\"1417475301\",\"text\":\"\\u597d\\u6f02\\u4eae\\u554a \\u7c89\\u8272\\u7684\\u82b1\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"866168069916179297\"},{\"created_time\":\"1417833120\",\"text\":\"\\ud83c\\udf40\\ud83c\\udf40\",\"from\":{\"username\":\"h.cmzsq\",\"profile_picture\":\"https:\\/\\/igcdn-photos-e-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/11084897_1407176502933692_1292814398_a.jpg\",\"id\":\"244993178\",\"full_name\":\"\\ud83d\\ude4f\"},\"id\":\"869169669249153672\"},{\"created_time\":\"1419333148\",\"text\":\"incredible @color_blocker\",\"from\":{\"username\":\"jiawenlii\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/11093081_735702273195569_1381487601_a.jpg\",\"id\":\"174509764\",\"full_name\":\"\\u5609\\u6587\"},\"id\":\"881752815517808693\"},{\"created_time\":\"1419333206\",\"text\":\"\\ud83d\\ude0a @nicoledaii\",\"from\":{\"username\":\"lawrencens\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11334406_920682824640599_2112492465_a.jpg\",\"id\":\"398977802\",\"full_name\":\"LIQIANLONG\"},\"id\":\"881753305378961490\"}]},\"filter\":\"Normal\",\"created_time\":\"1417442257\",\"link\":\"https:\\/\\/instagram.com\\/p\\/wEQykeo7tU\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"cicici_ton\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10632351_1431817843781696_881928506_a.jpg\",\"id\":\"790581808\",\"full_name\":\"\\u4f5f_\\u5b63\\u521d\"},{\"username\":\"t________.y\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/11203194_820402394704713_1736313100_a.jpg\",\"id\":\"1456056098\",\"full_name\":\"Tiffany\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},{\"username\":\"dannisdannis\",\"profile_picture\":\"https:\\/\\/igcdn-photos-d-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/10005570_1418618885099779_1080129947_a.jpg\",\"id\":\"1536730862\",\"full_name\":\"Dannis\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10831989_483313928477468_40906631_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10831989_483313928477468_40906631_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10831989_483313928477468_40906631_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1417442257\",\"text\":\"\\u6709\\u68f5\\u4e11\\u6811\\uff0c\\u6211\\u7ecf\\u5e38\\u53bb\\u770b\\uff0c\\u53c8\\u80d6\\u53c8\\u6b6a\\uff0c\\u79c3\\u5f97\\u53ef\\u7b11\\u3002\\u5728\\u53d8\\u51b7\\u7684\\u4e00\\u5929\\uff0c\\u5b83\\u7a81\\u7136\\u5c31\\u5f00\\u82b1\\u4e86\\u3002\\u51ac\\u5929\\u7684\\u82b1\\u6211\\u77e5\\u9053\\u5f97\\u5f88\\u5c11\\uff0c\\u5357\\u65b9\\u6ca1\\u6709\\u6885\\u82b1\\uff0c\\u90a3\\u5c31\\u662f\\u5f02\\u6728\\u68c9\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"865890872693341013\"},\"type\":\"image\",\"id\":\"865890872248744788_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1415725886\",\"text\":\"\\u8fd9\\u4e2a\\u592a\\u5389\\u5bb3\\u4e86\\u5427\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"851492912496883814\"},{\"created_time\":\"1417137485\",\"text\":\"\\ud83d\\udc4d @color_blocker\",\"from\":{\"username\":\"onelai_kk\",\"profile_picture\":\"https:\\/\\/igcdn-photos-d-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11241982_817407918337387_1779316028_a.jpg\",\"id\":\"1289579257\",\"full_name\":\"instagram\\u4e13\\u4e1a\\u670d\\u52d9\\ud83d\\udc8d\\ud83d\\udc8d\\ud83d\\udc96\\ud83d\\udc96\\ud83d\\udc96\\u2728\\u2728\\u2728\"},\"id\":\"863334257859475861\"}]},\"filter\":\"Walden\",\"created_time\":\"1415683797\",\"link\":\"https:\\/\\/instagram.com\\/p\\/vP2ywuo7pq\\/\",\"likes\":{\"count\":5,\"data\":[{\"username\":\"_llpsssss\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11232835_794856153954569_504179174_a.jpg\",\"id\":\"236870082\",\"full_name\":\"Beijing\\ud83c\\udde8\\ud83c\\uddf3UK\\ud83c\\uddec\\ud83c\\udde7\\ud83d\\udc96\"},{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"faifaifai99\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/11098264_102231303441561_1493195010_a.jpg\",\"id\":\"473489307\",\"full_name\":\"\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s320x320\\/e15\\/10784965_1518537748403855_176956695_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s150x150\\/e15\\/10784965_1518537748403855_176956695_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/e15\\/10784965_1518537748403855_176956695_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1415683797\",\"text\":\"\\u901a\\u7075\\u4e4b\\u672f\\uff01\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"851139843175201387\"},\"type\":\"image\",\"id\":\"851139837403839082_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Valencia\",\"created_time\":\"1415182653\",\"link\":\"https:\\/\\/instagram.com\\/p\\/vA68BLo7tN\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10735195_1505939246340704_1984926778_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10735195_1505939246340704_1984926778_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10735195_1505939246340704_1984926778_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1415182653\",\"text\":\"\\u73b0\\u573a\\u6c14\\u6c1b\\u679c\\u7136\\u4e0d\\u4e00\\u6837\\uff0c\\u9a6c\\u4e0a\\u5c31\\u53ef\\u4ee5\\u770b\\u5230\\u5c0f\\u4f1e\\u5728\\u5927\\u54e5\\u80ef\\u4e0b\\u75af\\u72c2\\u8f93\\u51fa\\u2026\\u662f\\u65f6\\u5019\\u6765\\u9996\\u9009\\u4e00\\u8bb0\\u8587\\u6069\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"846935942288882458\"},\"type\":\"image\",\"id\":\"846935941080922957_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1415116538\",\"text\":\"@litten225 \\u76f8\\u5f53\\u7ec6\\u817b\\u7684\\u4e66\\u554a\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"846381329076697864\"}]},\"filter\":\"Unknown\",\"created_time\":\"1415010755\",\"link\":\"https:\\/\\/instagram.com\\/p\\/u7zEVxo7vw\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"dingstyle\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_30683156_75sq_1333592929.jpg\",\"id\":\"30683156\",\"full_name\":\"Linjie\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10747711_429336373885590_422028037_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10747711_429336373885590_422028037_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10747711_429336373885590_422028037_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1415010755\",\"text\":\"\\u6709\\u670b\\u53cb\\u8ddf\\u6211\\u8bf4\\uff0c\\u632a\\u5a01\\u7684\\u68ee\\u6797\\u6839\\u672c\\u770b\\u4e0d\\u4e0b\\u53bb\\uff1b\\u53c8\\u6709\\u670b\\u53cb\\u8bf4\\uff0c\\u770b\\u8fd9\\u4e66\\u4e00\\u53d1\\u4e0d\\u53ef\\u6536\\u62fe\\u3002\\u5dee\\u522b\\u597d\\u5927\\u5440\\uff01\\u6211\\u5012\\u89c9\\u5f97\\u6709\\u4e2a\\u7b80\\u5355\\u7684\\u65b9\\u6cd5\\uff1a\\u7ffb\\u5230\\u5f00\\u7bc7\\u7684\\u8fd9\\u51e0\\u4e2a\\u5b57\\uff0c\\u5982\\u679c\\u5fc3\\u4e2d\\u4e00\\u7d27\\uff0c\\u90a3\\u5c31\\u8bf4\\u660e\\u8fd9\\u672c\\u4e66\\u9002\\u5408\\u4f60\\uff0c\\u5426\\u5219\\u8bf7\\u5f03\\u4e4b\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"845493955538958871\"},\"type\":\"image\",\"id\":\"845493953693465584_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1414650783\",\"text\":\"cute!\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"842474292689222356\"},{\"created_time\":\"1414759282\",\"text\":\"\\ud83c\\udd92 @zhaolei395395\",\"from\":{\"username\":\"tearpkc\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10611023_1535665483313234_214736228_a.jpg\",\"id\":\"1476911167\",\"full_name\":\"\"},\"id\":\"843384447673023032\"}]},\"filter\":\"Hefe\",\"created_time\":\"1414579138\",\"link\":\"https:\\/\\/instagram.com\\/p\\/uu70zJo7qb\\/\",\"likes\":{\"count\":5,\"data\":[{\"username\":\"cachiulee\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/11377676_692543867516879_1892210321_a.jpg\",\"id\":\"951795449\",\"full_name\":\"Tonnie Cox's new ins ac\"},{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"fanghonglia292\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/10518268_489599821175797_494026352_a.jpg\",\"id\":\"1451952020\",\"full_name\":\"Fanghonglia292\"},{\"username\":\"olivia__cyrus\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10802807_762277510528189_2055295258_a.jpg\",\"id\":\"619274757\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10735112_730529873702428_413107753_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10735112_730529873702428_413107753_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10735112_730529873702428_413107753_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1414579138\",\"text\":\"\\u5929\\u4e0b\\u7684\\u5c0f\\u997c\\u5e72\\u9047\\u5230\\u6211\\uff0c\\u8c8c\\u4f3c\\u5c31\\u53ea\\u6709\\u4e00\\u79cd\\u4e0b\\u573a\\uff01\\uff01\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"841873294635546895\"},\"type\":\"image\",\"id\":\"841873293444364955_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Earlybird\",\"created_time\":\"1413561977\",\"link\":\"https:\\/\\/instagram.com\\/p\\/uQnvluo7sK\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"wallbase.hd\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10617029_283951291805046_1229690122_a.jpg\",\"id\":\"1489501811\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s320x320\\/e15\\/10725177_573652486072155_1401604216_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s150x150\\/e15\\/10725177_573652486072155_1401604216_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/e15\\/10725177_573652486072155_1401604216_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1413561977\",\"text\":\"\\u4e00\\u4e2a\\u4eba\\uff0c\\u4e00\\u652f\\u53e3\\u7434\\uff0c\\u4e00\\u7247\\u6d77\\uff0c\\u4e00\\u74f6\\u9152\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"833340726864755382\"},\"type\":\"image\",\"id\":\"833340725203811082_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1413394943\",\"text\":\"cool  @gaoxiaobao_\",\"from\":{\"username\":\"accoo7\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10570213_329504053891349_1283692450_a.jpg\",\"id\":\"287433724\",\"full_name\":\"\"},\"id\":\"831939546255178477\"}]},\"filter\":\"Valencia\",\"created_time\":\"1413391668\",\"link\":\"https:\\/\\/instagram.com\\/p\\/uLi56Wo7oO\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10724868_302191016652312_2097904817_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10724868_302191016652312_2097904817_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10724868_302191016652312_2097904817_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1413391668\",\"text\":\"\\u300a\\u8bba\\u591c\\u5f52\\uff0c\\u6253\\u7684\\uff0c\\u4ee5\\u53ca\\u53d1\\u7968\\u7684\\u6b63\\u786e\\u7528\\u6cd5\\u300b\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"831912071466826589\"},\"type\":\"image\",\"id\":\"831912069428394510_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Rise\",\"created_time\":\"1413163642\",\"link\":\"https:\\/\\/instagram.com\\/p\\/uEv-tCo7rJ\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10731727_461314204008708_386749273_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10731727_461314204008708_386749273_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10731727_461314204008708_386749273_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1413163642\",\"text\":\"\\u7ae5\\u5e74\\u771f\\u597d\\u3002\\u6211\\u4ee5\\u540e\\u4e00\\u5b9a\\u4e0d\\u8981\\u8ddf\\u5b69\\u5b50\\u8bf4\\uff1a\\u5e0c\\u671b\\u4f60\\u5feb\\u9ad8\\u957f\\u5927\\u8fd9\\u79cd\\u50bb\\u8bdd\\u2026\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"829999248859969681\"},\"type\":\"image\",\"id\":\"829999248499260105_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1412404756\",\"text\":\"\\ud83d\\udc4dGOOD\",\"from\":{\"username\":\"somnusresia\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11380897_1586097328311216_1597361628_a.jpg\",\"id\":\"249391877\",\"full_name\":\"Somnus Wen\"},\"id\":\"823633252150655824\"}]},\"filter\":\"Valencia\",\"created_time\":\"1411652721\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tXuIHso7qK\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"cherrymomo412\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10802961_759165964121336_488483054_a.jpg\",\"id\":\"54007423\",\"full_name\":\"cherrymomo\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10616983_1382591478697855_2107473552_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10616983_1382591478697855_2107473552_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10616983_1382591478697855_2107473552_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1411652721\",\"text\":\"\\u6211\\u7684\\u597d\\u670b\\u53cb\\u2014\\u2014\\u8d85\\u7ea7\\u9ad8\\u51b7\\u8d85\\u7ea7\\u78e8\\u4eba\\u7684\\u4e1d\\u74dc\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"817324726096738307\"},\"type\":\"image\",\"id\":\"817324725551479434_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}}]}","source":"instagram/ins0.json","raw":"{\"pagination\":{\"next_url\":\"https:\\/\\/api.instagram.com\\/v1\\/users\\/438522285\\/media\\/recent?count=100\\u0026callback=jQuery19008141340191941708_1433432491285\\u0026client_id=956dd096b6e5496aba6662165b9b8443\\u0026max_id=817324725551479434_438522285\\u0026_=1433432491286\",\"next_max_id\":\"817324725551479434_438522285\"},\"meta\":{\"code\":200},\"data\":[{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Lark\",\"created_time\":\"1433424772\",\"link\":\"https:\\/\\/instagram.com\\/p\\/3glBKbI7jm\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/11375982_491190547696110_2013240096_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/11375982_491190547696110_2013240096_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/11375982_491190547696110_2013240096_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1433424772\",\"text\":\"\\u5c0f\\u841d\\u8389\\u4e0d\\u613f\\u56de\\u5bb6\\uff0c\\u8ddf\\u5976\\u5976\\u8bf4\\uff1a\\u201c\\u518d\\u8ba9\\u6211\\u73a9\\u4f1a\\uff0c\\u660e\\u5929\\u8981\\u5b66\\u94a2\\u7434\\uff0c\\u540e\\u5929\\u8981\\u5b66\\u8df3\\u821e\\uff0c\\u5c31\\u6765\\u4e0d\\u4e86\\u8fd9\\u513f\\u73a9\\u4e86\\u3002\\u201d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"999961926134119385\"},\"type\":\"image\",\"id\":\"999961924909381862_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":5,\"data\":[{\"created_time\":\"1432100935\",\"text\":\"\\ud83d\\ude0a\",\"from\":{\"username\":\"muvanmf\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/11334455_1615248035385837_1443100648_a.jpg\",\"id\":\"1200885749\",\"full_name\":\"\"},\"id\":\"988856776283895820\"},{\"created_time\":\"1432500874\",\"text\":\"\\ud83d\\ude0a\",\"from\":{\"username\":\"y_lang99\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11373510_386713434848322_1596956169_a.jpg\",\"id\":\"1509502800\",\"full_name\":\"\\u2728\\u5c0f\\u963f\\u6d6a\\uff5e\"},\"id\":\"992211705421609081\"},{\"created_time\":\"1432886603\",\"text\":\"\\ud83d\\udc4d\",\"from\":{\"username\":\"cp_water_h2o\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/11191155_897877480271222_1196332450_a.jpg\",\"id\":\"46708139\",\"full_name\":\"\"},\"id\":\"995447436348733496\"},{\"created_time\":\"1433035543\",\"text\":\"\\ud83d\\ude04\",\"from\":{\"username\":\"vocalmomoko\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/10601848_849046995107581_1799487354_a.jpg\",\"id\":\"280464724\",\"full_name\":\"Momoko\"},\"id\":\"996696839524956493\"},{\"created_time\":\"1433035564\",\"text\":\"nice  @Ijustinchen\",\"from\":{\"username\":\"dikenxoen\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/925345_933363483364074_1000071537_a.jpg\",\"id\":\"1649582238\",\"full_name\":\"\"},\"id\":\"996697009528486242\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1432095934\",\"link\":\"https:\\/\\/instagram.com\\/p\\/24-dd6o7uB\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"oliviayhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11326269_1439141373071498_1054025241_a.jpg\",\"id\":\"10631089\",\"full_name\":\"Olivia Yang\"},{\"username\":\"zx_9451\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11327937_953513731373032_1587298722_a.jpg\",\"id\":\"1147297522\",\"full_name\":\"\\u8d24\\u59b9\\u59b9ZX\"},{\"username\":\"irissssw\",\"profile_picture\":\"https:\\/\\/igcdn-photos-d-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/11005023_732965413468795_1308833307_a.jpg\",\"id\":\"231558542\",\"full_name\":\"Iris.W\"},{\"username\":\"juxiequechuicai\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10932562_1408525596106461_81586164_a.jpg\",\"id\":\"1649588862\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/11252751_1444216632541093_1558227860_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/11252751_1444216632541093_1558227860_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/11252751_1444216632541093_1558227860_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1432095934\",\"text\":\"\\u98ce\\u96e8\\u6b32\\u6765\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"988814823345338742\"},\"type\":\"image\",\"id\":\"988814822078659457_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t50.2886-16\\/11234567_805492662880042_967794598_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t50.2886-16\\/11235514_1629635357248662_1505532808_n.mp4\",\"width\":640,\"height\":640},\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t50.2886-16\\/11234567_805492662880042_967794598_s.mp4\",\"width\":480,\"height\":480}},\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Ashby\",\"created_time\":\"1431736282\",\"link\":\"https:\\/\\/instagram.com\\/p\\/2uQeuaI7nv\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"ashleyfashionblogger\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/11190869_428988550612824_1565351360_a.jpg\",\"id\":\"1172999152\",\"full_name\":\"Ashley\\u7cbe\\u5c16\\u5962\\u54c1\"},{\"username\":\"jijileexi\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10914307_1531769583766522_1188586237_a.jpg\",\"id\":\"1668534092\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/11226595_701075516681953_1354085958_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/11226595_701075516681953_1354085958_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/11226595_701075516681953_1354085958_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1431736282\",\"text\":\"\\u91ce\\u751f\\u6d77\\u5e26\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"985797850168539756\"},\"type\":\"video\",\"id\":\"985797848599869935_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"videos\":{\"low_bandwidth\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t50.2886-16\\/11100588_1627658390782524_1406603363_s.mp4\",\"width\":480,\"height\":480},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t50.2886-16\\/11123341_1574707489481834_1444136079_n.mp4\",\"width\":640,\"height\":640},\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t50.2886-16\\/11100588_1627658390782524_1406603363_s.mp4\",\"width\":480,\"height\":480}},\"tags\":[],\"location\":null,\"comments\":{\"count\":3,\"data\":[{\"created_time\":\"1428633555\",\"text\":\"@nanako0606 :)\",\"from\":{\"username\":\"lvhombeme\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/11190759_712908695501663_547363914_a.jpg\",\"id\":\"30244942\",\"full_name\":\"\"},\"id\":\"959770281262693297\"},{\"created_time\":\"1428952602\",\"text\":\"\\ud83d\\udc98\\ud83d\\udc98 @MIKATTONG\",\"from\":{\"username\":\"kaogai\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10431811_753900654665570_1046066069_a.jpg\",\"id\":\"1588508371\",\"full_name\":\"\"},\"id\":\"962446649029016324\"},{\"created_time\":\"1430583831\",\"text\":\"\\ud83d\\ude0a\",\"from\":{\"username\":\"geyaoxian\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/11203210_832251100188962_1484152822_a.jpg\",\"id\":\"1026707646\",\"full_name\":\"\\u845b\\u8000\\u5148\"},\"id\":\"976130389424978098\"}]},\"filter\":\"Clarendon\",\"created_time\":\"1428315781\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1IUZByo7vP\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"barb1e2u\",\"profile_picture\":\"https:\\/\\/igcdn-photos-d-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/11184633_436852723162235_673116011_a.jpg\",\"id\":\"1543932897\",\"full_name\":\"Barbie\\ud83d\\udc8bWeChat:88315113\\ud83d\\udcf2\"},{\"username\":\"huanglh3o3\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xtf1\\/t51.2885-19\\/11098542_1557115881228953_2108051141_a.jpg\",\"id\":\"1244702090\",\"full_name\":\"\"},{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"lixxin1\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/10724134_1498809703714993_666658303_a.jpg\",\"id\":\"474735109\",\"full_name\":\"\\u674e\\u7d2b\\u6b23\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/s320x320\\/e15\\/11142212_609961145801361_1913577076_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/s150x150\\/e15\\/11142212_609961145801361_1913577076_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/e15\\/11142212_609961145801361_1913577076_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428315781\",\"text\":\"\\u8981\\u56de\\u53bb\\u5566\\uff0c\\u518d\\u89c1\\u5317\\u6d41\\u6cb3\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"957104601967082317\"},\"type\":\"video\",\"id\":\"957104601656703951_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Ludwig\",\"created_time\":\"1428314611\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1ISKRxo7r8\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/11049421_1375007652828983_401355534_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/11049421_1375007652828983_401355534_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/11049421_1375007652828983_401355534_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428314611\",\"text\":\"\\u7075\\u829dget\\u221a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"957094792144337138\"},\"type\":\"image\",\"id\":\"957094791934622460_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Nashville\",\"created_time\":\"1428245860\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1GPBzpo7qW\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s320x320\\/e15\\/11137852_1649834698581861_1050691792_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/s150x150\\/e15\\/11137852_1649834698581861_1050691792_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfa1\\/t51.2885-15\\/e15\\/11137852_1649834698581861_1050691792_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428245860\",\"text\":\"\\u8fd9\\u91cc\\u7684\\u6e05\\u660e\\u662f\\u4e2a\\u5f88\\u91cd\\u8981\\u7684\\u8282\\u65e5\\uff0c\\u5b50\\u5b59\\u4eec\\u90fd\\u4f1a\\u56de\\u6765\\uff0c\\u8dcb\\u5c71\\u6d89\\u6c34\\uff0c\\u7af9\\u6392\\u6e21\\u6c5f\\uff0c\\u8352\\u5c71\\u5bfb\\u8def\\uff0c\\u51ed\\u96c6\\u4f53\\u7684\\u8bb0\\u5fc6\\u5bfb\\u627e\\u5217\\u7956\\u5217\\u5b97\\u7684\\u5b9d\\u5730\\uff0c\\u5bc4\\u54c0\\u601d\\uff0c\\u4e5f\\u6c42\\u798f\\u5fb7\\u3002\\u4e00\\u8def\\u4e0a\\u53ef\\u4ee5\\u542c\\u4ed6\\u4eec\\u5520\\u53e8\\u65e7\\u4e8b\\uff0c\\u4e5f\\u6709\\u8d85\\u7ea7\\u9760\\u8c31\\u7684\\u98ce\\u6c34\\u79d1\\u666e\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"956518065923930728\"},\"type\":\"image\",\"id\":\"956518065739381398_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Mayfair\",\"created_time\":\"1428228071\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1FtGO3I7kN\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/11055751_1573536912901494_1683773508_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/11055751_1573536912901494_1683773508_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/11055751_1573536912901494_1683773508_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428228071\",\"text\":\"\\u4e3a\\u4e86\\u90e8\\u843d\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"956368836446370643\"},\"type\":\"image\",\"id\":\"956368836253432077_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Mayfair\",\"created_time\":\"1428131481\",\"link\":\"https:\\/\\/instagram.com\\/p\\/1C03iPI7hZ\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/11055897_1407191599597961_1763496348_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/11055897_1407191599597961_1763496348_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/11055897_1407191599597961_1763496348_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1428131481\",\"text\":\"\\u5728\\u6e05\\u660e\\u7684\\u5c71\\u8def\\u9047\\u5230\\u4e86\\u5929\\u7136\\u677e\\u9999\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"955558585941866653\"},\"type\":\"image\",\"id\":\"955558585706985561_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Crema\",\"created_time\":\"1427801745\",\"link\":\"https:\\/\\/instagram.com\\/p\\/04_8fwo7gL\\/\",\"likes\":{\"count\":3,\"data\":[{\"username\":\"bo0oo0\",\"profile_picture\":\"https:\\/\\/igcdn-photos-e-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/10507930_301607313382260_661513528_a.jpg\",\"id\":\"51426891\",\"full_name\":\"\"},{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/s320x320\\/e15\\/11123665_1542600796003839_1576473443_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/s150x150\\/e15\\/11123665_1542600796003839_1576473443_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtf1\\/t51.2885-15\\/e15\\/11123665_1542600796003839_1576473443_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1427801745\",\"text\":\"\\u5982\\u679c\\u4f60\\u98de\\u5f97\\u50cf\\u6708\\u4eae\\u8fd9\\u4e48\\u9ad8\\uff0c\\u5c31\\u4e0d\\u4f1a\\u6401\\u6d45\\u5728\\u6811\\u4e0a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"952792555599411873\"},\"type\":\"image\",\"id\":\"952792555389696011_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":22.538938333,\"longitude\":113.92382},\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1425469470\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zzfe7Oo7uc\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"kai_efforts\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11326569_447841455377553_1276311913_a.jpg\",\"id\":\"1319736417\",\"full_name\":\"\\u5f35\\u51f1\\u8317KAI\"},{\"username\":\"yinggg0830\",\"profile_picture\":\"https:\\/\\/igcdn-photos-e-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/11191229_478700095619252_1507412393_a.jpg\",\"id\":\"303041107\",\"full_name\":\"\"},{\"username\":\"aofeixi\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/10899120_578003152334536_1461658615_a.jpg\",\"id\":\"1648133428\",\"full_name\":\"\"},{\"username\":\"ritababe_\",\"profile_picture\":\"https:\\/\\/igcdn-photos-e-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11018358_387855874729324_717730599_a.jpg\",\"id\":\"40610366\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s320x320\\/e15\\/11008101_1593505510894691_369067449_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s150x150\\/e15\\/11008101_1593505510894691_369067449_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/e15\\/11008101_1593505510894691_369067449_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1425469470\",\"text\":\"\\u559c\\u6b22\\u8fd9\\u4e2a\\u5b63\\u8282\\u7684\\u5929\\u7a7a\\uff0c\\u4f60\\u627e\\u4e2a\\u8349\\u576a\\u4e00\\u8eba\\uff0c\\u98de\\u673a\\uff0c\\u98ce\\u7b5d\\uff0c\\u9e1f\\u513f\\u5c31\\u90fd\\u5728\\u4e0a\\u8fb9\\uff0c\\u5929\\u6c14\\u597d\\u65f6\\u8fd8\\u80fd\\u770b\\u5230\\u767d\\u5929\\u7684\\u6708\\u4eae\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"933228012653230637\"},\"type\":\"image\",\"id\":\"933228012418349980_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":23.479396667,\"longitude\":111.271811667},\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1425083565\",\"text\":\"\\u597d\\u60f3\\u5403\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"929990810867579125\"}]},\"filter\":\"Sierra\",\"created_time\":\"1424692998\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zcWez6I7uo\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10958252_1405701033068537_2023890854_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10958252_1405701033068537_2023890854_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10958252_1405701033068537_2023890854_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1424692998\",\"text\":\"\\u5f88\\u591a\\u4e1c\\u897f\\u968f\\u7740\\u6162\\u6162\\u957f\\u5927\\uff0c\\u53d8\\u5f97\\u4e0d\\u50cf\\u5c0f\\u65f6\\u5019\\u90a3\\u6837\\u76fc\\u671b\\u70ed\\u5207\\uff0c\\u6bd4\\u5982\\u5de7\\u514b\\u529b\\u9ea6\\u5f53\\u52b3\\u85af\\u7247\\u96ea\\u7cd5\\u3002\\u53ea\\u6709\\u5bf9\\u62c5\\u5b50\\u7c89\\u7684\\u7231\\u6c38\\u8fdc\\u4e0d\\u53d8\\u7684\\u8bf4\\u2026\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"926714497851439701\"},\"type\":\"image\",\"id\":\"926714497675279272_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1424356143\",\"text\":\"\\u5927\\u5bb6\\u597d\\u6211\\u662f\\u5f71\\u5e1d\\u65af\\u79d1\\u62c9\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"923888749621000808\"}]},\"filter\":\"Normal\",\"created_time\":\"1424320197\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zRPazvI7ol\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"hank_shop\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/11190127_567862313355599_688691834_a.jpg\",\"id\":\"1612494131\",\"full_name\":\"\\u9ad8\\u7ea7\\u73e0\\u5b9d\\u79c1\\u4eba\\u5b9a\\u5236\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10832246_413065338853260_183697882_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10832246_413065338853260_183697882_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10832246_413065338853260_183697882_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1424320197\",\"text\":\"\\u636e\\u8bf4\\u662f\\u4e00\\u5e74\\u4e00\\u5ea6\\u8003\\u9a8c\\u6f14\\u6280\\u7684\\u65f6\\u5019\\u2026\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"923587211736365325\"},\"type\":\"image\",\"id\":\"923587211543427621_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Aden\",\"created_time\":\"1424252263\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zPN2LtI7sT\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/10268927_436139166536328_1377561628_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/10268927_436139166536328_1377561628_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/10268927_436139166536328_1377561628_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1424252263\",\"text\":\"\\u9508\\u8ff9\\u6591\\u6591\\u7684\\u9999\\u7089\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"923017346843654518\"},\"type\":\"image\",\"id\":\"923017346659105555_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1424099803\",\"link\":\"https:\\/\\/instagram.com\\/p\\/zKrDWlo7gZ\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/s320x320\\/e15\\/11008343_410508022446936_713236389_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/s150x150\\/e15\\/11008343_410508022446936_713236389_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpt1\\/t51.2885-15\\/e15\\/11008343_410508022446936_713236389_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1424099803\",\"text\":\"\\u56de\\u8001\\u5bb6\\u4e86\\uff0c\\u5c0f\\u65f6\\u5019\\u8ddf\\u6211\\u6253\\u8fc7\\u73bb\\u7483\\u73e0\\u7684\\u5c0f\\u4f19\\u4f34\\u4eec\\u5462\\uff1f\\u4f60\\u4eec\\u4e00\\u4e2a\\u5728\\u5317\\u4eac\\uff0c\\u4e00\\u4e2a\\u5728\\u5b89\\u5fbd\\uff0c\\u4e00\\u4e2a\\u5728\\u6fb3\\u6d32\\uff0c\\u4e00\\u4e2a\\u6211\\u90fd\\u4e0d\\u77e5\\u9053\\u4e86\\u2026\\u4f46\\u4f60\\u4eec\\u770b\\u5230\\u73bb\\u7483\\u73e0\\u7684\\u65f6\\u5019\\uff0c\\u8981\\u60f3\\u8d77\\u6211\\u6765\\u554a\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"921738420473281180\"},\"type\":\"image\",\"id\":\"921738420162902041_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1422532011\",\"link\":\"https:\\/\\/instagram.com\\/p\\/yb8uaCI7tt\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"hoffy1117\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/10848344_1661033877456607_416512853_a.jpg\",\"id\":\"754263937\",\"full_name\":\"\\ud83c\\udde8\\ud83c\\uddf3Hao.G\\ud83c\\udde8\\ud83c\\uddf3\"},{\"username\":\"zrrff97\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10995234_376996879137889_1932382326_a.jpg\",\"id\":\"460957803\",\"full_name\":\"\"},{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"venus_nan\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xft1\\/t51.2885-19\\/10549834_354763768065767_311951679_a.jpg\",\"id\":\"469639381\",\"full_name\":\"\\ud83d\\udc51\\u6db5baby\\ud83d\\udc51\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10932550_620643038062978_1729442807_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10932550_620643038062978_1729442807_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10932550_620643038062978_1729442807_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1422532011\",\"text\":\"\\u8349\\u5730\\u4e0a\\u9057\\u843d\\u7684\\u978b\\u5b50\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"908586821869615866\"},\"type\":\"image\",\"id\":\"908586821685066605_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1422231801\",\"text\":\"\\u2728 @houuuuuuuuuu\",\"from\":{\"username\":\"callmejamieee\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/11379143_1028356523843961_557603003_a.jpg\",\"id\":\"176277794\",\"full_name\":\"Jamie\"},\"id\":\"906068479900367270\"}]},\"filter\":\"Lo-fi\",\"created_time\":\"1421930605\",\"link\":\"https:\\/\\/instagram.com\\/p\\/yKBopho7mX\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/891532_1563899373855738_1180535181_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/891532_1563899373855738_1180535181_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/891532_1563899373855738_1180535181_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1421930605\",\"text\":\"\\u6709\\u4f4d\\u5f88\\u4e45\\u6ca1\\u8054\\u7cfb\\u7684\\u670b\\u53cb\\u5bc4\\u6765\\u660e\\u4fe1\\u7247\\uff0c\\u8bf4\\uff1a\\u6211\\u5f88\\u5c11\\u770b\\u5230\\u6d77\\uff0c\\u6b63\\u5982\\u4f60\\u6ca1\\u89c1\\u8fc7\\u51e0\\u6b21\\u96ea\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"903541867174672911\"},\"type\":\"image\",\"id\":\"903541866654579095_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1421601776\",\"link\":\"https:\\/\\/instagram.com\\/p\\/yAOcawI7pA\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10005439_338105566394046_854247264_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10005439_338105566394046_854247264_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10005439_338105566394046_854247264_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1421601776\",\"text\":\"\\u6df1\\u591c\\u603b\\u662f\\u7075\\u611f\\u4e4d\\u73b0\\u7684\\u6700\\u4f73\\u65f6\\u671f\\uff0c\\u53ea\\u662f\\u51e0\\u4e2a\\u8bbe\\u8ba1\\u65b9\\u6848\\u90fd\\u6ca1\\u6cd5\\u4f7f\\u81ea\\u5df1\\u6ee1\\u610f\\u3002\\u7d2f\\u4e86\\u6253\\u5f00\\u7a97\\u770b\\u5230\\u5929\\u4e0a\\u6709\\u4e2a\\u5927\\u6708\\u4eae\\uff0c\\u53ea\\u60f3\\u7528\\u56fe\\u7ae0\\u5de5\\u5177\\u628a\\u5b83\\u5e72\\u6389\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"900783451389803192\"},\"type\":\"image\",\"id\":\"900783450995538496_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1421378982\",\"text\":\"\\u8fd9\\u662f\\u85b0\\u8863\\u8349\\u4e48\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"898914514733611565\"},{\"created_time\":\"1421601128\",\"text\":\"@whitebadwind \\u4e0d\\u77e5\\u9053\\u4ec0\\u4e48\\u82b1\\uff0c\\u4f46\\u5e94\\u8be5\\u4e0d\\u662f\\u85b0\\u8863\\u8349\\uff0c\\u6728\\u6709\\u9999\\u5473\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"900778013826988166\"}]},\"filter\":\"Normal\",\"created_time\":\"1421370258\",\"link\":\"https:\\/\\/instagram.com\\/p\\/x5U25kI7sN\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"nwheather\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_1018712769_75sq_1390664966.jpg\",\"id\":\"1018712769\",\"full_name\":\"Heather Hynes\"},{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"dingstyle\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_30683156_75sq_1333592929.jpg\",\"id\":\"30683156\",\"full_name\":\"Linjie\"},{\"username\":\"candychang1113\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10725077_1498470533762845_1695396371_a.jpg\",\"id\":\"1133304108\",\"full_name\":\"Candy Chang\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10903312_693622147425934_1766884651_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10903312_693622147425934_1766884651_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10903312_693622147425934_1766884651_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1421370258\",\"text\":\"\\u9762\\u671d\\u5927\\u6d77\\u51ac\\u6696\\u82b1\\u5f00\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"898841334497130569\"},\"type\":\"image\",\"id\":\"898841334228695821_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1421235225\",\"link\":\"https:\\/\\/instagram.com\\/p\\/x1TTZUo7gW\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10914460_1546003772305181_1301162053_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10914460_1546003772305181_1301162053_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10914460_1546003772305181_1301162053_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1421235225\",\"text\":\"\\u5206\\u4eab\\u65e5\\u5e38\\u4e0d\\u6b63\\u5e38\\u751f\\u6d3b\\u7167\\u4e00\\u5f20\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"897708596666809269\"},\"type\":\"image\",\"id\":\"897708596473870358_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Normal\",\"created_time\":\"1420456723\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xeGbWuo7if\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"sleepgo\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/10296686_814576801887247_861033020_a.jpg\",\"id\":\"332373544\",\"full_name\":\"Tony H\"},{\"username\":\"panpanbiu\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/11190893_828079227246904_2044492120_a.jpg\",\"id\":\"299823572\",\"full_name\":\"PANPAN\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s320x320\\/e15\\/10903277_832760670116494_255352239_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/s150x150\\/e15\\/10903277_832760670116494_255352239_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xta1\\/t51.2885-15\\/e15\\/10903277_832760670116494_255352239_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1420456723\",\"text\":\"\\u5176\\u5b9e\\u6211\\u60f3\\uff0c\\u90a3\\u4e9b\\u53e4\\u8001\\u7684\\u6e14\\u6c11\\u4eec\\uff0c\\u6bcf\\u5929\\u770b\\u7740\\u6d77\\u5cb8\\u7ebf\\u7684\\u65e5\\u843d\\u65e5\\u51fa\\uff0c\\u80af\\u5b9a\\u662f\\u6709\\u4eba\\u60f3\\u8fc7\\u5730\\u7403\\u662f\\u5706\\u7684\\u3002\\u800c\\u201c\\u60f3\\u6cd5\\u201d\\u4e0e\\u201c\\u8bc1\\u660e\\u201d\\u4e4b\\u95f4\\uff0c\\u5374\\u8de8\\u8d8a\\u4e86\\u4e00\\u6574\\u6761\\u9ea6\\u54f2\\u4f26\\u822a\\u9053\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"891178044837051035\"},\"type\":\"image\",\"id\":\"891178044375677087_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":{\"latitude\":22.100710837,\"name\":\"\\u73e0\\u6d77\\u957f\\u9686\\u6d77\\u6d0b\\u738b\\u56fd Zhuhai Chimelong Ocean Kingdom\",\"longitude\":113.535968094,\"id\":259203746},\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1420249250\",\"text\":\"\\u8fd9\\u9c7c\\u597d\\u56e7\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"889437634154445764\"},{\"created_time\":\"1420455887\",\"text\":\"@whitebadwind \\u5927\\u732b\\u4f1a\\u559c\\u6b22\\u7684\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"891171033185499457\"}]},\"filter\":\"Normal\",\"created_time\":\"1420241506\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xXr70fI7iD\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s320x320\\/e15\\/924083_1539057536347062_2062767438_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/s150x150\\/e15\\/924083_1539057536347062_2062767438_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpf1\\/t51.2885-15\\/e15\\/924083_1539057536347062_2062767438_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1420241506\",\"text\":\"\\u9c7c\\u5c71\\u9c7c\\u6d77\\u4e2d\\uff0c\\u53ea\\u6709\\u4f60\\uff0c\\u80af\\u5b89\\u9759\\u7684\\u8db4\\u572865\\u5398\\u7c73\\u539a\\u7684\\u4e9a\\u514b\\u529b\\u677f\\u5b50\\u4e0a\\u4e0e\\u6211\\u5408\\u5f71\\uff0c\\u5927\\u4e11\\u9c7c\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"889372678713227478\"},\"type\":\"image\",\"id\":\"889372678235076739_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Hefe\",\"created_time\":\"1420118795\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xUB4dOI7g1\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10890944_765121966897759_2039585477_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10890944_765121966897759_2039585477_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10890944_765121966897759_2039585477_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1420118795\",\"text\":\"\\u65b0\\u5e74\\u5355\\u4eba\\u65c5\\u884c\\u8d70\\u8d77\\u3002\\u5176\\u5b9e\\u4ece\\u4e5d\\u6d32\\u6e2f\\u7801\\u5934\\u5f00\\u59cb\\uff0c\\u73e0\\u6d77\\u5e76\\u6ca1\\u6709\\u7ed9\\u4eba\\u5f88\\u60ca\\u559c\\u7684\\u611f\\u89c9\\uff0c\\u5305\\u62ec\\u76db\\u540d\\u4e4b\\u4e0b\\u7684\\u6cbf\\u6d77\\u98ce\\u5149\\u4e0e\\u6e14\\u5973\\u96d5\\u5851\\u3002\\u5012\\u662f\\u4ea4\\u901a\\u4e0d\\u901a\\u7545\\uff0c\\u4ece\\u8f6e\\u6e21\\u5230\\u516c\\u4ea4\\u90fd\\u7ed9\\u6211\\u5e26\\u6765\\u4e86\\u8bb8\\u591a\\u9ebb\\u70e6\\u3002\\u76f4\\u5230\\uff0c\\u665a\\u4e0a\\u5403\\u70e4\\u751f\\u869d\\u7684\\u7b2c\\u4e00\\u53e3\\uff0c\\u6211\\u53c8\\u89c9\\u5f97\\u4ec0\\u4e48\\u4e8b\\u60c5\\u90fd\\u662f\\u53ef\\u4ee5\\u539f\\u8c05\\u7684\\u2026\\u2026\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"888343304673147100\"},\"type\":\"image\",\"id\":\"888343304211773493_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Unknown\",\"created_time\":\"1420028793\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xRWN47I7pW\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},{\"username\":\"elkakosmoss\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11235915_926324447432373_299446423_a.jpg\",\"id\":\"515503821\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10899183_999582293404177_745539859_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10899183_999582293404177_745539859_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10899183_999582293404177_745539859_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1420028793\",\"text\":\"2014\\u5e74\\u6700\\u540e\\u7684\\u9633\\u5149\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"887588313553418897\"},\"type\":\"image\",\"id\":\"887588313066879574_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1419956909\",\"text\":\"life is art. happy new year! kitty!\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"886985301730507751\"},{\"created_time\":\"1420000813\",\"text\":\"@whitebadwind \\u5143\\u65e6\\u5feb\\u4e50\\uff01\\u5343\\u4e07\\u8bb0\\u5f97\\u8981\\u628a\\u6050\\u9f99\\u670d\\u7a7f\\u4e0a\\uff01\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"887353597667556016\"}]},\"filter\":\"Rise\",\"created_time\":\"1419945664\",\"link\":\"https:\\/\\/instagram.com\\/p\\/xO3qREI7iW\\/\",\"likes\":{\"count\":0,\"data\":[]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xat1\\/t51.2885-15\\/s320x320\\/e15\\/10894909_702627706517406_1277557620_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xat1\\/t51.2885-15\\/s150x150\\/e15\\/10894909_702627706517406_1277557620_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xat1\\/t51.2885-15\\/e15\\/10894909_702627706517406_1277557620_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1419945664\",\"text\":\"\\u6700\\u540e\\u4e00\\u8282\\u5409\\u4ed6\\u8bfe\\u7ed3\\u675f\\u540e\\uff0c\\u9a6c\\u8def\\u4e0a\\u90a3\\u98ce\\u4e00\\u76f4\\u5439\\uff0c\\u624d\\u611f\\u89c9\\u5357\\u65b9\\u7684\\u51ac\\u5929\\u7ec8\\u4e8e\\u662f\\u6765\\u4e86\\u3002\\u5176\\u5b9e\\u5409\\u4ed6\\u5728\\u51ac\\u5929\\u4f1a\\u6709\\u8bb8\\u591a\\u795e\\u5947\\u7684\\u4e8b\\u60c5\\u3002\\u6bd4\\u5982\\u7434\\u5f26\\u5982\\u808c\\u8089\\u4e00\\u6837\\u56e0\\u51b7\\u800c\\u7d27\\u7ef7\\uff0c\\u53d1\\u51fa\\u6bd4\\u4ee5\\u5f80\\u6c89\\u95f7\\u7684\\u4f4e\\u8bed\\uff1b\\u800c\\u7a7a\\u65f7\\u7684\\u5927\\u6559\\u5ba4\\u91cc\\uff0c\\u5982\\u6709\\u5176\\u4ed6\\u540c\\u4f34\\u62e8\\u54cd\\u548c\\u5f26\\uff0c\\u624b\\u4e2d\\u672c\\u5df2\\u6309\\u706d\\u7684\\u7434\\u5f26\\u53c8\\u4f1a\\u56e0\\u5171\\u9e23\\u5fae\\u5fae\\u98a4\\u52a8\\u3002\\u50cf\\u6709\\u751f\\u547d\\u4e00\\u6837\\u3002\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"886890974224300917\"},\"type\":\"image\",\"id\":\"886890973737760918_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":5,\"data\":[{\"created_time\":\"1417442768\",\"text\":\"\\u554a\\u96be\\u9053\\u4e0d\\u662f\\u7d2b\\u8346\\uff1f\",\"from\":{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},\"id\":\"865895159683070128\"},{\"created_time\":\"1417475301\",\"text\":\"\\u597d\\u6f02\\u4eae\\u554a \\u7c89\\u8272\\u7684\\u82b1\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"866168069916179297\"},{\"created_time\":\"1417833120\",\"text\":\"\\ud83c\\udf40\\ud83c\\udf40\",\"from\":{\"username\":\"h.cmzsq\",\"profile_picture\":\"https:\\/\\/igcdn-photos-e-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/11084897_1407176502933692_1292814398_a.jpg\",\"id\":\"244993178\",\"full_name\":\"\\ud83d\\ude4f\"},\"id\":\"869169669249153672\"},{\"created_time\":\"1419333148\",\"text\":\"incredible @color_blocker\",\"from\":{\"username\":\"jiawenlii\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/11093081_735702273195569_1381487601_a.jpg\",\"id\":\"174509764\",\"full_name\":\"\\u5609\\u6587\"},\"id\":\"881752815517808693\"},{\"created_time\":\"1419333206\",\"text\":\"\\ud83d\\ude0a @nicoledaii\",\"from\":{\"username\":\"lawrencens\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11334406_920682824640599_2112492465_a.jpg\",\"id\":\"398977802\",\"full_name\":\"LIQIANLONG\"},\"id\":\"881753305378961490\"}]},\"filter\":\"Normal\",\"created_time\":\"1417442257\",\"link\":\"https:\\/\\/instagram.com\\/p\\/wEQykeo7tU\\/\",\"likes\":{\"count\":4,\"data\":[{\"username\":\"cicici_ton\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10632351_1431817843781696_881928506_a.jpg\",\"id\":\"790581808\",\"full_name\":\"\\u4f5f_\\u5b63\\u521d\"},{\"username\":\"t________.y\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/11203194_820402394704713_1736313100_a.jpg\",\"id\":\"1456056098\",\"full_name\":\"Tiffany\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"},{\"username\":\"dannisdannis\",\"profile_picture\":\"https:\\/\\/igcdn-photos-d-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/10005570_1418618885099779_1080129947_a.jpg\",\"id\":\"1536730862\",\"full_name\":\"Dannis\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10831989_483313928477468_40906631_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10831989_483313928477468_40906631_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10831989_483313928477468_40906631_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1417442257\",\"text\":\"\\u6709\\u68f5\\u4e11\\u6811\\uff0c\\u6211\\u7ecf\\u5e38\\u53bb\\u770b\\uff0c\\u53c8\\u80d6\\u53c8\\u6b6a\\uff0c\\u79c3\\u5f97\\u53ef\\u7b11\\u3002\\u5728\\u53d8\\u51b7\\u7684\\u4e00\\u5929\\uff0c\\u5b83\\u7a81\\u7136\\u5c31\\u5f00\\u82b1\\u4e86\\u3002\\u51ac\\u5929\\u7684\\u82b1\\u6211\\u77e5\\u9053\\u5f97\\u5f88\\u5c11\\uff0c\\u5357\\u65b9\\u6ca1\\u6709\\u6885\\u82b1\\uff0c\\u90a3\\u5c31\\u662f\\u5f02\\u6728\\u68c9\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"865890872693341013\"},\"type\":\"image\",\"id\":\"865890872248744788_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1415725886\",\"text\":\"\\u8fd9\\u4e2a\\u592a\\u5389\\u5bb3\\u4e86\\u5427\\uff01\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"851492912496883814\"},{\"created_time\":\"1417137485\",\"text\":\"\\ud83d\\udc4d @color_blocker\",\"from\":{\"username\":\"onelai_kk\",\"profile_picture\":\"https:\\/\\/igcdn-photos-d-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11241982_817407918337387_1779316028_a.jpg\",\"id\":\"1289579257\",\"full_name\":\"instagram\\u4e13\\u4e1a\\u670d\\u52d9\\ud83d\\udc8d\\ud83d\\udc8d\\ud83d\\udc96\\ud83d\\udc96\\ud83d\\udc96\\u2728\\u2728\\u2728\"},\"id\":\"863334257859475861\"}]},\"filter\":\"Walden\",\"created_time\":\"1415683797\",\"link\":\"https:\\/\\/instagram.com\\/p\\/vP2ywuo7pq\\/\",\"likes\":{\"count\":5,\"data\":[{\"username\":\"_llpsssss\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11232835_794856153954569_504179174_a.jpg\",\"id\":\"236870082\",\"full_name\":\"Beijing\\ud83c\\udde8\\ud83c\\uddf3UK\\ud83c\\uddec\\ud83c\\udde7\\ud83d\\udc96\"},{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"faifaifai99\",\"profile_picture\":\"https:\\/\\/igcdn-photos-b-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/11098264_102231303441561_1493195010_a.jpg\",\"id\":\"473489307\",\"full_name\":\"\"},{\"username\":\"sasanzuo\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_235236445_75sq_1393055700.jpg\",\"id\":\"235236445\",\"full_name\":\"\\u8428\\u6851\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s320x320\\/e15\\/10784965_1518537748403855_176956695_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s150x150\\/e15\\/10784965_1518537748403855_176956695_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/e15\\/10784965_1518537748403855_176956695_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1415683797\",\"text\":\"\\u901a\\u7075\\u4e4b\\u672f\\uff01\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"851139843175201387\"},\"type\":\"image\",\"id\":\"851139837403839082_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Valencia\",\"created_time\":\"1415182653\",\"link\":\"https:\\/\\/instagram.com\\/p\\/vA68BLo7tN\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10735195_1505939246340704_1984926778_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10735195_1505939246340704_1984926778_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10735195_1505939246340704_1984926778_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1415182653\",\"text\":\"\\u73b0\\u573a\\u6c14\\u6c1b\\u679c\\u7136\\u4e0d\\u4e00\\u6837\\uff0c\\u9a6c\\u4e0a\\u5c31\\u53ef\\u4ee5\\u770b\\u5230\\u5c0f\\u4f1e\\u5728\\u5927\\u54e5\\u80ef\\u4e0b\\u75af\\u72c2\\u8f93\\u51fa\\u2026\\u662f\\u65f6\\u5019\\u6765\\u9996\\u9009\\u4e00\\u8bb0\\u8587\\u6069\\u4e86\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"846935942288882458\"},\"type\":\"image\",\"id\":\"846935941080922957_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1415116538\",\"text\":\"@litten225 \\u76f8\\u5f53\\u7ec6\\u817b\\u7684\\u4e66\\u554a\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"846381329076697864\"}]},\"filter\":\"Unknown\",\"created_time\":\"1415010755\",\"link\":\"https:\\/\\/instagram.com\\/p\\/u7zEVxo7vw\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"dingstyle\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_30683156_75sq_1333592929.jpg\",\"id\":\"30683156\",\"full_name\":\"Linjie\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s320x320\\/e15\\/10747711_429336373885590_422028037_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/s150x150\\/e15\\/10747711_429336373885590_422028037_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xfp1\\/t51.2885-15\\/e15\\/10747711_429336373885590_422028037_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1415010755\",\"text\":\"\\u6709\\u670b\\u53cb\\u8ddf\\u6211\\u8bf4\\uff0c\\u632a\\u5a01\\u7684\\u68ee\\u6797\\u6839\\u672c\\u770b\\u4e0d\\u4e0b\\u53bb\\uff1b\\u53c8\\u6709\\u670b\\u53cb\\u8bf4\\uff0c\\u770b\\u8fd9\\u4e66\\u4e00\\u53d1\\u4e0d\\u53ef\\u6536\\u62fe\\u3002\\u5dee\\u522b\\u597d\\u5927\\u5440\\uff01\\u6211\\u5012\\u89c9\\u5f97\\u6709\\u4e2a\\u7b80\\u5355\\u7684\\u65b9\\u6cd5\\uff1a\\u7ffb\\u5230\\u5f00\\u7bc7\\u7684\\u8fd9\\u51e0\\u4e2a\\u5b57\\uff0c\\u5982\\u679c\\u5fc3\\u4e2d\\u4e00\\u7d27\\uff0c\\u90a3\\u5c31\\u8bf4\\u660e\\u8fd9\\u672c\\u4e66\\u9002\\u5408\\u4f60\\uff0c\\u5426\\u5219\\u8bf7\\u5f03\\u4e4b\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"845493955538958871\"},\"type\":\"image\",\"id\":\"845493953693465584_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":2,\"data\":[{\"created_time\":\"1414650783\",\"text\":\"cute!\",\"from\":{\"username\":\"zhengezhao\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xfp1\\/t51.2885-19\\/10727551_282259975296534_305711726_a.jpg\",\"id\":\"1531642371\",\"full_name\":\"Zhenge Zhao\"},\"id\":\"842474292689222356\"},{\"created_time\":\"1414759282\",\"text\":\"\\ud83c\\udd92 @zhaolei395395\",\"from\":{\"username\":\"tearpkc\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10611023_1535665483313234_214736228_a.jpg\",\"id\":\"1476911167\",\"full_name\":\"\"},\"id\":\"843384447673023032\"}]},\"filter\":\"Hefe\",\"created_time\":\"1414579138\",\"link\":\"https:\\/\\/instagram.com\\/p\\/uu70zJo7qb\\/\",\"likes\":{\"count\":5,\"data\":[{\"username\":\"cachiulee\",\"profile_picture\":\"https:\\/\\/igcdn-photos-h-a.akamaihd.net\\/hphotos-ak-xfa1\\/t51.2885-19\\/11377676_692543867516879_1892210321_a.jpg\",\"id\":\"951795449\",\"full_name\":\"Tonnie Cox's new ins ac\"},{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"fanghonglia292\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xpa1\\/t51.2885-19\\/10518268_489599821175797_494026352_a.jpg\",\"id\":\"1451952020\",\"full_name\":\"Fanghonglia292\"},{\"username\":\"olivia__cyrus\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10802807_762277510528189_2055295258_a.jpg\",\"id\":\"619274757\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s320x320\\/e15\\/10735112_730529873702428_413107753_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/s150x150\\/e15\\/10735112_730529873702428_413107753_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xpa1\\/t51.2885-15\\/e15\\/10735112_730529873702428_413107753_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1414579138\",\"text\":\"\\u5929\\u4e0b\\u7684\\u5c0f\\u997c\\u5e72\\u9047\\u5230\\u6211\\uff0c\\u8c8c\\u4f3c\\u5c31\\u53ea\\u6709\\u4e00\\u79cd\\u4e0b\\u573a\\uff01\\uff01\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"841873294635546895\"},\"type\":\"image\",\"id\":\"841873293444364955_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Earlybird\",\"created_time\":\"1413561977\",\"link\":\"https:\\/\\/instagram.com\\/p\\/uQnvluo7sK\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"wallbase.hd\",\"profile_picture\":\"https:\\/\\/igcdn-photos-g-a.akamaihd.net\\/hphotos-ak-xpf1\\/t51.2885-19\\/10617029_283951291805046_1229690122_a.jpg\",\"id\":\"1489501811\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s320x320\\/e15\\/10725177_573652486072155_1401604216_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/s150x150\\/e15\\/10725177_573652486072155_1401604216_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xtp1\\/t51.2885-15\\/e15\\/10725177_573652486072155_1401604216_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1413561977\",\"text\":\"\\u4e00\\u4e2a\\u4eba\\uff0c\\u4e00\\u652f\\u53e3\\u7434\\uff0c\\u4e00\\u7247\\u6d77\\uff0c\\u4e00\\u74f6\\u9152\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"833340726864755382\"},\"type\":\"image\",\"id\":\"833340725203811082_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1413394943\",\"text\":\"cool  @gaoxiaobao_\",\"from\":{\"username\":\"accoo7\",\"profile_picture\":\"https:\\/\\/igcdn-photos-f-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10570213_329504053891349_1283692450_a.jpg\",\"id\":\"287433724\",\"full_name\":\"\"},\"id\":\"831939546255178477\"}]},\"filter\":\"Valencia\",\"created_time\":\"1413391668\",\"link\":\"https:\\/\\/instagram.com\\/p\\/uLi56Wo7oO\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10724868_302191016652312_2097904817_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10724868_302191016652312_2097904817_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10724868_302191016652312_2097904817_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1413391668\",\"text\":\"\\u300a\\u8bba\\u591c\\u5f52\\uff0c\\u6253\\u7684\\uff0c\\u4ee5\\u53ca\\u53d1\\u7968\\u7684\\u6b63\\u786e\\u7528\\u6cd5\\u300b\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"831912071466826589\"},\"type\":\"image\",\"id\":\"831912069428394510_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":0,\"data\":[]},\"filter\":\"Rise\",\"created_time\":\"1413163642\",\"link\":\"https:\\/\\/instagram.com\\/p\\/uEv-tCo7rJ\\/\",\"likes\":{\"count\":1,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s320x320\\/e15\\/10731727_461314204008708_386749273_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/s150x150\\/e15\\/10731727_461314204008708_386749273_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xap1\\/t51.2885-15\\/e15\\/10731727_461314204008708_386749273_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1413163642\",\"text\":\"\\u7ae5\\u5e74\\u771f\\u597d\\u3002\\u6211\\u4ee5\\u540e\\u4e00\\u5b9a\\u4e0d\\u8981\\u8ddf\\u5b69\\u5b50\\u8bf4\\uff1a\\u5e0c\\u671b\\u4f60\\u5feb\\u9ad8\\u957f\\u5927\\u8fd9\\u79cd\\u50bb\\u8bdd\\u2026\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"829999248859969681\"},\"type\":\"image\",\"id\":\"829999248499260105_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}},{\"attribution\":null,\"tags\":[],\"location\":null,\"comments\":{\"count\":1,\"data\":[{\"created_time\":\"1412404756\",\"text\":\"\\ud83d\\udc4dGOOD\",\"from\":{\"username\":\"somnusresia\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xaf1\\/t51.2885-19\\/11380897_1586097328311216_1597361628_a.jpg\",\"id\":\"249391877\",\"full_name\":\"Somnus Wen\"},\"id\":\"823633252150655824\"}]},\"filter\":\"Valencia\",\"created_time\":\"1411652721\",\"link\":\"https:\\/\\/instagram.com\\/p\\/tXuIHso7qK\\/\",\"likes\":{\"count\":2,\"data\":[{\"username\":\"yenny227\",\"profile_picture\":\"https:\\/\\/igcdn-photos-c-a.akamaihd.net\\/hphotos-ak-xta1\\/t51.2885-19\\/10919302_830832643620050_701907926_a.jpg\",\"id\":\"268912251\",\"full_name\":\"\"},{\"username\":\"cherrymomo412\",\"profile_picture\":\"https:\\/\\/igcdn-photos-a-a.akamaihd.net\\/hphotos-ak-xap1\\/t51.2885-19\\/10802961_759165964121336_488483054_a.jpg\",\"id\":\"54007423\",\"full_name\":\"cherrymomo\"}]},\"images\":{\"low_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s320x320\\/e15\\/10616983_1382591478697855_2107473552_n.jpg\",\"width\":320,\"height\":320},\"thumbnail\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/s150x150\\/e15\\/10616983_1382591478697855_2107473552_n.jpg\",\"width\":150,\"height\":150},\"standard_resolution\":{\"url\":\"https:\\/\\/scontent.cdninstagram.com\\/hphotos-xaf1\\/t51.2885-15\\/e15\\/10616983_1382591478697855_2107473552_n.jpg\",\"width\":640,\"height\":640}},\"users_in_photo\":[],\"caption\":{\"created_time\":\"1411652721\",\"text\":\"\\u6211\\u7684\\u597d\\u670b\\u53cb\\u2014\\u2014\\u8d85\\u7ea7\\u9ad8\\u51b7\\u8d85\\u7ea7\\u78e8\\u4eba\\u7684\\u4e1d\\u74dc\",\"from\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"},\"id\":\"817324726096738307\"},\"type\":\"image\",\"id\":\"817324725551479434_438522285\",\"user\":{\"username\":\"litten225\",\"profile_picture\":\"https:\\/\\/instagramimages-a.akamaihd.net\\/profiles\\/profile_438522285_75sq_1393602208.jpg\",\"id\":\"438522285\",\"full_name\":\"litten\"}}]}","date":"2015-11-19T07:50:44.548Z","updated":"2015-11-19T07:50:44.548Z","path":"instagram/ins0.json","layout":"false","title":"","comments":1,"_id":"cih8q8rmt0006r8uj3tq2rih4"},{"layout":"post","slug":"instagram","title":"相册","noDate":"true","comments":0,"_content":"\n<div class=\"instagram\" data-client-id=\"956dd096b6e5496aba6662165b9b8443\">\n\t<a href=\"http://instagram.com/litten225\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>","source":"instagram/index.ejs","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\ncomments: false\n---\n\n<div class=\"instagram\" data-client-id=\"956dd096b6e5496aba6662165b9b8443\">\n\t<a href=\"http://instagram.com/litten225\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>","date":"2015-11-19T07:50:44.548Z","updated":"2015-11-19T07:50:44.548Z","path":"instagram/index.html","_id":"cih8q8rmv0007r8uj78mhtz47"},{"layout":"about","title":"赞助","noDate":"true","comments":1,"_content":"\n## **爱心赞助**\n\n---\n\n欢迎来到由博主刘帝伟维护的 AirHax-Notes blog...\n\n\n- 如果您觉得本博客对您有帮助，那么来捐献点爱心吧^\\_^，一分一毛都是支持，在此，先衷心的谢过啦。\n\n\n### **赞助方式：**\n\n- 支付宝账号（liudiwei18@sina.com）\n- 微信(Devin_hippo)\n- 或直接扫二维码捐助。\n\n<image style=\"border:0px\" width=\"800\" src=\"/assets/images/denote.jpg\"/>\n\n\n\n","source":"donation/index.md","raw":"---\nlayout: about\ntitle: \"赞助\"\nnoDate: \"true\"\ncomments: true\n---\n\n## **爱心赞助**\n\n---\n\n欢迎来到由博主刘帝伟维护的 AirHax-Notes blog...\n\n\n- 如果您觉得本博客对您有帮助，那么来捐献点爱心吧^\\_^，一分一毛都是支持，在此，先衷心的谢过啦。\n\n\n### **赞助方式：**\n\n- 支付宝账号（liudiwei18@sina.com）\n- 微信(Devin_hippo)\n- 或直接扫二维码捐助。\n\n<image style=\"border:0px\" width=\"800\" src=\"/assets/images/denote.jpg\"/>\n\n\n\n","date":"2015-11-19T07:50:44.541Z","updated":"2015-11-19T07:50:44.541Z","path":"donation/index.html","_id":"cih8q8rmy0008r8ujwz7455qa"},{"title":"categories","date":"2015-10-19T03:27:29.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-10-19 11:27:29\ntype: \"categories\"\ncomments: false\n---\n","updated":"2015-11-19T07:50:44.540Z","path":"categories/index.html","layout":"page","_id":"cih8q8rn00009r8ujyvw1b11q"},{"layout":"about","title":"关于我","noDate":"true","comments":1,"_content":"\n\n欢迎来到 D.W's Diary，此博客由博主D.W维护。\n\n坐标：长沙，90后，男。\n  \n博主是一枚行走在ML界的CSU在读硕士，数学出生，研究方向为机器学习和数据挖掘，长期关注机器学习、数据挖掘和人工智能领域。之前扎根于[CSDN](http://blog.csdn.net/dream_angel_z)，但总有一种缺乏归属感的不快，一心总想着找一个属于自己的平台，然后好好学习（提升自己的逼格嘛 ^\\_^）。虽然博主并非前端出生，但作为一名热爱技术的学者，对前端的知识也是略知一二，大大小小的网站也做过不少。所以，经过一番折腾之后，这个博客也就诞生了。事实上，在博客的搭建过程中，博主的经历也是够呛的。起初，使用WordPress搭建了一个博客，而且还花了上百元买了个虚拟主机，不幸的是其访问速度真心难以满足博主急切的心呐，最终下定决心将博客搬至GitHub。这个博客是使用Hexo搭建的，纯静态博客（100%，绝对是24K），访问速度也真是没话说呀，而且现在使用的这个主题，真的很干净，很精简，风格深受博主喜爱呀，因此我将其命名为FreeSky。所以，我慎重决定了，以后就在这里安家啦！博客的内容将包括我的学习、生活以及情感等各个方面，俗话说“一份耕耘一份收获”，算是督促自己吧，哈哈，好好加油吧！^_^...\n\n---\n\n<div style=\"width:100%;font-weight:bold;font-size:17px;padding-bottom:10px;\">喜欢·爱</div>  摄影、看电影、听歌、看书、咖啡、牛排、意面、奶茶、羊岩勾青、绿茶、花茶、香蕉、火龙果、苹果、草莓、蓝莓、花生米、三月泡、唱Ｋ、乒乓、爬山、溜冰、游泳、象棋、跑步、散步、轻音乐、Markdown、Google学术、Wikipedia、YouTube、豆瓣、新浪微博、算法、Python、数学、Java、C++、Leetcode、CSDN、Github、ML、DM、Linux、真三、英雄杀、POI、Vampire Diary、SPN、Arrow、张国荣、刘德华、舒畅、Beyond、乔布斯、Andrew.Ng、小小、长沙、吉首、蓝色、白色、橘黄色、Photoshop、绘声绘影、足记、写日记、3月、思考、发呆、大学、511 etc.\n\n其实博主喜欢的东西还是挺多的，无聊的时候还喜欢折腾博客，但喜欢归喜欢呀，事实上，博主也是一个“宅男”袄,真的,没骗你！\n\n<div style=\"width:100%;font-weight:bold;font-size:17px;padding-bottom:10px;\">不喜欢·弃</div>博主生平最不喜欢的就是吵架吧，不仅影响心情，这东西还会传染给别人，不好，不好。于我而言，似乎更适合用这句话来形容我的心态——“忍一时风平浪静，退一步海阔天空”.\n\n---\n\n如果你有什么好的建议，请留言，或是QQ联系我，又或是发Email吧！\n\nQ Q： 466454368\t  \t  \nEmail： [csu.ldw@csu.edu.cn](mailto:csu.ldw@csu.edu.cn) \n","source":"about/index.md","raw":"---\nlayout: about\ntitle: \"关于我\"\nnoDate: \"true\"\ncomments: true\n---\n\n\n欢迎来到 D.W's Diary，此博客由博主D.W维护。\n\n坐标：长沙，90后，男。\n  \n博主是一枚行走在ML界的CSU在读硕士，数学出生，研究方向为机器学习和数据挖掘，长期关注机器学习、数据挖掘和人工智能领域。之前扎根于[CSDN](http://blog.csdn.net/dream_angel_z)，但总有一种缺乏归属感的不快，一心总想着找一个属于自己的平台，然后好好学习（提升自己的逼格嘛 ^\\_^）。虽然博主并非前端出生，但作为一名热爱技术的学者，对前端的知识也是略知一二，大大小小的网站也做过不少。所以，经过一番折腾之后，这个博客也就诞生了。事实上，在博客的搭建过程中，博主的经历也是够呛的。起初，使用WordPress搭建了一个博客，而且还花了上百元买了个虚拟主机，不幸的是其访问速度真心难以满足博主急切的心呐，最终下定决心将博客搬至GitHub。这个博客是使用Hexo搭建的，纯静态博客（100%，绝对是24K），访问速度也真是没话说呀，而且现在使用的这个主题，真的很干净，很精简，风格深受博主喜爱呀，因此我将其命名为FreeSky。所以，我慎重决定了，以后就在这里安家啦！博客的内容将包括我的学习、生活以及情感等各个方面，俗话说“一份耕耘一份收获”，算是督促自己吧，哈哈，好好加油吧！^_^...\n\n---\n\n<div style=\"width:100%;font-weight:bold;font-size:17px;padding-bottom:10px;\">喜欢·爱</div>  摄影、看电影、听歌、看书、咖啡、牛排、意面、奶茶、羊岩勾青、绿茶、花茶、香蕉、火龙果、苹果、草莓、蓝莓、花生米、三月泡、唱Ｋ、乒乓、爬山、溜冰、游泳、象棋、跑步、散步、轻音乐、Markdown、Google学术、Wikipedia、YouTube、豆瓣、新浪微博、算法、Python、数学、Java、C++、Leetcode、CSDN、Github、ML、DM、Linux、真三、英雄杀、POI、Vampire Diary、SPN、Arrow、张国荣、刘德华、舒畅、Beyond、乔布斯、Andrew.Ng、小小、长沙、吉首、蓝色、白色、橘黄色、Photoshop、绘声绘影、足记、写日记、3月、思考、发呆、大学、511 etc.\n\n其实博主喜欢的东西还是挺多的，无聊的时候还喜欢折腾博客，但喜欢归喜欢呀，事实上，博主也是一个“宅男”袄,真的,没骗你！\n\n<div style=\"width:100%;font-weight:bold;font-size:17px;padding-bottom:10px;\">不喜欢·弃</div>博主生平最不喜欢的就是吵架吧，不仅影响心情，这东西还会传染给别人，不好，不好。于我而言，似乎更适合用这句话来形容我的心态——“忍一时风平浪静，退一步海阔天空”.\n\n---\n\n如果你有什么好的建议，请留言，或是QQ联系我，又或是发Email吧！\n\nQ Q： 466454368\t  \t  \nEmail： [csu.ldw@csu.edu.cn](mailto:csu.ldw@csu.edu.cn) \n","date":"2015-11-19T07:50:44.446Z","updated":"2015-11-19T07:50:44.446Z","path":"about/index.html","_id":"cih8q8rni000ar8uj7stfdttr"}],"Post":[{"layout":"post","date":"2015-11-21T02:24:00.000Z","title":"机器学习算法代码汇总","comment":true,"_content":"\n<br>\n\n\n【机器学习算法代码汇总-Python&R】- <a link=\"http://csuldw.github.io/assets/pdf/Full-CheatSheet-on-Machine-Learning-Algorithms(Python-and-R-Codes).pdf\"target=\"_black\">PDF文件下载</a>.\n\n![机器学习算法代码汇总1](http://ww3.sinaimg.cn/large/637f3c58gw1ey8lm4rhn5j20s40fp466.jpg)\n\n<!--more-->\n\n![机器学习算法代码汇总2](http://ww3.sinaimg.cn/large/637f3c58gw1ey8lkrdcwlj20s93kl4qq.jpg)\n\n\n\n原文链接：[点击这里](http://www.analyticsvidhya.com/blog/2015/09/full-cheatsheet-machine-learning-algorithms/).\n\n\n---\n\n","source":"_posts/2015-11-21-machine-learning-algorithms.md","raw":"---\nlayout: post\ndate: 2015-11-21 10:24\ntitle: \"机器学习算法代码汇总\"\ncategories: ML \ntag: \n\t- Machine Learning\n\t- Python\ncomment: true\n---\n\n<br>\n\n\n【机器学习算法代码汇总-Python&R】- <a link=\"http://csuldw.github.io/assets/pdf/Full-CheatSheet-on-Machine-Learning-Algorithms(Python-and-R-Codes).pdf\"target=\"_black\">PDF文件下载</a>.\n\n![机器学习算法代码汇总1](http://ww3.sinaimg.cn/large/637f3c58gw1ey8lm4rhn5j20s40fp466.jpg)\n\n<!--more-->\n\n![机器学习算法代码汇总2](http://ww3.sinaimg.cn/large/637f3c58gw1ey8lkrdcwlj20s93kl4qq.jpg)\n\n\n\n原文链接：[点击这里](http://www.analyticsvidhya.com/blog/2015/09/full-cheatsheet-machine-learning-algorithms/).\n\n\n---\n\n","slug":"2015-11-21-machine-learning-algorithms","published":1,"updated":"2015-11-21T10:58:45.716Z","_id":"cih8q8rnn000br8uj670wej6s","comments":1,"photos":[],"link":""},{"layout":"post","date":"2015-11-18T04:24:00.000Z","title":"实验笔记[1]-DSSP文件提取序列","comment":true,"_content":"\n__提示：以下内容乃个人实验笔记！__\n\n\n### 功能描述\n\n从格式化后的dssp文件`DSSP`（单一文件）中提取序列信息，要求输出的序列不含有`X`残基，并且序列最短长度`minlen`可人为指定，一般设置为`40`。\n\n<!--more-->\n\n`DSSP`文件格式Top10:\n\n<pre><code class=\"markdown\">1A12\t    1\t   21\t A\t K \t          \t   0   0  172 \t   0 \t 172\t      0, 0.0\t     2,-1.9\t     0, 0.0\t     0, 0.0\t   0.000 \t360.0\t 360.0\t 360.0\t 129.7\t    9.7\t  -11.3\t   33.7\n1A12\t    2\t   22\t A\t K \t       -  \t   0   0  164 \t   0 \t 164\t      1,-0.1\t     2,-0.2\t     0, 0.0\t     0, 0.0\t  -0.433 \t360.0\t-153.3\t -64.1\t  85.0\t   10.1\t  -13.4\t   30.5\n1A12\t    3\t   23\t A\t V \t       -  \t   0   0   42 \t   0 \t  42\t     -2,-1.9\t     2,-0.2\t   114,-0.1\t   768,-0.1\t  -0.429 \t  8.7\t-128.1\t -66.5\t 129.9\t   11.5\t  -10.5\t   28.4\n1A12\t    4\t   24\t A\t K \t       -  \t   0   0  130 \t   0 \t 130\t     -2,-0.2\t     2,-0.3\t   765,-0.1\t   113,-0.3\t  -0.476 \t 21.9\t-164.8\t -79.9\t 149.3\t   10.9\t  -10.9\t   24.7\n1A12\t    5\t   25\t A\t V \t       -  \t   0   0   13 \t   0 \t  13\t    111,-2.8\t     2,-0.2\t    -2,-0.2\t   113,-0.2\t  -0.942 \t  6.3\t-177.4\t-126.4\t 157.4\t   13.6\t  -10.6\t   22.1\n1A12\t    6\t   26\t A\t S \t       -  \t   0   0   20 \t   0 \t  20\t    719,-1.4\t     2,-0.3\t    -2,-0.3\t   720,-0.1\t  -0.694 \t  8.2\t-153.8\t-133.2\t-164.5\t   13.4\t  -10.1\t   18.3\n1A12\t    7\t   27\t A\t H \t   >   -  \t   0   0    2 \t   0 \t   2\t     -2,-0.2\t     3,-1.6\t   718,-0.1\t   721,-0.3\t  -0.944 \t 32.3\t-112.1\t-169.7\t 155.9\t   15.9\t   -9.9\t   15.4\n1A12\t    8\t   28\t A\t R \t T 3  S+  \t   0   0   53 \t   0 \t  53\t    718,-0.4\t   720,-0.3\t   716,-0.3\t   717,-0.1\t   0.690 \t115.2\t  60.4\t -69.3\t -20.9\t   16.0\t   -8.3\t   12.0\n1A12\t    9\t   29\t A\t S \t T 3  S+  \t   0   0   34 \t   0 \t  34\t    146,-0.2\t    -1,-0.3\t   718,-0.1\t     2,-0.2\t   0.548 \t 78.3\t 108.7\t -77.8\t -13.9\t   15.9\t  -11.8\t   10.5\n1A12\t   10\t   30\t A\t H \t   <   -  \t   0   0   22 \t   0 \t  22\t     -3,-1.6\t     2,-0.3\t   145,-0.1\t    93,-0.1\t  -0.516 \t 67.8\t-130.5\t -73.7\t 135.3\t   12.6\t  -12.8\t   12.0\n</code></pre>\n\n\n---\n\n### 代码\n\n\n`generateSeqFromDSSP.py`文件如下：\n\n```\n#!/usr/bin/python\n#-*- coding: utf-8 -*-\nimport os \n'''\nParameters：\n    - dsspfile:\t为格式过的DSSP文件\n    - foseq: \t为输出的序列文件\n    - fochain: \t输出的蛋白链文件\n    - minLen:  \t最短的序列长度\n'''\ndef getSeqFromDSSP(dsspfile, foseq, fochain, minLen):\n    with open(dsspfile, 'r') as inputfile:\n        if not foseq.strip():\n            foseq = 'protein'+ str(minLen) + '.dssp.seq'\n        outchain = open(fochain, 'w')\n        with open(foseq, 'w') as outputfile:\n            residue=[];Ntype=[]\n            preType=[];preRes=[]\n            firstline=[];secondline=[];content=''\n            for eachline in inputfile:\n                oneline = eachline.split('\\t') \n                residue = oneline[0]\n                if not residue.strip(): \n                    continue\n                Ntype = oneline[3].strip()\n                if not Ntype.strip():\n                    continue\n                if preRes!=residue:\n                    content = ''.join(firstline)+'\\n'+''.join(secondline) +'\\n'\n                    if len(secondline)>=int(minLen) and not 'X' in secondline:\n                        outchain.write(''.join(firstline) + '\\n')\n                        outputfile.write(content)\n                    firstline=[]\n                    firstline.append('>' + residue + ':' + Ntype)\n                    secondline=[];secondline.append(oneline[4].strip())\n                    preRes = residue;preType = Ntype\n                    continue\n                if Ntype != preType:\n                    content = ''.join(firstline)+'\\n'+''.join(secondline)+'\\n'\n                    if len(secondline)>=int(minLen) and  not 'X' in secondline:\n                        outchain.write(''.join(firstline) + '\\n')\n                        outputfile.write(content)\n                    firstline=[]\n                    firstline.append('>' + residue + ':' + Ntype)\n                    secondline=[];secondline.append(oneline[4].strip())\n                    preRes = residue;preType = Ntype\n                else: #如果Ntype不为空，且等于preType\n                    secondline.append(oneline[4].strip())\n            content = ''.join(firstline)+'\\n' + ''.join(secondline) +'\\n'\n            #选择长度大于40而且序列中不存在‘X’残基的序列\n            if len(secondline) >= int(minLen) and not 'X' in secondline:  \n                outchain.write(''.join(firstline) + '\\n')\n                outputfile.write(content)\n        outchain.close()\n###############################################################################\nif __name__==\"__main__\":\n    os.chdir(\"/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/\")\n    dsspfile = os.sys.argv[1]\n    foseq = os.sys.argv[2]\n    fochain = os.sys.argv[3]\n    minlen = os.sys.argv[4]\n    getSeqFromDSSP(dsspfile, foseq, fochain, minlen)\n```\n\n---\n\n### Test sample\n\n在Linux控制台中输入下面命令：\n\n```\npython generateSeqFromDSSP.py \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/dssp_testset/DSSP \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/protein_test.seq \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/protein_test.chain \\\n40\n```\n\n输出文件：\n\n`protein_test.seq`格式Top10：\n\n<pre><code class=\"markdown\">>1A12:A\nKKVKVSHRSHSTEPGLVLTLGQGDVGQLGLGENVMERKKPALVSIPEDVVQAEAGGMHTVCLSKSGQVYSFGCNDEGALGRDTSVEGSEMVPGKVELQEKVVQVSAGDSHTAALTDDGRVFLWGSFRDNNGVIGLLEPMKKSMVPVQVQLDVPVVKVASGNDHLVMLTADGDLYTLGCGEQGQLGRVPELFANRGGRQGLERLLVPKCVMLKSRGSRGHVRFQDAFCGAYFTFAISHEGHVYGFGLSNYHQLGTPGTESCFIPQNLTSFKNSTKSWVGFSGGQHHTVCMDSEGKAYSLGRAEYGRLGLGEGAEEKSIPTLISRLPAVSSVACGASVGYAVTKDGRVFAWGMGTNYQLGTGQDEDAWSPVEMMGKQLENRVVLSVSSGGQHTVLLVKDKEQS\n>1A12:B\nKKVKVSHRSHSTEPGLVLTLGQGDVGQLGLGENVMERKKPALVSIPEDVVQAEAGGMHTVCLSKSGQVYSFGCNDEGALGRDTSVEGSEMVPGKVELQEKVVQVSAGDSHTAALTDDGRVFLWGSFRDNNGVIGLLEPMKKSMVPVQVQLDVPVVKVASGNDHLVMLTADGDLYTLGCGEQGQLGRVPELFANRGGRQGLERLLVPKCVMLKSRGSRGHVRFQDAFCGAYFTFAISHEGHVYGFGLSNYHQLGTPGTESCFIPQNLTSFKNSTKSWVGFSGGQHHTVCMDSEGKAYSLGRAEYGRLGLGEGAEEKSIPTLISRLPAVSSVACGASVGYAVTKDGRVFAWGMGTNYQLGTGQDEDAWSPVEMMGKQLENRVVLSVSSGGQHTVLLVKDKEQS\n>1A12:C\nKKVKVSHRSHSTEPGLVLTLGQGDVGQLGLGENVMERKKPALVSIPEDVVQAEAGGMHTVCLSKSGQVYSFGCNDEGALGRDTSVEGSEMVPGKVELQEKVVQVSAGDSHTAALTDDGRVFLWGSFRDNNGVIGLLEPMKKSMVPVQVQLDVPVVKVASGNDHLVMLTADGDLYTLGCGEQGQLGRVPELFANRGGRQGLERLLVPKCVMLKSRGSRGHVRFQDAFCGAYFTFAISHEGHVYGFGLSNYHQLGTPGTESCFIPQNLTSFKNSTKSWVGFSGGQHHTVCMDSEGKAYSLGRAEYGRLGLGEGAEEKSIPTLISRLPAVSSVACGASVGYAVTKDGRVFAWGMGTNYQLGTGQDEDAWSPVEMMGKQLENRVVLSVSSGGQHTVLLVKDKEQS\n>1BCH:1\nAIEVKLANMEAEINTLKSKLELTNKLHAFSMGKKSGKKFFVTNHERMPFSKVKALaSELRGTVAIPRNAEENKAIQEVAKTSAFLGITDEVTEGQFMYVTGGRLTYSNWKKDQPDDWYGHGLGGGEDbVHIVDNGLWNDISbQASHTAVaEFPA\n>1BCH:2\nAIEVKLANMEAEINTLKSKLELTNKLHAFSMGKKSGKKFFVTNHERMPFSKVKALcSELRGTVAIPRNAEENKAIQEVAKTSAFLGITDEVTEGQFMYVTGGRLTYSNWKKDQPDDWYGHGLGGGEDdVHIVDNGLWNDISdQASHTAVcEFPA\n</code></pre>\n\n`protein_test.chain`文件格式Top10:\n\n<pre><code class=\"markdown\">>1A12:A\n>1A12:B\n>1A12:C\n>1BCH:1\n>1BCH:2\n>1BCH:3\n>1BF6:B\n>1BYP:A\n>1C7J:A\n>1CHM:A\n<code></pre>\n\n---\n\n","source":"_posts/2015-11-18 ExpNotes[1]-Extract protein sequences from a fasta file.md","raw":"---\nlayout: post\ndate: 2015-11-18 12:24\ntitle: \"实验笔记[1]-DSSP文件提取序列\"\ncategories: BioInfo\ntag: BioInfo\ncomment: true\n---\n\n__提示：以下内容乃个人实验笔记！__\n\n\n### 功能描述\n\n从格式化后的dssp文件`DSSP`（单一文件）中提取序列信息，要求输出的序列不含有`X`残基，并且序列最短长度`minlen`可人为指定，一般设置为`40`。\n\n<!--more-->\n\n`DSSP`文件格式Top10:\n\n<pre><code class=\"markdown\">1A12\t    1\t   21\t A\t K \t          \t   0   0  172 \t   0 \t 172\t      0, 0.0\t     2,-1.9\t     0, 0.0\t     0, 0.0\t   0.000 \t360.0\t 360.0\t 360.0\t 129.7\t    9.7\t  -11.3\t   33.7\n1A12\t    2\t   22\t A\t K \t       -  \t   0   0  164 \t   0 \t 164\t      1,-0.1\t     2,-0.2\t     0, 0.0\t     0, 0.0\t  -0.433 \t360.0\t-153.3\t -64.1\t  85.0\t   10.1\t  -13.4\t   30.5\n1A12\t    3\t   23\t A\t V \t       -  \t   0   0   42 \t   0 \t  42\t     -2,-1.9\t     2,-0.2\t   114,-0.1\t   768,-0.1\t  -0.429 \t  8.7\t-128.1\t -66.5\t 129.9\t   11.5\t  -10.5\t   28.4\n1A12\t    4\t   24\t A\t K \t       -  \t   0   0  130 \t   0 \t 130\t     -2,-0.2\t     2,-0.3\t   765,-0.1\t   113,-0.3\t  -0.476 \t 21.9\t-164.8\t -79.9\t 149.3\t   10.9\t  -10.9\t   24.7\n1A12\t    5\t   25\t A\t V \t       -  \t   0   0   13 \t   0 \t  13\t    111,-2.8\t     2,-0.2\t    -2,-0.2\t   113,-0.2\t  -0.942 \t  6.3\t-177.4\t-126.4\t 157.4\t   13.6\t  -10.6\t   22.1\n1A12\t    6\t   26\t A\t S \t       -  \t   0   0   20 \t   0 \t  20\t    719,-1.4\t     2,-0.3\t    -2,-0.3\t   720,-0.1\t  -0.694 \t  8.2\t-153.8\t-133.2\t-164.5\t   13.4\t  -10.1\t   18.3\n1A12\t    7\t   27\t A\t H \t   >   -  \t   0   0    2 \t   0 \t   2\t     -2,-0.2\t     3,-1.6\t   718,-0.1\t   721,-0.3\t  -0.944 \t 32.3\t-112.1\t-169.7\t 155.9\t   15.9\t   -9.9\t   15.4\n1A12\t    8\t   28\t A\t R \t T 3  S+  \t   0   0   53 \t   0 \t  53\t    718,-0.4\t   720,-0.3\t   716,-0.3\t   717,-0.1\t   0.690 \t115.2\t  60.4\t -69.3\t -20.9\t   16.0\t   -8.3\t   12.0\n1A12\t    9\t   29\t A\t S \t T 3  S+  \t   0   0   34 \t   0 \t  34\t    146,-0.2\t    -1,-0.3\t   718,-0.1\t     2,-0.2\t   0.548 \t 78.3\t 108.7\t -77.8\t -13.9\t   15.9\t  -11.8\t   10.5\n1A12\t   10\t   30\t A\t H \t   <   -  \t   0   0   22 \t   0 \t  22\t     -3,-1.6\t     2,-0.3\t   145,-0.1\t    93,-0.1\t  -0.516 \t 67.8\t-130.5\t -73.7\t 135.3\t   12.6\t  -12.8\t   12.0\n</code></pre>\n\n\n---\n\n### 代码\n\n\n`generateSeqFromDSSP.py`文件如下：\n\n```\n#!/usr/bin/python\n#-*- coding: utf-8 -*-\nimport os \n'''\nParameters：\n    - dsspfile:\t为格式过的DSSP文件\n    - foseq: \t为输出的序列文件\n    - fochain: \t输出的蛋白链文件\n    - minLen:  \t最短的序列长度\n'''\ndef getSeqFromDSSP(dsspfile, foseq, fochain, minLen):\n    with open(dsspfile, 'r') as inputfile:\n        if not foseq.strip():\n            foseq = 'protein'+ str(minLen) + '.dssp.seq'\n        outchain = open(fochain, 'w')\n        with open(foseq, 'w') as outputfile:\n            residue=[];Ntype=[]\n            preType=[];preRes=[]\n            firstline=[];secondline=[];content=''\n            for eachline in inputfile:\n                oneline = eachline.split('\\t') \n                residue = oneline[0]\n                if not residue.strip(): \n                    continue\n                Ntype = oneline[3].strip()\n                if not Ntype.strip():\n                    continue\n                if preRes!=residue:\n                    content = ''.join(firstline)+'\\n'+''.join(secondline) +'\\n'\n                    if len(secondline)>=int(minLen) and not 'X' in secondline:\n                        outchain.write(''.join(firstline) + '\\n')\n                        outputfile.write(content)\n                    firstline=[]\n                    firstline.append('>' + residue + ':' + Ntype)\n                    secondline=[];secondline.append(oneline[4].strip())\n                    preRes = residue;preType = Ntype\n                    continue\n                if Ntype != preType:\n                    content = ''.join(firstline)+'\\n'+''.join(secondline)+'\\n'\n                    if len(secondline)>=int(minLen) and  not 'X' in secondline:\n                        outchain.write(''.join(firstline) + '\\n')\n                        outputfile.write(content)\n                    firstline=[]\n                    firstline.append('>' + residue + ':' + Ntype)\n                    secondline=[];secondline.append(oneline[4].strip())\n                    preRes = residue;preType = Ntype\n                else: #如果Ntype不为空，且等于preType\n                    secondline.append(oneline[4].strip())\n            content = ''.join(firstline)+'\\n' + ''.join(secondline) +'\\n'\n            #选择长度大于40而且序列中不存在‘X’残基的序列\n            if len(secondline) >= int(minLen) and not 'X' in secondline:  \n                outchain.write(''.join(firstline) + '\\n')\n                outputfile.write(content)\n        outchain.close()\n###############################################################################\nif __name__==\"__main__\":\n    os.chdir(\"/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/\")\n    dsspfile = os.sys.argv[1]\n    foseq = os.sys.argv[2]\n    fochain = os.sys.argv[3]\n    minlen = os.sys.argv[4]\n    getSeqFromDSSP(dsspfile, foseq, fochain, minlen)\n```\n\n---\n\n### Test sample\n\n在Linux控制台中输入下面命令：\n\n```\npython generateSeqFromDSSP.py \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/dssp_testset/DSSP \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/protein_test.seq \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/protein_test.chain \\\n40\n```\n\n输出文件：\n\n`protein_test.seq`格式Top10：\n\n<pre><code class=\"markdown\">>1A12:A\nKKVKVSHRSHSTEPGLVLTLGQGDVGQLGLGENVMERKKPALVSIPEDVVQAEAGGMHTVCLSKSGQVYSFGCNDEGALGRDTSVEGSEMVPGKVELQEKVVQVSAGDSHTAALTDDGRVFLWGSFRDNNGVIGLLEPMKKSMVPVQVQLDVPVVKVASGNDHLVMLTADGDLYTLGCGEQGQLGRVPELFANRGGRQGLERLLVPKCVMLKSRGSRGHVRFQDAFCGAYFTFAISHEGHVYGFGLSNYHQLGTPGTESCFIPQNLTSFKNSTKSWVGFSGGQHHTVCMDSEGKAYSLGRAEYGRLGLGEGAEEKSIPTLISRLPAVSSVACGASVGYAVTKDGRVFAWGMGTNYQLGTGQDEDAWSPVEMMGKQLENRVVLSVSSGGQHTVLLVKDKEQS\n>1A12:B\nKKVKVSHRSHSTEPGLVLTLGQGDVGQLGLGENVMERKKPALVSIPEDVVQAEAGGMHTVCLSKSGQVYSFGCNDEGALGRDTSVEGSEMVPGKVELQEKVVQVSAGDSHTAALTDDGRVFLWGSFRDNNGVIGLLEPMKKSMVPVQVQLDVPVVKVASGNDHLVMLTADGDLYTLGCGEQGQLGRVPELFANRGGRQGLERLLVPKCVMLKSRGSRGHVRFQDAFCGAYFTFAISHEGHVYGFGLSNYHQLGTPGTESCFIPQNLTSFKNSTKSWVGFSGGQHHTVCMDSEGKAYSLGRAEYGRLGLGEGAEEKSIPTLISRLPAVSSVACGASVGYAVTKDGRVFAWGMGTNYQLGTGQDEDAWSPVEMMGKQLENRVVLSVSSGGQHTVLLVKDKEQS\n>1A12:C\nKKVKVSHRSHSTEPGLVLTLGQGDVGQLGLGENVMERKKPALVSIPEDVVQAEAGGMHTVCLSKSGQVYSFGCNDEGALGRDTSVEGSEMVPGKVELQEKVVQVSAGDSHTAALTDDGRVFLWGSFRDNNGVIGLLEPMKKSMVPVQVQLDVPVVKVASGNDHLVMLTADGDLYTLGCGEQGQLGRVPELFANRGGRQGLERLLVPKCVMLKSRGSRGHVRFQDAFCGAYFTFAISHEGHVYGFGLSNYHQLGTPGTESCFIPQNLTSFKNSTKSWVGFSGGQHHTVCMDSEGKAYSLGRAEYGRLGLGEGAEEKSIPTLISRLPAVSSVACGASVGYAVTKDGRVFAWGMGTNYQLGTGQDEDAWSPVEMMGKQLENRVVLSVSSGGQHTVLLVKDKEQS\n>1BCH:1\nAIEVKLANMEAEINTLKSKLELTNKLHAFSMGKKSGKKFFVTNHERMPFSKVKALaSELRGTVAIPRNAEENKAIQEVAKTSAFLGITDEVTEGQFMYVTGGRLTYSNWKKDQPDDWYGHGLGGGEDbVHIVDNGLWNDISbQASHTAVaEFPA\n>1BCH:2\nAIEVKLANMEAEINTLKSKLELTNKLHAFSMGKKSGKKFFVTNHERMPFSKVKALcSELRGTVAIPRNAEENKAIQEVAKTSAFLGITDEVTEGQFMYVTGGRLTYSNWKKDQPDDWYGHGLGGGEDdVHIVDNGLWNDISdQASHTAVcEFPA\n</code></pre>\n\n`protein_test.chain`文件格式Top10:\n\n<pre><code class=\"markdown\">>1A12:A\n>1A12:B\n>1A12:C\n>1BCH:1\n>1BCH:2\n>1BCH:3\n>1BF6:B\n>1BYP:A\n>1C7J:A\n>1CHM:A\n<code></pre>\n\n---\n\n","slug":"2015-11-18 ExpNotes[1]-Extract protein sequences from a fasta file","published":1,"updated":"2015-11-19T07:50:44.444Z","comments":1,"photos":[],"link":"","_id":"cih8q8ro2000ir8ujllsshpo1"},{"layout":"post","date":"2015-11-17T07:11:00.000Z","title":"补集计算: B=U-A","comment":true,"_content":"\n## 问题描述\n\n在做数据处理的时候，根据原论文的蛋白质链下载蛋白质PDB文件，大体上还算正常。但是有的protein的PDB文件在PDB数据库已经不存在了，所以下载后的PDB文件理论上只属于原论文提到的PDB文件的一个子集。由于数据比较大，手动去找会耗费大量的时间，所以为了找出这些不存在的PDB文件，下面写一段代码来实现。\n\n\n## 问题转换与实现\n\n首先，将问题转化成一个数学问题。\n\n<!-- more -->\n\n问题转化：原论文提及的数据集（一个大集合U），现在下载到的只是一个子集合A，目的是求出U中不包含A的子集合（补集）：`B=U-A`.\n\n最终转化为：根据集合U和子集A，计算A的补集B=U-A.\n\n参数：\n\n- file1：大集合文件U\n- file2: 下载后的一个子集合A\n- outfile：输出文件\n\n代码如下：\n\ncompareTwoFile.py\n\n```\n#!/usr/bin/python\n#-*- coding: utf-8 -*-\nimport os\ndef compareTwoFile(file1,file2,outfile):\n    with open(outfile,'w') as fo: \n        fw = []\n        with open(file1,'r') as fr1:\n            fr1_con = [each.strip() for each in fr1.readlines()] \n            with open(file2,'r') as fr2:\n                fr2_con =[each.strip() for each in fr2.readlines()]\n                for eachline in fr1_con:\n                    if eachline not in fr2_con:\n                        fw.append(eachline)\n        fo.write(''.join(fw))\nif __name__==\"__main__\": \n    file1 = os.sys.argv[1]\n    file2 = os.sys.argv[2]\n    outfile = os.sys.argv[3]\n    compareTwoFile(file1,file2,outfile)\n```\n\nTest sample:\n\n```\npython compareTwoFile.py \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/train_set.protein  \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/pdb_trainset.txt \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/compare.result\n```\n\nfile1和file2的top10格式：\n\n\t1A02\n\t1A0A\n\t1A3Q\n\t1A53\n\t1A8E\n\t1A8P\n\t1A8Y\n\t1AAC\t\n\t1ABE\n\t1AC5\n\n\t\n\n\n","source":"_posts/2015-11-17 B=U-A.md","raw":"---\nlayout: post\ndate: 2015-11-17 15:11\ntitle: \"补集计算: B=U-A\"\ncategories: BioInfo\ntag: \n\t- BioInfo\n\t- Python\ncomment: true\n---\n\n## 问题描述\n\n在做数据处理的时候，根据原论文的蛋白质链下载蛋白质PDB文件，大体上还算正常。但是有的protein的PDB文件在PDB数据库已经不存在了，所以下载后的PDB文件理论上只属于原论文提到的PDB文件的一个子集。由于数据比较大，手动去找会耗费大量的时间，所以为了找出这些不存在的PDB文件，下面写一段代码来实现。\n\n\n## 问题转换与实现\n\n首先，将问题转化成一个数学问题。\n\n<!-- more -->\n\n问题转化：原论文提及的数据集（一个大集合U），现在下载到的只是一个子集合A，目的是求出U中不包含A的子集合（补集）：`B=U-A`.\n\n最终转化为：根据集合U和子集A，计算A的补集B=U-A.\n\n参数：\n\n- file1：大集合文件U\n- file2: 下载后的一个子集合A\n- outfile：输出文件\n\n代码如下：\n\ncompareTwoFile.py\n\n```\n#!/usr/bin/python\n#-*- coding: utf-8 -*-\nimport os\ndef compareTwoFile(file1,file2,outfile):\n    with open(outfile,'w') as fo: \n        fw = []\n        with open(file1,'r') as fr1:\n            fr1_con = [each.strip() for each in fr1.readlines()] \n            with open(file2,'r') as fr2:\n                fr2_con =[each.strip() for each in fr2.readlines()]\n                for eachline in fr1_con:\n                    if eachline not in fr2_con:\n                        fw.append(eachline)\n        fo.write(''.join(fw))\nif __name__==\"__main__\": \n    file1 = os.sys.argv[1]\n    file2 = os.sys.argv[2]\n    outfile = os.sys.argv[3]\n    compareTwoFile(file1,file2,outfile)\n```\n\nTest sample:\n\n```\npython compareTwoFile.py \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/train_set.protein  \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/pdb_trainset.txt \\\n/ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/compare.result\n```\n\nfile1和file2的top10格式：\n\n\t1A02\n\t1A0A\n\t1A3Q\n\t1A53\n\t1A8E\n\t1A8P\n\t1A8Y\n\t1AAC\t\n\t1ABE\n\t1AC5\n\n\t\n\n\n","slug":"2015-11-17 B=U-A","published":1,"updated":"2015-11-19T07:50:44.444Z","comments":1,"photos":[],"link":"","_id":"cih8q8ro7000nr8uj3jzcfnoe"},{"layout":"post","date":"2015-11-16T02:24:00.000Z","title":"Download PDB file with wget command","comment":true,"_content":"\n在Linux服务器下，使用`wget`命令下载PDB文件，即蛋白质文件。\n\n- 输入文件格式：一个存有`protein chain`的单独文件，每行的格式为：`1A34A`\n- 输出文件：多个蛋白质文件，买一行下载一个蛋白质，格式：1A34.pdb\n<!--more-->\ndownload.py文件\n\n```\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport os\ndef downloadPDB(namefile,outpath):\n    if not os.path.exists(outpath):\n        os.mkdir(outpath)\n    os.chdir(outpath)\n    inputfile = open(namefile,'r')\n    for eachline in inputfile:\n        pdbname = eachline.lower().strip()[0:4]\n        os.system(\"wget http://ftp.wwpdb.org/pub/pdb/data/structures/all/pdb/pdb\" + pdbname + \".ent.gz\")\n        os.system(\"gzip -d pdb\" + pdbname + '.ent.gz')\n        os.system(\"mv pdb\" + pdbname + \".ent \" + pdbname.upper() + '.pdb')\n    inputfile.close()\nif __name__==\"__main__\":\n    chainfile = os.sys.argv[1] \n    outpath = os.sys.argv[2]\n    proteinList = downloadPDB(chainfile,outpath)\n\"\"\"\ntest sample\npython download.py /ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/train_set.txt /ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/pdb_trainset   \n\"\"\"\n```\n\n命令解释：首先打开文件，然后逐行读取蛋白链，根据蛋白链的前四个字符，得到蛋白质的名字，然后使用`wget`命令下载`.ent.gz`文件，最后使用`gzip`解压文件即可。\n\n命令行输入：\n\n```\npython download.py ../filepath  ../dirpath\n```\n\n其中`filepath`表示的是一个存有多行，每行表示一个蛋白链的单独文件。\n\nTop10格式如下：\n\n\n\t1A12A\n\t1BCH1\n\t1BF6A\n\t1BYPA\n\t1C7JA\n\t1CHMA\n\t1CMNA\n\t1CUHA\n\t1CZYA\n\t1D7EA\n\n\n最后的输出文件Top5：\n\n\n\t1A12.pdb\n\t1BCH.pdb\n\t1BF6.pdb\n\t1BYP.pdb\n\t1C7J.pdb\n\n\n---\n\n<center><strong>\n此文乃原创博文，如果你从中有所收获，欢迎前来赞助，为博主送上你的支持：<a href=\"http://csuldw.github.io/donation\" target=\"_black\"><font color=\"red\">【赞助中心】</font></a>。<br>  CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\" target=\"_black\">【Dream_Angel_Z】</a><br>新浪微博： <a href=\"http://weibo.com/liudiwei210\" target=\"_black\">【@拾毅者】</a><br>\n</strong></center>","source":"_posts/2015-11-16 Download PDB file with wget command.md","raw":"---\nlayout: post\ndate: 2015-11-16 10:24\ntitle: \"Download PDB file with wget command\"\ncategories: BioInfo\ntag: BioInfo\ncomment: true\n---\n\n在Linux服务器下，使用`wget`命令下载PDB文件，即蛋白质文件。\n\n- 输入文件格式：一个存有`protein chain`的单独文件，每行的格式为：`1A34A`\n- 输出文件：多个蛋白质文件，买一行下载一个蛋白质，格式：1A34.pdb\n<!--more-->\ndownload.py文件\n\n```\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport os\ndef downloadPDB(namefile,outpath):\n    if not os.path.exists(outpath):\n        os.mkdir(outpath)\n    os.chdir(outpath)\n    inputfile = open(namefile,'r')\n    for eachline in inputfile:\n        pdbname = eachline.lower().strip()[0:4]\n        os.system(\"wget http://ftp.wwpdb.org/pub/pdb/data/structures/all/pdb/pdb\" + pdbname + \".ent.gz\")\n        os.system(\"gzip -d pdb\" + pdbname + '.ent.gz')\n        os.system(\"mv pdb\" + pdbname + \".ent \" + pdbname.upper() + '.pdb')\n    inputfile.close()\nif __name__==\"__main__\":\n    chainfile = os.sys.argv[1] \n    outpath = os.sys.argv[2]\n    proteinList = downloadPDB(chainfile,outpath)\n\"\"\"\ntest sample\npython download.py /ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/train_set.txt /ifs/home/liudiwei/DNA_BP/_data/Exp_DBPI/pdb_trainset   \n\"\"\"\n```\n\n命令解释：首先打开文件，然后逐行读取蛋白链，根据蛋白链的前四个字符，得到蛋白质的名字，然后使用`wget`命令下载`.ent.gz`文件，最后使用`gzip`解压文件即可。\n\n命令行输入：\n\n```\npython download.py ../filepath  ../dirpath\n```\n\n其中`filepath`表示的是一个存有多行，每行表示一个蛋白链的单独文件。\n\nTop10格式如下：\n\n\n\t1A12A\n\t1BCH1\n\t1BF6A\n\t1BYPA\n\t1C7JA\n\t1CHMA\n\t1CMNA\n\t1CUHA\n\t1CZYA\n\t1D7EA\n\n\n最后的输出文件Top5：\n\n\n\t1A12.pdb\n\t1BCH.pdb\n\t1BF6.pdb\n\t1BYP.pdb\n\t1C7J.pdb\n\n\n---\n\n<center><strong>\n此文乃原创博文，如果你从中有所收获，欢迎前来赞助，为博主送上你的支持：<a href=\"http://csuldw.github.io/donation\" target=\"_black\"><font color=\"red\">【赞助中心】</font></a>。<br>  CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\" target=\"_black\">【Dream_Angel_Z】</a><br>新浪微博： <a href=\"http://weibo.com/liudiwei210\" target=\"_black\">【@拾毅者】</a><br>\n</strong></center>","slug":"2015-11-16 Download PDB file with wget command","published":1,"updated":"2015-11-19T07:50:44.444Z","comments":1,"photos":[],"link":"","_id":"cih8q8rob000rr8ujdj63x90h"},{"layout":"post","date":"2015-11-15T02:24:00.000Z","title":"Machine Learning-Normalization","comment":true,"_content":"\n\n本文主要介绍两种基本的数据归一化方法。\n\n- min-max标准化（Min-Max Normalization）\n- Z-score标准化方法\n\n归一化方法有两种形式，一种是把数变为（0，1）之间的小数，一种是把有量纲表达式变为无量纲表达式。\n\n<!--more-->\n\n数据标准化（归一化）处理是数据挖掘的一项基础工作，不同评价指标往往具有不同的量纲和量纲单位，这样的情况会影响到数据分析的结果，为了消除指标之间的量纲影响，需要进行数据标准化处理，以解决数据指标之间的可比性。原始数据经过数据标准化处理后，各指标处于同一数量级，适合进行综合对比评价。\n\n\n下面是归一化和没有归一化的比较：\n\n没有经过归一化，寻找最优解过程如下：\n\n![2015111501](/assets/images/2015111501.png)\n\n经过归一化，把各个特征的尺度控制在相同的范围内：\n\n![2015111502](/assets/images/2015111502.png)\n\n从经验上说，归一化是让不同维度之间的特征在数值上有一定比较性，可以大大提高分类器的准确性。\n\n以下是两种常用的归一化方法：\n\n## 1.min-max标准化（Min-Max Normalization）\n\n\n也称为离差标准化，是对原始数据的线性变换，使结果值映射到[0 - 1]之间。转换函数如下：\n\n\n$$x^{*}=\\frac{x-x\\_{min}}{x\\_{max}-x\\_{min}}$$\n\n\nx_min表示样本数据的最小值，x_max表示样本数据的最大值。\n\n**Python代码实现：**\n\n```\ndef Normalization(x):\n\treturn [(float(i)-min(x))/float(max(x)-min(x)) for i in x]\n```\n\n测试：\n\n```\nx=[1,2,1,4,3,2,5,6,2,7]\nb=Normalization(x)\n```\n\nOutput：\n\n\n```\n[0.0, 0.16666666666666666, 0.0, 0.5, 0.3333333333333333, 0.16666666666666666, 0.6666666666666666, 0.8333333333333334, 0.16666666666666666, 1.0]\n```\n\n如果想要将数据映射到[-1,1]，则将公式换成：\n\n$$x^{*}=\\frac{x-x\\_{mean}}{x\\_{max}-x\\_{min}}$$\n\nx_mean表示数据的均值\n\n**Python代码实现：**\n\n```\nimport numpy as np\ndef Normalization2(x):\n\treturn [(float(i)-np.mean(x))/(max(x)-min(x)) for i in x]\n```\n\n测试：\n\n```\nx=[1,2,1,4,3,2,5,6,2,7]\nb=Normalization2(x)\n```\n\nOutput：\n\n```\n[-0.3833333333333333, -0.21666666666666665, -0.3833333333333333, 0.1166666666666667, -0.049999999999999968, -0.21666666666666665, 0.28333333333333338, 0.45000000000000001, -0.21666666666666665, 0.6166666666666667]\n```\n\n注意：上面的Normalization是处理单个列表的。\n\n## 2.z-score标准化方法\n\n这种方法给予原始数据的均值（mean）和标准差（standard deviation）进行数据的标准化。经过处理的数据符合标准正态分布，即均值为0，标准差为1，转化函数为：\n\n\n\n$$x^{*}=\\frac{x-\\mu}{\\sigma}$$\n\n\n其中，μ表示所有样本数据的均值，σ表示所有样本的标准差。\n\n\n**Python代码实现：**\n\n```\nimport numpy as np\ndef z_score(x):\n    x_mean=np.mean(x)\n    s2=sum([(i-np.mean(x))*(i-np.mean(x)) for i in x])/len(x)\n    return [(i-x_mean)/s2 for i in x]\n```\n\n测试：\n\n```\nx=[1,2,1,4,3,2,5,6,2,7]\nprint z_score(x)    \n```\n\nOutput:\n\n\n```\n[-0.57356608478802995, -0.32418952618453861, -0.57356608478802995, 0.17456359102244395, -0.074812967581047343, -0.32418952618453861, 0.42394014962593524, 0.67331670822942646, -0.32418952618453861, 0.92269326683291775]\n```\n\n\n---\n\n<center><strong>\n此文乃博主即兴之作，如果你从中有所收获，欢迎前来赞助，为博主送上你的支持：<a href=\"http://csuldw.github.io/donation\" target=\"_black\"><font color=\"red\">【赞助中心】</font></a>。<br>  CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\" target=\"_black\">【Dream_Angel_Z】</a><br>新浪微博： <a href=\"http://weibo.com/liudiwei210\" target=\"_black\">【@拾毅者】</a><br>\n</strong></center>","source":"_posts/2015-11-15 normalization.md","raw":"---\nlayout: post\ndate: 2015-11-15 10:24\ntitle: \"Machine Learning-Normalization\"\ncategories: ML\ntag: normalization\ncomment: true\n---\n\n\n本文主要介绍两种基本的数据归一化方法。\n\n- min-max标准化（Min-Max Normalization）\n- Z-score标准化方法\n\n归一化方法有两种形式，一种是把数变为（0，1）之间的小数，一种是把有量纲表达式变为无量纲表达式。\n\n<!--more-->\n\n数据标准化（归一化）处理是数据挖掘的一项基础工作，不同评价指标往往具有不同的量纲和量纲单位，这样的情况会影响到数据分析的结果，为了消除指标之间的量纲影响，需要进行数据标准化处理，以解决数据指标之间的可比性。原始数据经过数据标准化处理后，各指标处于同一数量级，适合进行综合对比评价。\n\n\n下面是归一化和没有归一化的比较：\n\n没有经过归一化，寻找最优解过程如下：\n\n![2015111501](/assets/images/2015111501.png)\n\n经过归一化，把各个特征的尺度控制在相同的范围内：\n\n![2015111502](/assets/images/2015111502.png)\n\n从经验上说，归一化是让不同维度之间的特征在数值上有一定比较性，可以大大提高分类器的准确性。\n\n以下是两种常用的归一化方法：\n\n## 1.min-max标准化（Min-Max Normalization）\n\n\n也称为离差标准化，是对原始数据的线性变换，使结果值映射到[0 - 1]之间。转换函数如下：\n\n\n$$x^{*}=\\frac{x-x\\_{min}}{x\\_{max}-x\\_{min}}$$\n\n\nx_min表示样本数据的最小值，x_max表示样本数据的最大值。\n\n**Python代码实现：**\n\n```\ndef Normalization(x):\n\treturn [(float(i)-min(x))/float(max(x)-min(x)) for i in x]\n```\n\n测试：\n\n```\nx=[1,2,1,4,3,2,5,6,2,7]\nb=Normalization(x)\n```\n\nOutput：\n\n\n```\n[0.0, 0.16666666666666666, 0.0, 0.5, 0.3333333333333333, 0.16666666666666666, 0.6666666666666666, 0.8333333333333334, 0.16666666666666666, 1.0]\n```\n\n如果想要将数据映射到[-1,1]，则将公式换成：\n\n$$x^{*}=\\frac{x-x\\_{mean}}{x\\_{max}-x\\_{min}}$$\n\nx_mean表示数据的均值\n\n**Python代码实现：**\n\n```\nimport numpy as np\ndef Normalization2(x):\n\treturn [(float(i)-np.mean(x))/(max(x)-min(x)) for i in x]\n```\n\n测试：\n\n```\nx=[1,2,1,4,3,2,5,6,2,7]\nb=Normalization2(x)\n```\n\nOutput：\n\n```\n[-0.3833333333333333, -0.21666666666666665, -0.3833333333333333, 0.1166666666666667, -0.049999999999999968, -0.21666666666666665, 0.28333333333333338, 0.45000000000000001, -0.21666666666666665, 0.6166666666666667]\n```\n\n注意：上面的Normalization是处理单个列表的。\n\n## 2.z-score标准化方法\n\n这种方法给予原始数据的均值（mean）和标准差（standard deviation）进行数据的标准化。经过处理的数据符合标准正态分布，即均值为0，标准差为1，转化函数为：\n\n\n\n$$x^{*}=\\frac{x-\\mu}{\\sigma}$$\n\n\n其中，μ表示所有样本数据的均值，σ表示所有样本的标准差。\n\n\n**Python代码实现：**\n\n```\nimport numpy as np\ndef z_score(x):\n    x_mean=np.mean(x)\n    s2=sum([(i-np.mean(x))*(i-np.mean(x)) for i in x])/len(x)\n    return [(i-x_mean)/s2 for i in x]\n```\n\n测试：\n\n```\nx=[1,2,1,4,3,2,5,6,2,7]\nprint z_score(x)    \n```\n\nOutput:\n\n\n```\n[-0.57356608478802995, -0.32418952618453861, -0.57356608478802995, 0.17456359102244395, -0.074812967581047343, -0.32418952618453861, 0.42394014962593524, 0.67331670822942646, -0.32418952618453861, 0.92269326683291775]\n```\n\n\n---\n\n<center><strong>\n此文乃博主即兴之作，如果你从中有所收获，欢迎前来赞助，为博主送上你的支持：<a href=\"http://csuldw.github.io/donation\" target=\"_black\"><font color=\"red\">【赞助中心】</font></a>。<br>  CSDN博客： <a href=\"http://blog.csdn.net/dream_angel_z\" target=\"_black\">【Dream_Angel_Z】</a><br>新浪微博： <a href=\"http://weibo.com/liudiwei210\" target=\"_black\">【@拾毅者】</a><br>\n</strong></center>","slug":"2015-11-15 normalization","published":1,"updated":"2015-11-19T07:50:44.443Z","comments":1,"photos":[],"link":"","_id":"cih8q8rof000ur8uja93m70rq"},{"layout":"post","date":"2015-11-03T08:24:00.000Z","title":"Add header and footer to some file","comment":true,"_content":"\n今天整理资料的时候，发现要在很多文件中的头部和尾部添加相同的文本，于是自己使用Python做了一个简单的文件拼接功能，也可以说是文件追加功能，给一个文件批量追加头尾内容，达到省事的效果，顺便还可以练习下Python。下面来介绍下这个功能的代码：\n\n现在有三个文件，如下：\n\n- content.txt 位于一个叫path的文件中；\n- header.txt用于添加到content.txt头部的文件；\n- footer.txt用于添加到content.txt尾部的文件。\n\n\n现在要实现的功能就是，将header和footer分别添加到content的头部和尾部。 \n\n<!--more-->\n\n---\n\n函数说明：\n\n- add_footer(infile, outfile)：用于将footer内容添加到content中，第一个参数表示的添加到尾部的文件，如输入footer.txt，第二个为内容文件。如content.txt文件\n- add_header(infile, outfile, auto=True): 用于将一个文件放入好另一个文件的头部，如果auto=Ture，则不对内容做修改，auto为False的话，这里添加了部分需要的东西，如文件的创建时间、标题等信息。\n- addHeadAndFooter(path, header, footer, auto=False)：核心函数，调用头尾两个方法，此处的path为文件夹名称，该函数的功能是将path文件夹下的所有文件都添加头和尾的内容，auto默认为False，功能和上面的相同。\n- getStdTime(seconds):将时间戳格式的日期转换为标准格式，如：2015-11-03 10:24\n\n\n代码（AddHeader.py）：\n\n\n```\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov 03 10:32:26 2015\n@author: liudiwei\n\"\"\"\nimport os,time\ndef add_footer(infile, outfile):\n    with open(infile,'r') as inputfile:\n        with open(outfile,'a') as outfile:\n            outfile.write(\"\\n\\n\"+''.join(inputfile.readlines()))\n#如果auto==True，直接将文件内容加入到当前文件\ndef add_header(infile, outfile, auto=True): \n    inf=open(infile,'r')\n    outf = open(outfile,'r')\n    header = inf.readlines()\n    content=outf.readlines()\n    if auto==True:\n        with open(outfile,'w') as output:\n            output.write(''.join(header)+ \"\\n\\n\" \\\n                            +''.join(content))  \n    else:\n        ctime=getStdTime(os.path.getctime(outfile))\n        title=\"title: \" + outfile.split('/')[1].split('.')[0]\n        print title\n        add_content=\"---\\n\"\n        add_content=add_content+title+'\\n'  #add title\n        add_content=add_content+ctime +'\\n' #add date\n        add_content=add_content+''.join(header)\n        with open(outfile,'w') as output:\n            output.write(''.join(add_content)+ \"\\n\\n\" \\\n                        +''.join(content))  \n    outf.close()\n    inf.close()\ndef addHeadAndFooter(path, header, footer, auto=False):\n    filelist=os.listdir(path)\n    for eachfile in filelist:\n        add_header(header,path + \"/\" + eachfile, auto)\n        add_footer(footer,path + \"/\" + eachfile)       \ndef getStdTime(seconds):\n    x = time.localtime(seconds)\n    return \"date: \"+ time.strftime('%Y-%m-%d %H:%M:%S',x)        \nif __name__=='__main__':\n    if (len(os.sys.argv)<4):\n        raise TypeError()\n    else:\n        print \"os.sys.arg\"\n    #path=\"path\"\n    #header=\"head.md\"\n    #footer=\"footer.md\"\n    os.chdir(\".\")\n    path=os.sys.argv[1]\n    print path\n    header=os.sys.argv[2]\n    footer=os.sys.argv[3]\n    filelist=os.listdir(path)\n    addHeadAndFooter(path,header,footer)\n    print \"Success added!\"    \n#----------------    \n# command \n# python AddHead.py \"path\" \"header.txt\" \"footer.txt\"\n#----------------\n```\n\n直接在console控制台上运行下列代码即可 \n\n```\npython AddHeader.py \"path\" \"header.txt\" \"footer.txt\"\n```\n\n\n\n---\n\n\n\n","source":"_posts/2015-11-03 Add header and footer to some file.md","raw":"---\nlayout: post\ndate: 2015-11-03 16:24\ntitle: \"Add header and footer to some file\"\ncategories: Python\ntag: Python\ncomment: true\n---\n\n今天整理资料的时候，发现要在很多文件中的头部和尾部添加相同的文本，于是自己使用Python做了一个简单的文件拼接功能，也可以说是文件追加功能，给一个文件批量追加头尾内容，达到省事的效果，顺便还可以练习下Python。下面来介绍下这个功能的代码：\n\n现在有三个文件，如下：\n\n- content.txt 位于一个叫path的文件中；\n- header.txt用于添加到content.txt头部的文件；\n- footer.txt用于添加到content.txt尾部的文件。\n\n\n现在要实现的功能就是，将header和footer分别添加到content的头部和尾部。 \n\n<!--more-->\n\n---\n\n函数说明：\n\n- add_footer(infile, outfile)：用于将footer内容添加到content中，第一个参数表示的添加到尾部的文件，如输入footer.txt，第二个为内容文件。如content.txt文件\n- add_header(infile, outfile, auto=True): 用于将一个文件放入好另一个文件的头部，如果auto=Ture，则不对内容做修改，auto为False的话，这里添加了部分需要的东西，如文件的创建时间、标题等信息。\n- addHeadAndFooter(path, header, footer, auto=False)：核心函数，调用头尾两个方法，此处的path为文件夹名称，该函数的功能是将path文件夹下的所有文件都添加头和尾的内容，auto默认为False，功能和上面的相同。\n- getStdTime(seconds):将时间戳格式的日期转换为标准格式，如：2015-11-03 10:24\n\n\n代码（AddHeader.py）：\n\n\n```\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov 03 10:32:26 2015\n@author: liudiwei\n\"\"\"\nimport os,time\ndef add_footer(infile, outfile):\n    with open(infile,'r') as inputfile:\n        with open(outfile,'a') as outfile:\n            outfile.write(\"\\n\\n\"+''.join(inputfile.readlines()))\n#如果auto==True，直接将文件内容加入到当前文件\ndef add_header(infile, outfile, auto=True): \n    inf=open(infile,'r')\n    outf = open(outfile,'r')\n    header = inf.readlines()\n    content=outf.readlines()\n    if auto==True:\n        with open(outfile,'w') as output:\n            output.write(''.join(header)+ \"\\n\\n\" \\\n                            +''.join(content))  \n    else:\n        ctime=getStdTime(os.path.getctime(outfile))\n        title=\"title: \" + outfile.split('/')[1].split('.')[0]\n        print title\n        add_content=\"---\\n\"\n        add_content=add_content+title+'\\n'  #add title\n        add_content=add_content+ctime +'\\n' #add date\n        add_content=add_content+''.join(header)\n        with open(outfile,'w') as output:\n            output.write(''.join(add_content)+ \"\\n\\n\" \\\n                        +''.join(content))  \n    outf.close()\n    inf.close()\ndef addHeadAndFooter(path, header, footer, auto=False):\n    filelist=os.listdir(path)\n    for eachfile in filelist:\n        add_header(header,path + \"/\" + eachfile, auto)\n        add_footer(footer,path + \"/\" + eachfile)       \ndef getStdTime(seconds):\n    x = time.localtime(seconds)\n    return \"date: \"+ time.strftime('%Y-%m-%d %H:%M:%S',x)        \nif __name__=='__main__':\n    if (len(os.sys.argv)<4):\n        raise TypeError()\n    else:\n        print \"os.sys.arg\"\n    #path=\"path\"\n    #header=\"head.md\"\n    #footer=\"footer.md\"\n    os.chdir(\".\")\n    path=os.sys.argv[1]\n    print path\n    header=os.sys.argv[2]\n    footer=os.sys.argv[3]\n    filelist=os.listdir(path)\n    addHeadAndFooter(path,header,footer)\n    print \"Success added!\"    \n#----------------    \n# command \n# python AddHead.py \"path\" \"header.txt\" \"footer.txt\"\n#----------------\n```\n\n直接在console控制台上运行下列代码即可 \n\n```\npython AddHeader.py \"path\" \"header.txt\" \"footer.txt\"\n```\n\n\n\n---\n\n\n\n","slug":"2015-11-03 Add header and footer to some file","published":1,"updated":"2015-11-19T07:50:44.443Z","comments":1,"photos":[],"link":"","_id":"cih8q8rol000yr8ujgswr7jj9"},{"layout":"post","date":"2015-10-29T12:24:00.000Z","title":"Python-RegEx（正则表达式）","comment":true,"_content":"\n关于Python的正则表达式，初步学习了下，感觉跟shell脚本的正则表达式大体相同，先来做个小结吧！\n\n## 正则表达式简介\n\n正则表达式在实际的文本文件处理中，经常用到，其实正则表达式并不是Python的一部分，其它语言中都有。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能真的十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。\n\n下图展示了使用正则表达式进行匹配的流程： \n\n![](http://ww4.sinaimg.cn/large/637f3c58gw1exic0q7k4ej20cj055t9e.jpg)\n\n<!-- more -->\n\n从上图我们可以看出，正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，来看看下面的这个正则表达式模式。\n\n|模式|描述|  \n|--------------|----|\n|^|\t匹配字符串的开头|\n|$|\t匹配字符串的末尾。|\n|.|\t匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。|\n|[...]|\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'|\n|[^...]|\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。|\n|*|\t匹配0个或多个的表达式。|\n|+|\t匹配1个或多个的表达式。|\n|?|\t 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式|\n|{ n,}|\t精确匹配n个前面表达式。|\n|{ n, m}|\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式|\n|(re)|\tG匹配括号内的表达式，也表示一个组|\n|(?imx)|\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。|\n|(?-imx)|\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。|\n|(?: re)|\t 类似 (...), 但是不表示一个组|\n|(?imx: re)|\t在括号中使用i, m, 或 x 可选标志|\n|(?-imx: re)|\t在括号中不使用i, m, 或 x 可选标志|\n|(?#...)|\t注释.|\n|(?= re)|\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。|\n|(?! re)|\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功|\n|(?> re)|\t匹配的独立模式，省去回溯。|\n|\\w|\t匹配字母数字,等价于'[A-Za-z0-9_]'|\n|\\W|\t匹配非字母数字, [^A-Za-z0-9_]'|\n|\\s|\t匹配任意空白字符，等价于[\\t\\n\\r\\f].|\n|\\S|\t匹配任意非空字符,等价于[^ \\f\\n\\r\\t\\v]|\n|\\d|\t匹配任意数字，等价于[0-9].|\n|\\D|\t匹配任意非数字,等价于[^0-9]。|\n|\\A|\t匹配字符串开始|\n|\\Z|\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c|\n|\\z|\t匹配字符串结束|\n|\\G|\t匹配最后匹配完成的位置。|\n|\\b|\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。|\n|\\B|\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。|\n|\\n, \\t, 等.|\t匹配一个换行符。匹配一个制表符。等|\n|\\1...\\9|\t匹配第n个分组的子表达式。|\n|\\10|\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。|\n\n\n下面从正则表达式的几个函数/方法来简单介绍下正则表达式的用法。\n\n---\n\n## re.match函数\n\nre.match 尝试**从字符串的开头匹配一个模式**，如：下面的例子匹配第一个单词。 \n\n```\nimport re\ntext = \"This is a very beautiful girl, I like her very much.\"\nm = re.match(r\"(\\w+)\\s\", text)\nif m:\n\tprint m.group(0), '\\n', m.group(1)\nelse:\n\tprint 'not match'  \n```\n\n输出:\n<pre><code class=\"markdown\">\nThis\nThis\n</code></pre>\n\nre.match的函数原型为：re.match(pattern, string, flags)\n\n* 第一个参数是正则表达式，这里为\"(\\w+)\\s\"，如果匹配成功，则返回一个Match，否则返回一个None；\n* 第二个参数表示要匹配的字符串；\n* 第三个参数是标致位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。\n\n---\n\n\n## re.search函数\n\nre.search函数会在字符串内查找模式匹配,只到找到第一个匹配然后返回，如果字符串没有匹配，则返回None。\n\n\n```\nimport re\ntext = \"This is a very beautiful girl, I like her very much.\"\nm = re.search(r'\\sbeaut(i)ful\\s', text)\nif m:\n\tprint m.group(0), m.group(1)\nelse:\n\tprint 'not search' \n```\n\n输出结果：\n\n<pre><code class=\"markdown\">\nbeautiful i\n</code></pre>\n\nre.search的函数原型为： re.search(pattern, string, flags)\n\n每个参数的含意与re.match一样。 \n\n---\n\n## re.match与re.search的区别\n\nre.match只匹配字符串的开始，如果字符串从一开始就不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。\n\n请看下面这个实例：\n\n\n```\nimport re\nline = \"This is a very beautiful girl, I like her very much.\";\nm = re.match( r'girl', line, re.M|re.I)\nif m:\n   print \"match --> m.group() : \", m.group()\nelse:\n   print \"No match!!\"\n```\n<pre><code class=\"markdown\">\nsearch --> m.group() :  girl\nsearch --> matchObj.group() :  dogs\n</code></pre>\n\n```\nm = re.search( r'girl', line, re.M|re.I)\nif m:\n   print \"search --> m.group() : \", m.group()\nelse:\n   print \"No match!\"\n```\n\n以上实例运行结果如下：\n\n\n<pre><code class=\"markdown\">\nsearch --> m.group() :  girl\n</code></pre>\n\n---\n\n## re.sub函数\n\nre.sub用于替换字符串中的匹配项。下面一个例子将字符串中的空格 ' ' 替换成 '-' : \n\n```\nimport re\ntext = \"I like Cats more than dogs!\"\nprint re.sub(r'\\s+', '-', text) \n\n```\n\n输出：\n\n<pre><code class=\"markdown\">\nI-like-Cats-more-than-dogs!\n</code></pre>\n\n\nre.sub的函数原型为：re.sub(pattern, repl, string, count)\n\n其中第二个函数是替换后的字符串；本例中为'-'\n\n第四个参数指替换个数。默认为0，表示每个匹配项都替换。\n\nre.sub还允许使用函数对匹配项的替换进行复杂的处理。如：re.sub(r'\\s', lambda m: '[' + m.group(0) + ']', text, 0)；将字符串中的空格' '替换为'[ ]'。\n\n\n---\n\n\n## re.split函数\n\n可以使用re.split来分割字符串，如：re.split(r'-', text)；将字符串按'-'符号分割成一个单词列表。\n\n```\nimport re\ntext=\"I-really-like-this-girl!\"\nre.split(r'-',text)\n```\n\n输出：\n\n<pre><code class=\"markdown\">\n['I', 'really', 'like', 'this', 'girl!']\n</code></pre>\n\n\n---\n\n## re.findall函数\n\nre.findall可以获取字符串中所有匹配的字符串。如：re.findall(r'\\w*i\\w*', text)；获取字符串中，包含'oo'的所有单词。\n\n\n```\nimport re\ntext=\"I-really-like-this-girl!\"\nre.findall(r'girl',text)\n```\n输出结果：\n<pre><code class=\"markdown\">\n['like', 'this', 'girl']\n</code></pre>\n\n---\n\n## re.compile函数\n\n可以把正则表达式编译成一个正则表达式对象。可以把那些经常使用的正则表达式编译成正则表达式对象，这样可以提高一定的效率。下面是一个正则表达式对象的一个例子：\n\n\n```\nimport re\nregex = re.compile(r'\\w*er\\w*') # 将正则表达式编译成Pattern对象\ntext = \"This is a very beautiful girl, I like her very much.\"\nm = regex.search(text) #使用regex来匹配text字符串\nif m:\n\tprint m.group() # 使用Match获得分组信息\nprint regex.findall(text)   #查找所有包含'oo'的单词\nprint regex.sub(lambda m: '[' + m.group(0) + ']', text) #将字符串中含有'oo'的单词用[]括起来。\n```\n\n分别输出下列信息：\n\n<pre><code class=\"markdown\">\n'very'\n['very', 'her', 'very']\nThis is a [very] beautiful girl, I like [her] [very] much.\n</code></pre>\n\n---\n\n## 邮箱验证\n\n使用Python写一个简单的邮箱验证的正则表达式：\n\n根据csu.ldw@csu.edu.cn来填写规则\n\n规则：\n\n- @前面可以有'.'、‘_’,'-'，但不能出现在头尾，而且不能连续出现\n- @后面到结尾之间，可以有多个子域名\n- 邮箱的结尾为2~5个字母，比如cn、com、name等\n \n```\n#-*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct 29 20:28:57 2015\n@author: liudiwei\n\"\"\"\nimport re\nregex = re.compile('^[A-Za-z0-9]+(([\\.\\_\\-])?[A-Za-z0-9]+)+@([A-Za-z]+.)+[A-Za-z]{2,5}$')\nm = regex.match(\"csu.ldw@csu.edu.cn\")\nif m:\n    print m.group()\nelse:\n    print \"no match!\"\n```\n\n测试输出：\n\n<pre><code class=\"markdown\">\ncsu.ldw@csu.edu.cn\n</code></pre>\n\n当m = regex.match(\"_csu.ldw@csu.edu.cn\")\n当邮箱为：\n\n<pre><code class=\"markdown\">\n_csu.ldw@csu.edu.cn  \ncsu.ldw_@csu.edu.cn\ncsu.ldw@csu_.edu.cn\n_csu.ldw@csu.edu.cn1\n</code></pre>\n\n都不会匹配\n\n提示：合法邮箱的规则可能不够完善，这里就简单的匹配这三个规则吧！\n\n---","source":"_posts/2015-10-29 Python RegEx.md","raw":"---\nlayout: post\ndate: 2015-10-29 20:24\ntitle: \"Python-RegEx（正则表达式）\"\ncategories: Python\ntag: \n\t- Python\n\t- 正则表达式\ncomment: true\n---\n\n关于Python的正则表达式，初步学习了下，感觉跟shell脚本的正则表达式大体相同，先来做个小结吧！\n\n## 正则表达式简介\n\n正则表达式在实际的文本文件处理中，经常用到，其实正则表达式并不是Python的一部分，其它语言中都有。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能真的十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。\n\n下图展示了使用正则表达式进行匹配的流程： \n\n![](http://ww4.sinaimg.cn/large/637f3c58gw1exic0q7k4ej20cj055t9e.jpg)\n\n<!-- more -->\n\n从上图我们可以看出，正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，来看看下面的这个正则表达式模式。\n\n|模式|描述|  \n|--------------|----|\n|^|\t匹配字符串的开头|\n|$|\t匹配字符串的末尾。|\n|.|\t匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。|\n|[...]|\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'|\n|[^...]|\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。|\n|*|\t匹配0个或多个的表达式。|\n|+|\t匹配1个或多个的表达式。|\n|?|\t 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式|\n|{ n,}|\t精确匹配n个前面表达式。|\n|{ n, m}|\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式|\n|(re)|\tG匹配括号内的表达式，也表示一个组|\n|(?imx)|\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。|\n|(?-imx)|\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。|\n|(?: re)|\t 类似 (...), 但是不表示一个组|\n|(?imx: re)|\t在括号中使用i, m, 或 x 可选标志|\n|(?-imx: re)|\t在括号中不使用i, m, 或 x 可选标志|\n|(?#...)|\t注释.|\n|(?= re)|\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。|\n|(?! re)|\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功|\n|(?> re)|\t匹配的独立模式，省去回溯。|\n|\\w|\t匹配字母数字,等价于'[A-Za-z0-9_]'|\n|\\W|\t匹配非字母数字, [^A-Za-z0-9_]'|\n|\\s|\t匹配任意空白字符，等价于[\\t\\n\\r\\f].|\n|\\S|\t匹配任意非空字符,等价于[^ \\f\\n\\r\\t\\v]|\n|\\d|\t匹配任意数字，等价于[0-9].|\n|\\D|\t匹配任意非数字,等价于[^0-9]。|\n|\\A|\t匹配字符串开始|\n|\\Z|\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c|\n|\\z|\t匹配字符串结束|\n|\\G|\t匹配最后匹配完成的位置。|\n|\\b|\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。|\n|\\B|\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。|\n|\\n, \\t, 等.|\t匹配一个换行符。匹配一个制表符。等|\n|\\1...\\9|\t匹配第n个分组的子表达式。|\n|\\10|\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。|\n\n\n下面从正则表达式的几个函数/方法来简单介绍下正则表达式的用法。\n\n---\n\n## re.match函数\n\nre.match 尝试**从字符串的开头匹配一个模式**，如：下面的例子匹配第一个单词。 \n\n```\nimport re\ntext = \"This is a very beautiful girl, I like her very much.\"\nm = re.match(r\"(\\w+)\\s\", text)\nif m:\n\tprint m.group(0), '\\n', m.group(1)\nelse:\n\tprint 'not match'  \n```\n\n输出:\n<pre><code class=\"markdown\">\nThis\nThis\n</code></pre>\n\nre.match的函数原型为：re.match(pattern, string, flags)\n\n* 第一个参数是正则表达式，这里为\"(\\w+)\\s\"，如果匹配成功，则返回一个Match，否则返回一个None；\n* 第二个参数表示要匹配的字符串；\n* 第三个参数是标致位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。\n\n---\n\n\n## re.search函数\n\nre.search函数会在字符串内查找模式匹配,只到找到第一个匹配然后返回，如果字符串没有匹配，则返回None。\n\n\n```\nimport re\ntext = \"This is a very beautiful girl, I like her very much.\"\nm = re.search(r'\\sbeaut(i)ful\\s', text)\nif m:\n\tprint m.group(0), m.group(1)\nelse:\n\tprint 'not search' \n```\n\n输出结果：\n\n<pre><code class=\"markdown\">\nbeautiful i\n</code></pre>\n\nre.search的函数原型为： re.search(pattern, string, flags)\n\n每个参数的含意与re.match一样。 \n\n---\n\n## re.match与re.search的区别\n\nre.match只匹配字符串的开始，如果字符串从一开始就不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。\n\n请看下面这个实例：\n\n\n```\nimport re\nline = \"This is a very beautiful girl, I like her very much.\";\nm = re.match( r'girl', line, re.M|re.I)\nif m:\n   print \"match --> m.group() : \", m.group()\nelse:\n   print \"No match!!\"\n```\n<pre><code class=\"markdown\">\nsearch --> m.group() :  girl\nsearch --> matchObj.group() :  dogs\n</code></pre>\n\n```\nm = re.search( r'girl', line, re.M|re.I)\nif m:\n   print \"search --> m.group() : \", m.group()\nelse:\n   print \"No match!\"\n```\n\n以上实例运行结果如下：\n\n\n<pre><code class=\"markdown\">\nsearch --> m.group() :  girl\n</code></pre>\n\n---\n\n## re.sub函数\n\nre.sub用于替换字符串中的匹配项。下面一个例子将字符串中的空格 ' ' 替换成 '-' : \n\n```\nimport re\ntext = \"I like Cats more than dogs!\"\nprint re.sub(r'\\s+', '-', text) \n\n```\n\n输出：\n\n<pre><code class=\"markdown\">\nI-like-Cats-more-than-dogs!\n</code></pre>\n\n\nre.sub的函数原型为：re.sub(pattern, repl, string, count)\n\n其中第二个函数是替换后的字符串；本例中为'-'\n\n第四个参数指替换个数。默认为0，表示每个匹配项都替换。\n\nre.sub还允许使用函数对匹配项的替换进行复杂的处理。如：re.sub(r'\\s', lambda m: '[' + m.group(0) + ']', text, 0)；将字符串中的空格' '替换为'[ ]'。\n\n\n---\n\n\n## re.split函数\n\n可以使用re.split来分割字符串，如：re.split(r'-', text)；将字符串按'-'符号分割成一个单词列表。\n\n```\nimport re\ntext=\"I-really-like-this-girl!\"\nre.split(r'-',text)\n```\n\n输出：\n\n<pre><code class=\"markdown\">\n['I', 'really', 'like', 'this', 'girl!']\n</code></pre>\n\n\n---\n\n## re.findall函数\n\nre.findall可以获取字符串中所有匹配的字符串。如：re.findall(r'\\w*i\\w*', text)；获取字符串中，包含'oo'的所有单词。\n\n\n```\nimport re\ntext=\"I-really-like-this-girl!\"\nre.findall(r'girl',text)\n```\n输出结果：\n<pre><code class=\"markdown\">\n['like', 'this', 'girl']\n</code></pre>\n\n---\n\n## re.compile函数\n\n可以把正则表达式编译成一个正则表达式对象。可以把那些经常使用的正则表达式编译成正则表达式对象，这样可以提高一定的效率。下面是一个正则表达式对象的一个例子：\n\n\n```\nimport re\nregex = re.compile(r'\\w*er\\w*') # 将正则表达式编译成Pattern对象\ntext = \"This is a very beautiful girl, I like her very much.\"\nm = regex.search(text) #使用regex来匹配text字符串\nif m:\n\tprint m.group() # 使用Match获得分组信息\nprint regex.findall(text)   #查找所有包含'oo'的单词\nprint regex.sub(lambda m: '[' + m.group(0) + ']', text) #将字符串中含有'oo'的单词用[]括起来。\n```\n\n分别输出下列信息：\n\n<pre><code class=\"markdown\">\n'very'\n['very', 'her', 'very']\nThis is a [very] beautiful girl, I like [her] [very] much.\n</code></pre>\n\n---\n\n## 邮箱验证\n\n使用Python写一个简单的邮箱验证的正则表达式：\n\n根据csu.ldw@csu.edu.cn来填写规则\n\n规则：\n\n- @前面可以有'.'、‘_’,'-'，但不能出现在头尾，而且不能连续出现\n- @后面到结尾之间，可以有多个子域名\n- 邮箱的结尾为2~5个字母，比如cn、com、name等\n \n```\n#-*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct 29 20:28:57 2015\n@author: liudiwei\n\"\"\"\nimport re\nregex = re.compile('^[A-Za-z0-9]+(([\\.\\_\\-])?[A-Za-z0-9]+)+@([A-Za-z]+.)+[A-Za-z]{2,5}$')\nm = regex.match(\"csu.ldw@csu.edu.cn\")\nif m:\n    print m.group()\nelse:\n    print \"no match!\"\n```\n\n测试输出：\n\n<pre><code class=\"markdown\">\ncsu.ldw@csu.edu.cn\n</code></pre>\n\n当m = regex.match(\"_csu.ldw@csu.edu.cn\")\n当邮箱为：\n\n<pre><code class=\"markdown\">\n_csu.ldw@csu.edu.cn  \ncsu.ldw_@csu.edu.cn\ncsu.ldw@csu_.edu.cn\n_csu.ldw@csu.edu.cn1\n</code></pre>\n\n都不会匹配\n\n提示：合法邮箱的规则可能不够完善，这里就简单的匹配这三个规则吧！\n\n---","slug":"2015-10-29 Python RegEx","published":1,"updated":"2015-11-19T07:50:44.442Z","comments":1,"photos":[],"link":"","_id":"cih8q8roq0012r8ujskztdftj"},{"layout":"post","date":"2015-10-25T02:24:00.000Z","title":"scikit-learn Preprocessing","comment":true,"_content":"\n本文主要是对照[scikit-learn的preprocessing](http://scikit-learn.org/stable/modules/preprocessing.html#preprocessing)章节结合代码简单的回顾下预处理技术的几种方法，主要包括标准化、数据最大最小缩放处理、正则化、特征二值化和数据缺失值处理。内容比较简单，仅供参考！\n\n首先来回顾一下下面要用到的基本知识。\n\n<!-- more -->\n## **一、知识回顾**\n\n均值公式：\n\n$$\\bar{x}=\\frac{1}{n}\\sum\\_{i=1}^{n}x_{i}$$\n\n方差公式：\n\n$$s^{2}=\\frac{1}{n}\\sum\\_{i=1}^{n}(x_{i}-\\bar{x})^{2}$$\n\n0-范数，向量中非零元素的个数。\n\n1-范数：\n\n$$||X||= \\sum\\_{i=1}^{n} |x_{i}|$$\n\n2-范数：\n\n$$||X||\\_{2} =  (\\sum\\_{i=1}^{n} x_{i}^{2})^{\\frac{1}{2}}$$\n\np-范数的计算公式：\n\n$$||X||_{p}=(|x1|^{p}+|x2|^{p}+...+|xn|^{p})^{\\frac{1}{p}}$$\n\n---\n\n数据标准化：当单个特征的样本取值相差甚大或明显不遵从高斯正态分布时，标准化表现的效果较差。实际操作中，经常忽略特征数据的分布形状，移除每个特征均值，划分离散特征的标准差，从而等级化，进而实现数据中心化。\n\n## **二、标准化(Standardization)，或者去除均值和方差进行缩放**\n\n公式为：(X-X_mean)/X_std 计算时对每个属性/每列分别进行.\n\n将数据按其属性(按列进行)减去其均值，然后除以其方差。最后得到的结果是，对每个属性/每列来说所有数据都聚集在0附近，方差值为1。\n\n首先说明下sklearn中preprocessing库里面的scale函数使用方法：\n\n```\nsklearn.preprocessing.scale(X, axis=0, with_mean=True,with_std=True,copy=True)\n```\n\n根据参数的不同，可以沿任意轴标准化数据集。\n\n参数解释：\n\n- X：数组或者矩阵\n- axis：int类型，初始值为0，axis用来计算均值 means 和标准方差 standard deviations. 如果是0，则单独的标准化每个特征（列），如果是1，则标准化每个观测样本（行）。\n- with_mean: boolean类型，默认为True，表示将数据均值规范到0\n- with_std: boolean类型，默认为True，表示将数据方差规范到1\n\n**一个简单的例子**\n\n假设现在我构造一个数据集X，然后想要将其标准化。下面使用不同的方法来标准化X：\n\n**方法一：使用sklearn.preprocessing.scale()函数**\n\n**方法说明：**\n\n- X.mean(axis=0)用来计算数据X每个特征的均值；\n- X.std(axis=0)用来计算数据X每个特征的方差；\n- preprocessing.scale(X)直接标准化数据X。\n\n将代码整理到一个文件中：\n\n```\nfrom sklearn import preprocessing \nimport numpy as np\nX = np.array([[ 1., -1.,  2.],\n              [ 2.,  0.,  0.],\n              [ 0.,  1., -1.]])\n# calculate mean\nX_mean = X.mean(axis=0)\n# calculate variance \nX_std = X.std(axis=0)\n# standardize X\nX1 = (X-X_mean)/X_std\n# use function preprocessing.scale to standardize X\nX_scale = preprocessing.scale(X)\n```\n\n最后X_scale的值和X1的值是一样的，前面是单独的使用数学公式来计算，主要是为了形成一个对比，能够更好的理解scale()方法。\n\n**方法2：sklearn.preprocessing.StandardScaler类**\n\n该方法也可以对数据X进行标准化处理，实例如下：\n\n```\nfrom sklearn import preprocessing \nimport numpy as np\nX = np.array([[ 1., -1.,  2.],\n              [ 2.,  0.,  0.],\n              [ 0.,  1., -1.]])\nscaler = preprocessing.StandardScaler()\nX_scaled = scaler.fit_transform(X)\n```\n\n这两个方法得到最后的结果都是一样的。\n\n---\n\n## **三、将特征的取值缩小到一个范围（如0到1）**\n\n除了上述介绍的方法之外，另一种常用的方法是将属性缩放到一个指定的最大值和最小值(通常是1-0)之间，这可以通过preprocessing.MinMaxScaler类来实现。\n\n使用这种方法的目的包括：\n\n- 1、对于方差非常小的属性可以增强其稳定性；\n- 2、维持稀疏矩阵中为0的条目。\n\n下面将数据缩至0-1之间，采用MinMaxScaler函数\n\n```\nfrom sklearn import preprocessing \nimport numpy as np\nX = np.array([[ 1., -1.,  2.],\n              [ 2.,  0.,  0.],\n              [ 0.,  1., -1.]])\nmin_max_scaler = preprocessing.MinMaxScaler()\nX_minMax = min_max_scaler.fit_transform(X)\n```\n最后输出：\n\n```\narray([[ 0.5       ,  0.        ,  1.        ],\n       [ 1.        ,  0.5       ,  0.33333333],\n       [ 0.        ,  1.        ,  0.        ]])\n```\n\n测试用例：\n\n```\n>>> X_test = np.array([[ -3., -1.,  4.]])\n>>> X_test_minmax = min_max_scaler.transform(X_test)\n>>> X_test_minmax\narray([[-1.5       ,  0.        ,  1.66666667]])\n```\n\n注意：这些变换都是对列进行处理。\n\n\n\n当然，在构造类对象的时候也可以直接指定最大最小值的范围：feature_range=(min, max)，此时应用的公式变为：\n\n```\nX_std=(X-X.min(axis=0))/(X.max(axis=0)-X.min(axis=0))\nX_minmax=X_std/(X.max(axis=0)-X.min(axis=0))+X.min(axis=0))\n```\n---\n\n## **四、正则化(Normalization)**\n\n正则化的过程是将每个样本缩放到单位范数(每个样本的范数为1)，如果要使用如二次型(点积)或者其它核方法计算两个样本之间的相似性这个方法会很有用。\n\n该方法是文本分类和聚类分析中经常使用的向量空间模型（Vector Space Model)的基础.\n\nNormalization主要思想是对每个样本计算其p-范数，然后对该样本中每个元素除以该范数，这样处理的结果是使得每个处理后样本的p-范数(l1-norm,l2-norm)等于1。\n\n**方法1：使用sklearn.preprocessing.normalize()函数**\n\n```\n>>> X = [[ 1., -1.,  2.],\n...      [ 2.,  0.,  0.],\n...      [ 0.,  1., -1.]]\n>>> X_normalized = preprocessing.normalize(X, norm='l2')\n>>> X_normalized                                      \narray([[ 0.40..., -0.40...,  0.81...],\n       [ 1.  ...,  0.  ...,  0.  ...],\n       [ 0.  ...,  0.70..., -0.70...]])\n```\n\n**方法2：sklearn.preprocessing.StandardScaler类**\n\n```\n>>> normalizer = preprocessing.Normalizer().fit(X)  # fit does nothing\n>>> normalizer\nNormalizer(copy=True, norm='l2')\n```\n\n然后使用正则化实例来转换样本向量：\n\n```\n>>> normalizer.transform(X)                            \narray([[ 0.40..., -0.40...,  0.81...],\n       [ 1.  ...,  0.  ...,  0.  ...],\n       [ 0.  ...,  0.70..., -0.70...]])\n>>> normalizer.transform([[-1.,  1., 0.]])             \narray([[-0.70...,  0.70...,  0.  ...]])\n```\n\n两种方法都可以，效果是一样的。\n\n\n---\n\n## **五、二值化(Binarization)**\n\n特征的二值化主要是为了将数据特征转变成boolean变量。在sklearn中，sklearn.preprocessing.Binarizer函数可以实现这一功能。实例如下：\n\n```\n>>> X = [[ 1., -1.,  2.],\n...      [ 2.,  0.,  0.],\n...      [ 0.,  1., -1.]]\n>>> binarizer = preprocessing.Binarizer().fit(X)  # fit does nothing\n>>> binarizer\nBinarizer(copy=True, threshold=0.0)\n>>> binarizer.transform(X)\narray([[ 1.,  0.,  1.],\n       [ 1.,  0.,  0.],\n       [ 0.,  1.,  0.]])\n```\n\nBinarizer函数也可以设定一个阈值，结果数据值大于阈值的为1，小于阈值的为0，实例代码如下：\n\n```\n>>> binarizer = preprocessing.Binarizer(threshold=1.1)\n>>> binarizer.transform(X)\narray([[ 0.,  0.,  1.],\n       [ 1.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n```\n\n---\n\n## **六、缺失值处理**\n\n由于不同的原因，许多现实中的数据集都包含有缺失值，要么是空白的，要么使用NaNs或者其它的符号替代。这些数据无法直接使用scikit-learn分类器直接训练，所以需要进行处理。幸运地是，sklearn中的**Imputer**类提供了一些基本的方法来处理缺失值，如使用均值、中位值或者缺失值所在列中频繁出现的值来替换。\n\n下面是使用均值来处理的实例：\n\n```\n>>> import numpy as np\n>>> from sklearn.preprocessing import Imputer\n>>> imp = Imputer(missing_values='NaN', strategy='mean', axis=0)\n>>> imp.fit([[1, 2], [np.nan, 3], [7, 6]])\nImputer(axis=0, copy=True, missing_values='NaN', strategy='mean', verbose=0)\n>>> X = [[np.nan, 2], [6, np.nan], [7, 6]]\n>>> print(imp.transform(X))                           \n[[ 4.          2.        ]\n [ 6.          3.666...]\n [ 7.          6.        ]]\n```\n\nImputer类同样支持稀疏矩阵：\n\n```\n>>> import scipy.sparse as sp\n>>> X = sp.csc_matrix([[1, 2], [0, 3], [7, 6]])\n>>> imp = Imputer(missing_values=0, strategy='mean', axis=0)\n>>> imp.fit(X)\nImputer(axis=0, copy=True, missing_values=0, strategy='mean', verbose=0)\n>>> X_test = sp.csc_matrix([[0, 2], [6, 0], [7, 6]])\n>>> print(imp.transform(X_test))                      \n[[ 4.          2.        ]\n [ 6.          3.666...]\n [ 7.          6.        ]]\n```\n\n\n本文讲解的比较接单，如果对这些不是很理解的话，请到scikit-learn的官网中查看英文版本：[preprocessing](http://scikit-learn.org/stable/modules/preprocessing.html#preprocessing).\n\n## **References**\n\n- [Scikit-learn preprocessing](http://scikit-learn.org/stable/modules/preprocessing.html#preprocessing).\n\n\n\n---\n\n\n\n\n\n\n","source":"_posts/2015-10-25 scikit-learn preprocessing.md","raw":"---\nlayout: post\ndate: 2015-10-25 10:24\ntitle: \"scikit-learn Preprocessing\"\ncategories: ML\ntag: \n\t- preprocessing\n\t- Machine Learning\ncomment: true\n---\n\n本文主要是对照[scikit-learn的preprocessing](http://scikit-learn.org/stable/modules/preprocessing.html#preprocessing)章节结合代码简单的回顾下预处理技术的几种方法，主要包括标准化、数据最大最小缩放处理、正则化、特征二值化和数据缺失值处理。内容比较简单，仅供参考！\n\n首先来回顾一下下面要用到的基本知识。\n\n<!-- more -->\n## **一、知识回顾**\n\n均值公式：\n\n$$\\bar{x}=\\frac{1}{n}\\sum\\_{i=1}^{n}x_{i}$$\n\n方差公式：\n\n$$s^{2}=\\frac{1}{n}\\sum\\_{i=1}^{n}(x_{i}-\\bar{x})^{2}$$\n\n0-范数，向量中非零元素的个数。\n\n1-范数：\n\n$$||X||= \\sum\\_{i=1}^{n} |x_{i}|$$\n\n2-范数：\n\n$$||X||\\_{2} =  (\\sum\\_{i=1}^{n} x_{i}^{2})^{\\frac{1}{2}}$$\n\np-范数的计算公式：\n\n$$||X||_{p}=(|x1|^{p}+|x2|^{p}+...+|xn|^{p})^{\\frac{1}{p}}$$\n\n---\n\n数据标准化：当单个特征的样本取值相差甚大或明显不遵从高斯正态分布时，标准化表现的效果较差。实际操作中，经常忽略特征数据的分布形状，移除每个特征均值，划分离散特征的标准差，从而等级化，进而实现数据中心化。\n\n## **二、标准化(Standardization)，或者去除均值和方差进行缩放**\n\n公式为：(X-X_mean)/X_std 计算时对每个属性/每列分别进行.\n\n将数据按其属性(按列进行)减去其均值，然后除以其方差。最后得到的结果是，对每个属性/每列来说所有数据都聚集在0附近，方差值为1。\n\n首先说明下sklearn中preprocessing库里面的scale函数使用方法：\n\n```\nsklearn.preprocessing.scale(X, axis=0, with_mean=True,with_std=True,copy=True)\n```\n\n根据参数的不同，可以沿任意轴标准化数据集。\n\n参数解释：\n\n- X：数组或者矩阵\n- axis：int类型，初始值为0，axis用来计算均值 means 和标准方差 standard deviations. 如果是0，则单独的标准化每个特征（列），如果是1，则标准化每个观测样本（行）。\n- with_mean: boolean类型，默认为True，表示将数据均值规范到0\n- with_std: boolean类型，默认为True，表示将数据方差规范到1\n\n**一个简单的例子**\n\n假设现在我构造一个数据集X，然后想要将其标准化。下面使用不同的方法来标准化X：\n\n**方法一：使用sklearn.preprocessing.scale()函数**\n\n**方法说明：**\n\n- X.mean(axis=0)用来计算数据X每个特征的均值；\n- X.std(axis=0)用来计算数据X每个特征的方差；\n- preprocessing.scale(X)直接标准化数据X。\n\n将代码整理到一个文件中：\n\n```\nfrom sklearn import preprocessing \nimport numpy as np\nX = np.array([[ 1., -1.,  2.],\n              [ 2.,  0.,  0.],\n              [ 0.,  1., -1.]])\n# calculate mean\nX_mean = X.mean(axis=0)\n# calculate variance \nX_std = X.std(axis=0)\n# standardize X\nX1 = (X-X_mean)/X_std\n# use function preprocessing.scale to standardize X\nX_scale = preprocessing.scale(X)\n```\n\n最后X_scale的值和X1的值是一样的，前面是单独的使用数学公式来计算，主要是为了形成一个对比，能够更好的理解scale()方法。\n\n**方法2：sklearn.preprocessing.StandardScaler类**\n\n该方法也可以对数据X进行标准化处理，实例如下：\n\n```\nfrom sklearn import preprocessing \nimport numpy as np\nX = np.array([[ 1., -1.,  2.],\n              [ 2.,  0.,  0.],\n              [ 0.,  1., -1.]])\nscaler = preprocessing.StandardScaler()\nX_scaled = scaler.fit_transform(X)\n```\n\n这两个方法得到最后的结果都是一样的。\n\n---\n\n## **三、将特征的取值缩小到一个范围（如0到1）**\n\n除了上述介绍的方法之外，另一种常用的方法是将属性缩放到一个指定的最大值和最小值(通常是1-0)之间，这可以通过preprocessing.MinMaxScaler类来实现。\n\n使用这种方法的目的包括：\n\n- 1、对于方差非常小的属性可以增强其稳定性；\n- 2、维持稀疏矩阵中为0的条目。\n\n下面将数据缩至0-1之间，采用MinMaxScaler函数\n\n```\nfrom sklearn import preprocessing \nimport numpy as np\nX = np.array([[ 1., -1.,  2.],\n              [ 2.,  0.,  0.],\n              [ 0.,  1., -1.]])\nmin_max_scaler = preprocessing.MinMaxScaler()\nX_minMax = min_max_scaler.fit_transform(X)\n```\n最后输出：\n\n```\narray([[ 0.5       ,  0.        ,  1.        ],\n       [ 1.        ,  0.5       ,  0.33333333],\n       [ 0.        ,  1.        ,  0.        ]])\n```\n\n测试用例：\n\n```\n>>> X_test = np.array([[ -3., -1.,  4.]])\n>>> X_test_minmax = min_max_scaler.transform(X_test)\n>>> X_test_minmax\narray([[-1.5       ,  0.        ,  1.66666667]])\n```\n\n注意：这些变换都是对列进行处理。\n\n\n\n当然，在构造类对象的时候也可以直接指定最大最小值的范围：feature_range=(min, max)，此时应用的公式变为：\n\n```\nX_std=(X-X.min(axis=0))/(X.max(axis=0)-X.min(axis=0))\nX_minmax=X_std/(X.max(axis=0)-X.min(axis=0))+X.min(axis=0))\n```\n---\n\n## **四、正则化(Normalization)**\n\n正则化的过程是将每个样本缩放到单位范数(每个样本的范数为1)，如果要使用如二次型(点积)或者其它核方法计算两个样本之间的相似性这个方法会很有用。\n\n该方法是文本分类和聚类分析中经常使用的向量空间模型（Vector Space Model)的基础.\n\nNormalization主要思想是对每个样本计算其p-范数，然后对该样本中每个元素除以该范数，这样处理的结果是使得每个处理后样本的p-范数(l1-norm,l2-norm)等于1。\n\n**方法1：使用sklearn.preprocessing.normalize()函数**\n\n```\n>>> X = [[ 1., -1.,  2.],\n...      [ 2.,  0.,  0.],\n...      [ 0.,  1., -1.]]\n>>> X_normalized = preprocessing.normalize(X, norm='l2')\n>>> X_normalized                                      \narray([[ 0.40..., -0.40...,  0.81...],\n       [ 1.  ...,  0.  ...,  0.  ...],\n       [ 0.  ...,  0.70..., -0.70...]])\n```\n\n**方法2：sklearn.preprocessing.StandardScaler类**\n\n```\n>>> normalizer = preprocessing.Normalizer().fit(X)  # fit does nothing\n>>> normalizer\nNormalizer(copy=True, norm='l2')\n```\n\n然后使用正则化实例来转换样本向量：\n\n```\n>>> normalizer.transform(X)                            \narray([[ 0.40..., -0.40...,  0.81...],\n       [ 1.  ...,  0.  ...,  0.  ...],\n       [ 0.  ...,  0.70..., -0.70...]])\n>>> normalizer.transform([[-1.,  1., 0.]])             \narray([[-0.70...,  0.70...,  0.  ...]])\n```\n\n两种方法都可以，效果是一样的。\n\n\n---\n\n## **五、二值化(Binarization)**\n\n特征的二值化主要是为了将数据特征转变成boolean变量。在sklearn中，sklearn.preprocessing.Binarizer函数可以实现这一功能。实例如下：\n\n```\n>>> X = [[ 1., -1.,  2.],\n...      [ 2.,  0.,  0.],\n...      [ 0.,  1., -1.]]\n>>> binarizer = preprocessing.Binarizer().fit(X)  # fit does nothing\n>>> binarizer\nBinarizer(copy=True, threshold=0.0)\n>>> binarizer.transform(X)\narray([[ 1.,  0.,  1.],\n       [ 1.,  0.,  0.],\n       [ 0.,  1.,  0.]])\n```\n\nBinarizer函数也可以设定一个阈值，结果数据值大于阈值的为1，小于阈值的为0，实例代码如下：\n\n```\n>>> binarizer = preprocessing.Binarizer(threshold=1.1)\n>>> binarizer.transform(X)\narray([[ 0.,  0.,  1.],\n       [ 1.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n```\n\n---\n\n## **六、缺失值处理**\n\n由于不同的原因，许多现实中的数据集都包含有缺失值，要么是空白的，要么使用NaNs或者其它的符号替代。这些数据无法直接使用scikit-learn分类器直接训练，所以需要进行处理。幸运地是，sklearn中的**Imputer**类提供了一些基本的方法来处理缺失值，如使用均值、中位值或者缺失值所在列中频繁出现的值来替换。\n\n下面是使用均值来处理的实例：\n\n```\n>>> import numpy as np\n>>> from sklearn.preprocessing import Imputer\n>>> imp = Imputer(missing_values='NaN', strategy='mean', axis=0)\n>>> imp.fit([[1, 2], [np.nan, 3], [7, 6]])\nImputer(axis=0, copy=True, missing_values='NaN', strategy='mean', verbose=0)\n>>> X = [[np.nan, 2], [6, np.nan], [7, 6]]\n>>> print(imp.transform(X))                           \n[[ 4.          2.        ]\n [ 6.          3.666...]\n [ 7.          6.        ]]\n```\n\nImputer类同样支持稀疏矩阵：\n\n```\n>>> import scipy.sparse as sp\n>>> X = sp.csc_matrix([[1, 2], [0, 3], [7, 6]])\n>>> imp = Imputer(missing_values=0, strategy='mean', axis=0)\n>>> imp.fit(X)\nImputer(axis=0, copy=True, missing_values=0, strategy='mean', verbose=0)\n>>> X_test = sp.csc_matrix([[0, 2], [6, 0], [7, 6]])\n>>> print(imp.transform(X_test))                      \n[[ 4.          2.        ]\n [ 6.          3.666...]\n [ 7.          6.        ]]\n```\n\n\n本文讲解的比较接单，如果对这些不是很理解的话，请到scikit-learn的官网中查看英文版本：[preprocessing](http://scikit-learn.org/stable/modules/preprocessing.html#preprocessing).\n\n## **References**\n\n- [Scikit-learn preprocessing](http://scikit-learn.org/stable/modules/preprocessing.html#preprocessing).\n\n\n\n---\n\n\n\n\n\n\n","slug":"2015-10-25 scikit-learn preprocessing","published":1,"updated":"2015-11-19T07:50:44.442Z","comments":1,"photos":[],"link":"","_id":"cih8q8row0017r8uj22tc1brk"},{"layout":"post","date":"2015-10-24T02:24:00.000Z","title":"机器学习之特征工程","comment":true,"_content":"\n在这个振奋人心的程序员节日里，我决定认真地写一篇文章来纪念一下自己这长达六年程序员史。o(╯□╰)o\n\n本文是一篇关于特征工程的总结类文章，如有不足之处或理解有偏差的地方，还望多多指教。\n\n首先，给一张特征工程的思维导图吧：\n\n![特征工程](http://ww1.sinaimg.cn/large/637f3c58gw1exd7mcjk7yj28k33uwaoe.jpg)\n\n<!-- more -->\n<center>\n<font color=\"green\">**【如果要浏览图片，建议将其下载到本地，使用图片浏览软件查看】**</font>\n</center>\n\n关于特征工程（Feature Engineering），已经是很古老很常见的话题了，坊间常说：“数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已”。由此可见，特征工程在机器学习中占有相当重要的地位。在实际应用当中，可以说特征工程是机器学习成功的关键。纵观Kaggle、KDD等国内外大大小小的比赛，每个竞赛的冠军其实并没有用到很高深的算法，大多数都是在特征工程这个环节做出了出色的工作，然后使用一些常见的算法，比如LR，就能得到出色的性能。遗憾的是，在很多的书籍中并没有直接提到Feature Engineering，更多的是Feature selection。这也并不，很多ML书籍都是以讲解算法为主，他们的目的是从理论到实践来理解算法，所以用到的数据要么是使用代码生成的，要么是已经处理好的数据，并没有提到特征工程。在这篇文章，我打算自我总结下特征工程，让自己对特征工程有个全面的认识。在这我要说明一下，我并不是说那些书写的不好，其实都很有不错，主要是因为它们的目的是理解算法，所以直接给出数据相对而言对于学习和理解算法效果更佳。\n\n\n这篇文章主要从以下三个问题出发来理解特征工程：\n\n- 特征工程是什么？\n- 为什么要做特征工程？\n- 应该如何做特征工程？\n\n对于第一个问题，我会通过特征工程的目的来解释什么是特征工程。对于第二个问题，主要从特征工程的重要性来阐述。对于第三个问题，我会从特征工程的子问题以及简单的处理方法来进一步说明。下面来看看详细内容！\n\n---\n\n## **1、特征工程是什么**\n\n首先来解释下什么是特征工程？\n\n当你想要你的预测模型性能达到最佳时，你要做的不仅是要选取最好的算法，还要尽可能的从原始数据中获取更多的信息。那么问题来了，<font color=\"red\">你应该如何为你的预测模型得到更好的数据呢？</font>\n\n想必到了这里你也应该猜到了，是的，这就是特征工程要做的事，它的目的就是<font color=\"red\">获取更好的训练数据</font>。\n\n关于特征工程的定义，Wikipedia上是这样说的：\n\n\n\tFeature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. ”\n\n\t\n我的理解：\n\n\n\t特征工程是利用数据领域的相关知识来创建能够使机器学习算法达到最佳性能的特征的过程。\n\n\n简而言之，特征工程就是一个把原始数据转变成特征的过程，这些特征可以很好的描述这些数据，并且利用它们建立的模型在未知数据上的表现性能可以达到最优（或者接近最佳性能）。从数学的角度来看，特征工程就是人工地去设计输入变量X。\n\n特征工程更是一门艺术，跟编程一样。导致许多机器学习项目成功和失败的主要因素就是使用了不同的特征。说了这么多，想必你也大概知道了为什么要做特征工程，下面来说说特征工程的重要性。\n\n---\n\n## **2、特征工程的重要性**\n\n\nOK！知道了特征工程是什么，那么我们必须要来了解下特征工程的重要性，为什么在实际工作中都要有特征工程这个过程，下面不同的角度来分析一下。\n\n首先，我们大家都知道，数据特征会直接影响我们模型的预测性能。你可以这么说：“选择的特征越好，最终得到的性能也就越好”。这句话说得没错，但也会给我们造成误解。事实上，<font color=\"green\">你得到的实验结果取决于你选择的模型、获取的数据以及使用的特征，甚至你问题的形式和你用来评估精度的客观方法也扮演了一部分</font>。此外，你的实验结果还受到许多相互依赖的属性的影响，你需要的是能够很好地描述你数据内部结构的好特征。\n\n**（1）特征越好，灵活性越强**\n\n只要特征选得好，即使是一般的模型（或算法）也能获得很好的性能，因为大多数模型（或算法）在好的数据特征下表现的性能都还不错。<font color=\"red\">好特征的灵活性在于它允许你选择不复杂的模型，同时运行速度也更快，也更容易理解和维护</font>。\n\n**（2）特征越好，构建的模型越简单**\n\n有了好的特征，即便你的参数不是最优的，你的模型性能也能仍然会表现的很nice，所以你就不需要花太多的时间去寻找最有参数，这大大的降低了模型的复杂度，使模型趋于简单。\n\n**（3）特征越好，模型的性能越出色**\n\n显然，这一点是毫无争议的，我们进行特征工程的最终目的就是提升模型的性能。\n\n下面从特征的子问题来分析下特征工程。\n\n---\n\n## **3、特征工程子问题**\n\n大家通常会把特征工程看做是一个问题。事实上，在特征工程下面，还有许多的子问题，主要包括：Feature Selection（特征选择）、Feature Extraction（特征提取）和Feature construction（特征构造）.下面从这三个子问题来详细介绍。\n\n### **3.1 特征选择Feature Selection**\n\n首先，从特征开始说起，假设你现在有一个标准的Excel表格数据，它的每一行表示的是一个观测样本数据，表格数据中的每一列就是一个特征。在这些特征中，有的特征携带的信息量丰富，有的（或许很少）则属于无关数据（irrelevant data），我们可以通过特征项和类别项之间的相关性（特征重要性）来衡量。比如，在实际应用中，常用的方法就是使用一些评价指标单独地计算出单个特征跟类别变量之间的关系。如Pearson相关系数，Gini-index（基尼指数），IG（信息增益）等，下面举Pearson指数为例，它的计算方式如下：\n\n$$r_{xy}^2=(\\frac{con(x,y)}{\\sqrt{var(x)var(y)}})$$\n\n其中，x属于X，X表一个特征的多个观测值，y表示这个特征观测值对应的类别列表。\n\nPearson相关系数的取值在0到1之间，如果你使用这个评价指标来计算所有特征和类别标号的相关性，那么得到这些相关性之后，你可以将它们从高到低进行排名，然后选择一个子集作为特征子集（比如top 10%），接着用这些特征进行训练，看看性能如何。此外，你还可以画出不同子集的一个精度图，根据绘制的图形来找出性能最好的一组特征。\n\n这就是特征工程的子问题之一——特征选择，它的目的是<font color=\"red\">**从特征集合中挑选一组最具统计意义的特征子集，从而达到降维的效果**</font>。\n\n做特征选择的原因是因为这些特征对于目标类别的作用并不是相等的，一些无关的数据需要删掉。做特征选择的方法有多种，上面提到的这种特征子集选择的方法属于filter（刷选器）方法，它主要侧重于单个特征跟目标变量的相关性。优点是计算时间上较高效,对于过拟合问题也具有较高的鲁棒性。缺点就是倾向于选择冗余的特征,因为他们不考虑特征之间的相关性,有可能某一个特征的分类能力很差，但是它和某些其它特征组合起来会得到不错的效果。另外做特征子集选取的方法还有wrapper（封装器）和Embeded(集成方法)。wrapper方法实质上是一个分类器，封装器用选取的特征子集对样本集进行分类，分类的精度作为衡量特征子集好坏的标准,经过比较选出最好的特征子集。常用的有逐步回归（Stepwise regression）、向前选择（Forward selection）和向后选择（Backward selection）。它的优点是考虑了特征与特征之间的关联性，缺点是：当观测数据较少时容易过拟合，而当特征数量较多时,计算时间又会增长。对于Embeded集成方法，它是学习器自身自主选择特征，如使用Regularization做特征选择，或者使用决策树思想，细节这里就不做介绍了。这里还提一下，在做实验的时候，我们有时候会用Random Forest和Gradient boosting做特征选择，本质上都是基于决策树来做的特征选择，只是细节上有些区别。\n\n综上所述，特征选择过程一般包括产生过程，评价函数，停止准则，验证过程，这4个部分。如下图所示：\n\n<center> \n![feature selection](/assets/images/feature selection.png)\n</center>\n\n\n(1) **产生过程( Generation Procedure )**：产生过程是搜索特征子集的过程，负责为评价函数提供特征子集。搜索特征子集的过程有多种，将在2.2小节展开介绍。\n(2) **评价函数( Evaluation Function )**：评价函数是评价一个特征子集好坏程度的一个准则。评价函数将在2.3小节展开介绍。\n(3) **停止准则( Stopping Criterion )**：停止准则是与评价函数相关的，一般是一个阈值，当评价函数值达到这个阈值后就可停止搜索。\n(4) **验证过程( Validation Procedure )** ：在验证数据集上验证选出来的特征子集的有效性。\n\n### **3.2 特征提取**\n\n特征提取的子问题之二——特征提取。\n\n原则上来讲，特征提取应该在特征选择之前。特征提取的对象是原始数据（raw data），它的目的是<font color=\"red\">**自动地构建新的特征，将原始特征转换为一组具有明显物理意义（Gabor、几何特征[角点、不变量]、纹理[LBP HOG]）或者统计意义或核的特征**</font>。比如通过变换特征取值来减少原始数据中某个特征的取值个数等。对于表格数据，你可以在你设计的特征矩阵上使用主要成分分析（Principal Component Analysis，PCA)来进行特征提取从而创建新的特征。对于图像数据，可能还包括了线或边缘检测。\n\n常用的方法有：\n\n- PCA (Principal component analysis，主成分分析)\n- ICA (Independent component analysis，独立成分分析)\n- LDA （Linear Discriminant Analysis，线性判别分析）\n\n对于图像识别中，还有SIFT方法。\n\n\n\n### **3.3 特征构建 Feature Construction**\n\n特征提取的子问题之二——特征构建。\n\n在上面的特征选择部分，我们提到了对特征重要性进行排名。那么，这些特征是如何得到的呢？在实际应用中，显然是不可能凭空而来的，需要我们手工去构建特征。关于特征构建的定义，可以这么说：<font color=\"green\">**特征构建指的是从原始数据中人工的构建新的特征**</font>。我们需要人工的创建它们。这需要我们花大量的时间去研究真实的数据样本，思考问题的潜在形式和数据结构，同时能够更好地应用到预测模型中。\n\n特征构建需要很强的洞察力和分析能力，要求我们能够从原始数据中找出一些具有物理意义的特征。假设原始数据是表格数据，一般你可以使用混合属性或者组合属性来创建新的特征，或是分解或切分原有的特征来创建新的特征。\n\n\n---\n\n## **4、特征工程处理过程**\n\n那么问题来了，特征工程具体是在哪个步骤做呢？\n\n具体的机器学习过程是这样的一个过程：\n\n- 1.（Task before here）\n- 2.选择数据(Select Data): 整合数据，将数据规范化成一个数据集，收集起来.\n- 3.数据预处理（Preprocess Data）: 数据格式化，数据清理，采样等.\n- 4.数据转换（Transform Data）: <font color=\"red\">**这个阶段做特征工程**</font>.\n- 5.数据建模（Model Data）: 建立模型，评估模型并逐步优化.\n- (Tasks after here…)\n\n我们发现，特征工程和数据转换其实是等价的。<font color=\"red\">**事实上，特征工程是一个迭代过程，我们需要不断的设计特征、选择特征、建立模型、评估模型，然后才能得到最终的model**</font>。下面是特征工程的一个迭代过程：\n\n- 1.头脑风暴式特征：意思就是进你可能的从原始数据中提取特征，暂时不考虑其重要性，对应于特征构建；\n- 2.设计特征：根据你的问题，你可以使用自动地特征提取，或者是手工构造特征，或者两者混合使用；\n- 3.选择特征：使用不同的特征重要性评分和特征选择方法进行特征选择；\n- 4.评估模型：使用你选择的特征进行建模，同时使用未知的数据来评估你的模型精度。\n\nBy the way, 在做feature selection的时候，会涉及到特征学习（Feature Learning），这里说下特征学习的概念，一般而言，特征学习（Feature Learning）是指学习输入特征和一个训练实例真是类别之间的关系。\n\n下面举个例子来简单了解下特征工程的处理。\n\n首先是来说下特征提取，假设你的数据里现在有一个颜色类别的属性，比如是“item_Color\",它的取值有三个，分别是：*red，blue，unknown*。从特征提取的角度来看，你可以将其转化成一个二值特征“*has_color*”，取值为1或0。其中1表示有颜色，0表示没颜色。你还可以将其转换成三个二值属性：*Is_Red, Is_Blue and Is_Unknown*。这样构建特征之后，你就可以使用简单的线性模型进行训练了。\n\n另外再举一个例子，假设你有一个日期时间 (i.e. 2014-09-20T20:45:40Z)，这个该如何转换呢？\n\n对于这种时间的数据，我们可以根据需求提取出多种属性。比如，如果你想知道某一天的时间段跟其它属性的关系，你可以创建一个数字特征“**Hour_Of_Day**”来帮你建立一个回归模型，或者你可以建立一个序数特征，“Part_Of_Day”,取值“*Morning,Midday,Afternoon,Night*”来关联你的数据。\n\n此外，你还可以按星期或季度来构建属性，等等等等……\n\n关于特征构建，主要是尽可能的从原始数据中构建特征，而特征选择，经过上面的分析，想必大家也知道了，其实就是达到一个降维的效果。\n\n只要分析能力和实践能力够强，那么特征构建和特征提取对你而言就会显得相对比较简单，所以抓紧时间好好实践吧！\n\n---\n\n## **Conclusion**\n\n恩。说了这么多，大家可能对特征工程、特征选择、特征提取和特征构建有点混乱了，下面来简单的做个总结：\n\n首先来说说这几个术语：\n\n- 特征工程：利用数据领域的相关知识来创建能够使机器学习算法达到最佳性能的特征的过程。\n- 特征构建：是原始数据中人工的构建新的特征。\n- 特征提取：自动地构建新的特征，将原始特征转换为一组具有明显物理意义或者统计意义或核的特征。\n- 特征选择：从特征集合中挑选一组最具统计意义的特征子集，从而达到降维的效果\n\n了解这几个术语的意思后，我们来看看他们之间的关系。\n\n在Quora中有人这么说：\n\nFeature engineering is a super-set of  activities which include feature extraction, feature construction and feature selection. Each of the three are important steps and none should be ignored. We could make a generalization of the importance though, from my experience the relative importance of the steps would be feature construction > feature extraction > feature selection.\n\n用中文来说就是：<font color=\"green\">**特征工程是一个超集，它包括特征提取、特征构建和特征选择这三个子模块。在实践当中，每一个子模块都非常重要，忽略不得。根据答主的经验，他将这三个子模块的重要性进行了一个排名，即：特征构建>特征提取>特征选择。**</font>\n\n事实上，真的是这样，<font color=\"red\">**如果特征构建做的不好，那么它会直接影响特征提取，进而影响了特征选择，最终影响模型的性能**</font>。\n\n\nOK！关于特征工程就到此为止吧，如果有纰漏的地方，还望多多指导！作为一枚行走在ML界的程序员，就让我们快乐的建模，快乐的做特征工程吧^_^！Happy coding, happy modeling！\n\n## **References**\n\n\n- [Neglected machine learning ideas](https://www.quora.com/What-are-some-general-tips-on-feature-selection-and-engineering-that-every-data-scientist-should-know)\n- [Q&A with Xavier Conort](http://blog.kaggle.com/2013/04/10/qa-with-xavier-conort/)\n- [https://www.quora.com/What-is-feature-engineering](https://www.quora.com/What-is-feature-engineering)\n- [Feature_engineering-wikipedia](https://en.wikipedia.org/wiki/Feature_engineering)\n- [An Introduction to Feature Selection](http://machinelearningmastery.com/an-introduction-to-feature-selection/)\n- [Discover Feature Engineering, How to Engineer Features and How to Get Good at It](http://machinelearningmastery.com/discover-feature-engineering-how-to-engineer-features-and-how-to-get-good-at-it/)\n- [How valuable do you think feature selection is in machine learning? Which do you think improves accuracy more, feature selection or feature engineering?](https://www.quora.com/How-valuable-do-you-think-feature-selection-is-in-machine-learning-Which-do-you-think-improves-accuracy-more-feature-selection-or-feature-engineering)\n\n\n---\n\n\n\n\n","source":"_posts/2015-10-24 feature engineering.md","raw":"---\nlayout: post\ndate: 2015-10-24 10:24\ntitle: \"机器学习之特征工程\"\ncategories: ML\ntag: \n\t- Feature Engineering\n\t- Machine Learning\ncomment: true\n---\n\n在这个振奋人心的程序员节日里，我决定认真地写一篇文章来纪念一下自己这长达六年程序员史。o(╯□╰)o\n\n本文是一篇关于特征工程的总结类文章，如有不足之处或理解有偏差的地方，还望多多指教。\n\n首先，给一张特征工程的思维导图吧：\n\n![特征工程](http://ww1.sinaimg.cn/large/637f3c58gw1exd7mcjk7yj28k33uwaoe.jpg)\n\n<!-- more -->\n<center>\n<font color=\"green\">**【如果要浏览图片，建议将其下载到本地，使用图片浏览软件查看】**</font>\n</center>\n\n关于特征工程（Feature Engineering），已经是很古老很常见的话题了，坊间常说：“数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已”。由此可见，特征工程在机器学习中占有相当重要的地位。在实际应用当中，可以说特征工程是机器学习成功的关键。纵观Kaggle、KDD等国内外大大小小的比赛，每个竞赛的冠军其实并没有用到很高深的算法，大多数都是在特征工程这个环节做出了出色的工作，然后使用一些常见的算法，比如LR，就能得到出色的性能。遗憾的是，在很多的书籍中并没有直接提到Feature Engineering，更多的是Feature selection。这也并不，很多ML书籍都是以讲解算法为主，他们的目的是从理论到实践来理解算法，所以用到的数据要么是使用代码生成的，要么是已经处理好的数据，并没有提到特征工程。在这篇文章，我打算自我总结下特征工程，让自己对特征工程有个全面的认识。在这我要说明一下，我并不是说那些书写的不好，其实都很有不错，主要是因为它们的目的是理解算法，所以直接给出数据相对而言对于学习和理解算法效果更佳。\n\n\n这篇文章主要从以下三个问题出发来理解特征工程：\n\n- 特征工程是什么？\n- 为什么要做特征工程？\n- 应该如何做特征工程？\n\n对于第一个问题，我会通过特征工程的目的来解释什么是特征工程。对于第二个问题，主要从特征工程的重要性来阐述。对于第三个问题，我会从特征工程的子问题以及简单的处理方法来进一步说明。下面来看看详细内容！\n\n---\n\n## **1、特征工程是什么**\n\n首先来解释下什么是特征工程？\n\n当你想要你的预测模型性能达到最佳时，你要做的不仅是要选取最好的算法，还要尽可能的从原始数据中获取更多的信息。那么问题来了，<font color=\"red\">你应该如何为你的预测模型得到更好的数据呢？</font>\n\n想必到了这里你也应该猜到了，是的，这就是特征工程要做的事，它的目的就是<font color=\"red\">获取更好的训练数据</font>。\n\n关于特征工程的定义，Wikipedia上是这样说的：\n\n\n\tFeature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. ”\n\n\t\n我的理解：\n\n\n\t特征工程是利用数据领域的相关知识来创建能够使机器学习算法达到最佳性能的特征的过程。\n\n\n简而言之，特征工程就是一个把原始数据转变成特征的过程，这些特征可以很好的描述这些数据，并且利用它们建立的模型在未知数据上的表现性能可以达到最优（或者接近最佳性能）。从数学的角度来看，特征工程就是人工地去设计输入变量X。\n\n特征工程更是一门艺术，跟编程一样。导致许多机器学习项目成功和失败的主要因素就是使用了不同的特征。说了这么多，想必你也大概知道了为什么要做特征工程，下面来说说特征工程的重要性。\n\n---\n\n## **2、特征工程的重要性**\n\n\nOK！知道了特征工程是什么，那么我们必须要来了解下特征工程的重要性，为什么在实际工作中都要有特征工程这个过程，下面不同的角度来分析一下。\n\n首先，我们大家都知道，数据特征会直接影响我们模型的预测性能。你可以这么说：“选择的特征越好，最终得到的性能也就越好”。这句话说得没错，但也会给我们造成误解。事实上，<font color=\"green\">你得到的实验结果取决于你选择的模型、获取的数据以及使用的特征，甚至你问题的形式和你用来评估精度的客观方法也扮演了一部分</font>。此外，你的实验结果还受到许多相互依赖的属性的影响，你需要的是能够很好地描述你数据内部结构的好特征。\n\n**（1）特征越好，灵活性越强**\n\n只要特征选得好，即使是一般的模型（或算法）也能获得很好的性能，因为大多数模型（或算法）在好的数据特征下表现的性能都还不错。<font color=\"red\">好特征的灵活性在于它允许你选择不复杂的模型，同时运行速度也更快，也更容易理解和维护</font>。\n\n**（2）特征越好，构建的模型越简单**\n\n有了好的特征，即便你的参数不是最优的，你的模型性能也能仍然会表现的很nice，所以你就不需要花太多的时间去寻找最有参数，这大大的降低了模型的复杂度，使模型趋于简单。\n\n**（3）特征越好，模型的性能越出色**\n\n显然，这一点是毫无争议的，我们进行特征工程的最终目的就是提升模型的性能。\n\n下面从特征的子问题来分析下特征工程。\n\n---\n\n## **3、特征工程子问题**\n\n大家通常会把特征工程看做是一个问题。事实上，在特征工程下面，还有许多的子问题，主要包括：Feature Selection（特征选择）、Feature Extraction（特征提取）和Feature construction（特征构造）.下面从这三个子问题来详细介绍。\n\n### **3.1 特征选择Feature Selection**\n\n首先，从特征开始说起，假设你现在有一个标准的Excel表格数据，它的每一行表示的是一个观测样本数据，表格数据中的每一列就是一个特征。在这些特征中，有的特征携带的信息量丰富，有的（或许很少）则属于无关数据（irrelevant data），我们可以通过特征项和类别项之间的相关性（特征重要性）来衡量。比如，在实际应用中，常用的方法就是使用一些评价指标单独地计算出单个特征跟类别变量之间的关系。如Pearson相关系数，Gini-index（基尼指数），IG（信息增益）等，下面举Pearson指数为例，它的计算方式如下：\n\n$$r_{xy}^2=(\\frac{con(x,y)}{\\sqrt{var(x)var(y)}})$$\n\n其中，x属于X，X表一个特征的多个观测值，y表示这个特征观测值对应的类别列表。\n\nPearson相关系数的取值在0到1之间，如果你使用这个评价指标来计算所有特征和类别标号的相关性，那么得到这些相关性之后，你可以将它们从高到低进行排名，然后选择一个子集作为特征子集（比如top 10%），接着用这些特征进行训练，看看性能如何。此外，你还可以画出不同子集的一个精度图，根据绘制的图形来找出性能最好的一组特征。\n\n这就是特征工程的子问题之一——特征选择，它的目的是<font color=\"red\">**从特征集合中挑选一组最具统计意义的特征子集，从而达到降维的效果**</font>。\n\n做特征选择的原因是因为这些特征对于目标类别的作用并不是相等的，一些无关的数据需要删掉。做特征选择的方法有多种，上面提到的这种特征子集选择的方法属于filter（刷选器）方法，它主要侧重于单个特征跟目标变量的相关性。优点是计算时间上较高效,对于过拟合问题也具有较高的鲁棒性。缺点就是倾向于选择冗余的特征,因为他们不考虑特征之间的相关性,有可能某一个特征的分类能力很差，但是它和某些其它特征组合起来会得到不错的效果。另外做特征子集选取的方法还有wrapper（封装器）和Embeded(集成方法)。wrapper方法实质上是一个分类器，封装器用选取的特征子集对样本集进行分类，分类的精度作为衡量特征子集好坏的标准,经过比较选出最好的特征子集。常用的有逐步回归（Stepwise regression）、向前选择（Forward selection）和向后选择（Backward selection）。它的优点是考虑了特征与特征之间的关联性，缺点是：当观测数据较少时容易过拟合，而当特征数量较多时,计算时间又会增长。对于Embeded集成方法，它是学习器自身自主选择特征，如使用Regularization做特征选择，或者使用决策树思想，细节这里就不做介绍了。这里还提一下，在做实验的时候，我们有时候会用Random Forest和Gradient boosting做特征选择，本质上都是基于决策树来做的特征选择，只是细节上有些区别。\n\n综上所述，特征选择过程一般包括产生过程，评价函数，停止准则，验证过程，这4个部分。如下图所示：\n\n<center> \n![feature selection](/assets/images/feature selection.png)\n</center>\n\n\n(1) **产生过程( Generation Procedure )**：产生过程是搜索特征子集的过程，负责为评价函数提供特征子集。搜索特征子集的过程有多种，将在2.2小节展开介绍。\n(2) **评价函数( Evaluation Function )**：评价函数是评价一个特征子集好坏程度的一个准则。评价函数将在2.3小节展开介绍。\n(3) **停止准则( Stopping Criterion )**：停止准则是与评价函数相关的，一般是一个阈值，当评价函数值达到这个阈值后就可停止搜索。\n(4) **验证过程( Validation Procedure )** ：在验证数据集上验证选出来的特征子集的有效性。\n\n### **3.2 特征提取**\n\n特征提取的子问题之二——特征提取。\n\n原则上来讲，特征提取应该在特征选择之前。特征提取的对象是原始数据（raw data），它的目的是<font color=\"red\">**自动地构建新的特征，将原始特征转换为一组具有明显物理意义（Gabor、几何特征[角点、不变量]、纹理[LBP HOG]）或者统计意义或核的特征**</font>。比如通过变换特征取值来减少原始数据中某个特征的取值个数等。对于表格数据，你可以在你设计的特征矩阵上使用主要成分分析（Principal Component Analysis，PCA)来进行特征提取从而创建新的特征。对于图像数据，可能还包括了线或边缘检测。\n\n常用的方法有：\n\n- PCA (Principal component analysis，主成分分析)\n- ICA (Independent component analysis，独立成分分析)\n- LDA （Linear Discriminant Analysis，线性判别分析）\n\n对于图像识别中，还有SIFT方法。\n\n\n\n### **3.3 特征构建 Feature Construction**\n\n特征提取的子问题之二——特征构建。\n\n在上面的特征选择部分，我们提到了对特征重要性进行排名。那么，这些特征是如何得到的呢？在实际应用中，显然是不可能凭空而来的，需要我们手工去构建特征。关于特征构建的定义，可以这么说：<font color=\"green\">**特征构建指的是从原始数据中人工的构建新的特征**</font>。我们需要人工的创建它们。这需要我们花大量的时间去研究真实的数据样本，思考问题的潜在形式和数据结构，同时能够更好地应用到预测模型中。\n\n特征构建需要很强的洞察力和分析能力，要求我们能够从原始数据中找出一些具有物理意义的特征。假设原始数据是表格数据，一般你可以使用混合属性或者组合属性来创建新的特征，或是分解或切分原有的特征来创建新的特征。\n\n\n---\n\n## **4、特征工程处理过程**\n\n那么问题来了，特征工程具体是在哪个步骤做呢？\n\n具体的机器学习过程是这样的一个过程：\n\n- 1.（Task before here）\n- 2.选择数据(Select Data): 整合数据，将数据规范化成一个数据集，收集起来.\n- 3.数据预处理（Preprocess Data）: 数据格式化，数据清理，采样等.\n- 4.数据转换（Transform Data）: <font color=\"red\">**这个阶段做特征工程**</font>.\n- 5.数据建模（Model Data）: 建立模型，评估模型并逐步优化.\n- (Tasks after here…)\n\n我们发现，特征工程和数据转换其实是等价的。<font color=\"red\">**事实上，特征工程是一个迭代过程，我们需要不断的设计特征、选择特征、建立模型、评估模型，然后才能得到最终的model**</font>。下面是特征工程的一个迭代过程：\n\n- 1.头脑风暴式特征：意思就是进你可能的从原始数据中提取特征，暂时不考虑其重要性，对应于特征构建；\n- 2.设计特征：根据你的问题，你可以使用自动地特征提取，或者是手工构造特征，或者两者混合使用；\n- 3.选择特征：使用不同的特征重要性评分和特征选择方法进行特征选择；\n- 4.评估模型：使用你选择的特征进行建模，同时使用未知的数据来评估你的模型精度。\n\nBy the way, 在做feature selection的时候，会涉及到特征学习（Feature Learning），这里说下特征学习的概念，一般而言，特征学习（Feature Learning）是指学习输入特征和一个训练实例真是类别之间的关系。\n\n下面举个例子来简单了解下特征工程的处理。\n\n首先是来说下特征提取，假设你的数据里现在有一个颜色类别的属性，比如是“item_Color\",它的取值有三个，分别是：*red，blue，unknown*。从特征提取的角度来看，你可以将其转化成一个二值特征“*has_color*”，取值为1或0。其中1表示有颜色，0表示没颜色。你还可以将其转换成三个二值属性：*Is_Red, Is_Blue and Is_Unknown*。这样构建特征之后，你就可以使用简单的线性模型进行训练了。\n\n另外再举一个例子，假设你有一个日期时间 (i.e. 2014-09-20T20:45:40Z)，这个该如何转换呢？\n\n对于这种时间的数据，我们可以根据需求提取出多种属性。比如，如果你想知道某一天的时间段跟其它属性的关系，你可以创建一个数字特征“**Hour_Of_Day**”来帮你建立一个回归模型，或者你可以建立一个序数特征，“Part_Of_Day”,取值“*Morning,Midday,Afternoon,Night*”来关联你的数据。\n\n此外，你还可以按星期或季度来构建属性，等等等等……\n\n关于特征构建，主要是尽可能的从原始数据中构建特征，而特征选择，经过上面的分析，想必大家也知道了，其实就是达到一个降维的效果。\n\n只要分析能力和实践能力够强，那么特征构建和特征提取对你而言就会显得相对比较简单，所以抓紧时间好好实践吧！\n\n---\n\n## **Conclusion**\n\n恩。说了这么多，大家可能对特征工程、特征选择、特征提取和特征构建有点混乱了，下面来简单的做个总结：\n\n首先来说说这几个术语：\n\n- 特征工程：利用数据领域的相关知识来创建能够使机器学习算法达到最佳性能的特征的过程。\n- 特征构建：是原始数据中人工的构建新的特征。\n- 特征提取：自动地构建新的特征，将原始特征转换为一组具有明显物理意义或者统计意义或核的特征。\n- 特征选择：从特征集合中挑选一组最具统计意义的特征子集，从而达到降维的效果\n\n了解这几个术语的意思后，我们来看看他们之间的关系。\n\n在Quora中有人这么说：\n\nFeature engineering is a super-set of  activities which include feature extraction, feature construction and feature selection. Each of the three are important steps and none should be ignored. We could make a generalization of the importance though, from my experience the relative importance of the steps would be feature construction > feature extraction > feature selection.\n\n用中文来说就是：<font color=\"green\">**特征工程是一个超集，它包括特征提取、特征构建和特征选择这三个子模块。在实践当中，每一个子模块都非常重要，忽略不得。根据答主的经验，他将这三个子模块的重要性进行了一个排名，即：特征构建>特征提取>特征选择。**</font>\n\n事实上，真的是这样，<font color=\"red\">**如果特征构建做的不好，那么它会直接影响特征提取，进而影响了特征选择，最终影响模型的性能**</font>。\n\n\nOK！关于特征工程就到此为止吧，如果有纰漏的地方，还望多多指导！作为一枚行走在ML界的程序员，就让我们快乐的建模，快乐的做特征工程吧^_^！Happy coding, happy modeling！\n\n## **References**\n\n\n- [Neglected machine learning ideas](https://www.quora.com/What-are-some-general-tips-on-feature-selection-and-engineering-that-every-data-scientist-should-know)\n- [Q&A with Xavier Conort](http://blog.kaggle.com/2013/04/10/qa-with-xavier-conort/)\n- [https://www.quora.com/What-is-feature-engineering](https://www.quora.com/What-is-feature-engineering)\n- [Feature_engineering-wikipedia](https://en.wikipedia.org/wiki/Feature_engineering)\n- [An Introduction to Feature Selection](http://machinelearningmastery.com/an-introduction-to-feature-selection/)\n- [Discover Feature Engineering, How to Engineer Features and How to Get Good at It](http://machinelearningmastery.com/discover-feature-engineering-how-to-engineer-features-and-how-to-get-good-at-it/)\n- [How valuable do you think feature selection is in machine learning? Which do you think improves accuracy more, feature selection or feature engineering?](https://www.quora.com/How-valuable-do-you-think-feature-selection-is-in-machine-learning-Which-do-you-think-improves-accuracy-more-feature-selection-or-feature-engineering)\n\n\n---\n\n\n\n\n","slug":"2015-10-24 feature engineering","published":1,"updated":"2015-11-19T07:50:44.441Z","comments":1,"photos":[],"link":"","_id":"cih8q8rp3001cr8ujo0v58wds"},{"layout":"post","date":"2015-10-21T08:45:44.000Z","title":"Windows下使用 git push 命令的无密码设置","_content":"\n在使用git时，每次进行git push时都需要输入用户名和密码，简直让人抓狂呀。下面介绍一种方法，可以避免用户名和密码输入，节省大量时间。\n\n## 1.添加环境变量\n\n首先在系统变量中添加一个环境变量HOME，内容为\n\n```\nHOME%USERPROFILE%\n```\n\n<center>\n![配置环境变量](http://ww4.sinaimg.cn/large/637f3c58gw1exbx3roqvcj20bo0cadgy.jpg)\n</center>\n\n<!-- more -->\n## 2.新建配置文件\n\n由于使用的是Windows，所以进入%HOME%目录（如我的:C:\\Users\\username），新建一个名为\"_netrc\"的文件，文件中内容格式如下：\n\n```\nmachine github.com\nlogin your-username\npassword your-password\n```\n\n接着，打开git bash后，输入git push 命令就无需再输入用户名和密码了。\n\n爽歪歪啦~\n\n\n---\n\n","source":"_posts/2015-10-21 Windows git push no password.md","raw":"---\nlayout: post\ndate: 2015-10-21 16:45:44\ntag: GitHub\ntitle: \"Windows下使用 git push 命令的无密码设置\"\ncategories: GitHub\n---\n\n在使用git时，每次进行git push时都需要输入用户名和密码，简直让人抓狂呀。下面介绍一种方法，可以避免用户名和密码输入，节省大量时间。\n\n## 1.添加环境变量\n\n首先在系统变量中添加一个环境变量HOME，内容为\n\n```\nHOME%USERPROFILE%\n```\n\n<center>\n![配置环境变量](http://ww4.sinaimg.cn/large/637f3c58gw1exbx3roqvcj20bo0cadgy.jpg)\n</center>\n\n<!-- more -->\n## 2.新建配置文件\n\n由于使用的是Windows，所以进入%HOME%目录（如我的:C:\\Users\\username），新建一个名为\"_netrc\"的文件，文件中内容格式如下：\n\n```\nmachine github.com\nlogin your-username\npassword your-password\n```\n\n接着，打开git bash后，输入git push 命令就无需再输入用户名和密码了。\n\n爽歪歪啦~\n\n\n---\n\n","slug":"2015-10-21 Windows git push no password","published":1,"updated":"2015-11-19T07:50:44.440Z","comments":1,"photos":[],"link":"","_id":"cih8q8rp9001hr8ujii1nvg1s"},{"layout":"post","title":"机器学习-个人资料整理","date":"2015-09-23T14:22:22.000Z","comments":1,"_content":"\n\n学习Machine Learning也有很长一段时间了，前段时间在paper中应用了GTB（Gradient Tree Boosting）算法。在我的数据集上GTB的performance比Random Forest要稍微强一点，整个experiment做完之后，有许多东西都来不及及时整理，很多都遗忘了。打算接下来的时间里，好好整理下自己的学习资料，这份资料绝对不是一时半会就整理得完的，先开个头吧，以后会间断性更新该blog的。\n\n下面来做个资料整理吧。\n\n<!-- more -->\n\n## **书籍推荐**\n\n机器学习的书籍很多，下面推荐几本本人用过而且觉得还不错的书籍。优于机器学习是一门跨领域的学科，所以在书籍上并非全是机器学习的书籍:\n\n- 1.《机器学习实战》**Machine Learning in Action [美] Peter Harington 著**。该书贯穿了10个最受欢迎的机器学习算法，提供了案例研究问题并用Python代码实例来解决。我本人比较喜欢这本书，因为里面的代码给了我很大的帮助，自己在学习机器学习算法的时候，理论上很多东西不太理解透，通过该书实践之后，在算法层面又有了进一步的提高。\n- 2.《统计学习方法》 李航著。该书比较详细地介绍了算法的原理，只从理论层面来研究算法。通过这本书和《机器学习实战》两本书相结合，一本讲理论，一本着手实践，加在一起会有事半功倍的效果。\n- 3.《数据挖掘概念与技术》 韩家炜著。该书介绍了数据挖掘的常用技术，比较详实，但本人觉得不太适合初学者，当时自己初学的时候看的就是这本书，结果最后很多地方理解的不是很好，后来通过《统计学习方法》和算法实践之后，再回头看《数据挖掘概念与技术》，感觉就轻松多了。\n- 4.《数学之美》 吴军著。本书可以当做业余书籍来看，可以在无聊的时候看看，不过里面讲的东西还是挺有用的。\n- 5.《Python科学计算》该书可以当做Python编程参考书籍，但前提是你喜欢使用Python，并爱上了它，不然这本书还是蛮贵的，我自己也是通过“研究生自由探索项目”才买的这本书，因为可以报销嘛。\n\n## **学习工具**\n\n机器学习的tools很多，这里只列出几个参考工具。\n\n- [Scikit-learn](http://scikit-learn.org/stable/user_guide.html).基于Python语言的[scikit-learn](http://scikit-learn.org/stable/user_guide.html)库，里面涵盖了分类、聚类、回归的大部分算法，并且有常用的评估指标以及预处理数据的方法，是一个不错的学习库，强力推荐。附一篇博文：[SOME USEFUL MACHINE LEARNING LIBRARIES](http://www.erogol.com/broad-view-machine-learning-libraries/).\n- [R](http://www.r-project.org/)语言，语言就是一门工具，R语言现在在商业界是用的最多的，在统计方面功能强大，而且也有封装好的算法库可以直接使用。附：[R语言参考卡片](https://cran.r-project.org/doc/contrib/Liu-R-refcard.pdf).\n- [Weka](http://www.cs.waikato.ac.nz/ml/weka/)，是一个基于java开发的数据挖掘工具，可以尝试一下。它为用户提供了一系列据挖掘API、命令行和图形化用户接口。你可以准备数据、可视化、建立分类、进行回归分析、建立聚类模型，同时可以通过第三方插件执行其他算法。除了WEKA之外， [Mahout](http://mahout.apache.org/)是Hadoop中为机器学习提供的一个很好的JAVA框架，你可以自行学习。如果你是机器学习和大数据学习的新手，那么坚持学习WEKA，并且全心全意地学习一个库。\n- Matlab，里面有很多的工具包，不过本人不怎么用过。参考：[Matlab Codes and Datasets for Feature Learning](http://www.cad.zju.edu.cn/home/dengcai/Data/data.html)和[Statistics and Machine Learning Toolbox](http://cn.mathworks.com/products/statistics/)。此外matlab中的[Octave](http://www.gnu.org/software/octave/)可以很方便地解决线性和非线性问题，比如机器学习算法底层涉及的问题。如果你有工程背景，那么你可以由此入手。\n- [BigML](https://bigml.com/):可能你并不想进行编程工作。你完全可以不通过代码，来使用 WEKA那样的工具。你通过使用BigMLS的服务来进行更加深入的工作。BigML通过Web页面，提供了机器学习的接口，因此你可以通过浏览器来建立模型。\n- 如果你使用Python，这里推荐一个IDE，[WinPython](http://sourceforge.net/projects/winpython/files/WinPython_2.7/2.7.10.1/),IDE版本就是Python的版本，自行选择！\n\n\n下面给出一个比较图，具体想要学什么，还需自己抉择。\n\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150918075645450)\n</center>\n\n\n## **学习视频**\n\n由于本人比较崇拜Andrew Ng，所以关于视频，首先推荐的便是Andrew Ng的斯坦福大学的机器学习课程。这套视频在网上有两个网址，国外和国内的都有，全程英语教学，内容很好，有时间建议你去听听：\n\n- 一个是国外的Coursera公开课，该课程在机器学习领域很火，是很多入门学者的首选。地址：https://www.coursera.org/；讲义地址：[Stanford CS229 course下载讲义和笔记](http://cs229.stanford.edu/)；\n- 一个是国内的网易公开课，链接地址：http://open.163.com/movie/2008/1/U/O/M6SGF6VB4_M6SGJURUO.html\n\n下面是一个机器学习视频库，由加州理工学院（Caltech）出品。\n\n- 机器学习视频库，地址：http://work.caltech.edu/library/\n\n其它的视频库\n\n- [Machine Learning Category on VideoLectures](http://videolectures.net/Top/Computer_Science/Machine_Learning/)，这个网站的视频比较多。你可以找出比较感兴趣的资源，然后深入学习。\n\n<font color=\"#008B00\">机器学习最近在国内比较火，许多培训机构都相应的开了该门课程，如果想要听中文教程的，可以去网上搜索下，这里就不给培训机构打广告了。</font>\n\n## **博客和文章推荐**\n\n大牛们的博客，会让你感到兴奋，让你觉得你不是一个人在奋斗，让你时刻记住你的前方已经有很多的学者正在等着你，你要加油。他们的经验会让我们少走些冤枉路，能让我们在他们的基础上进一步理解。下面推荐几个我所知道的或者说我了解到的几位牛人博客和几篇文章：\n\n- **pluskid**，真名张弛原，一位技术大牛，毕业于浙江大学，后来出国深造。他的博文质量非常高，深入浅出，其SVM三层境界的讲解让人茅塞顿开，应该给了很多人启发吧，很值得学习。现在的博客网址：[Chiyuan Zhang](http://pluskid.org/about.html)，原博客网址：[Chiyuan Zhang](http://blog.pluskid.org/)\n- **Rachel Zhang**，真名张睿卿，很有气质的一位软妹纸，目前是百度深度学习实验室研发工程师，在CSDN中的博客人气绝对屈指可数，算是IT界的一位女中豪杰。博客网址：[CSDN博客-Rachel Zhang](http://blog.csdn.net/abcjennifer)\n- **July**，对算法研究独具一格，目前是七月在线科技创始人兼CEO。博客网址：[July](http://blog.csdn.net/v_JULY_v)\n- **Jason**，一位国外机器学习爱好者，其博客内容详实，多篇文章被国内机器学习者翻译。博客网址：http://machinelearningmastery.com/blog/\n- 一个国外很好的机器学习博客，里面介绍了详细的算法知识，很全面，从感知机、神经网络、决策树、SVM、Adaboost到随机森林、Deep Learning.网址：[A Blog From a Human-engineer-being](http://www.erogol.com/machine-learning/)\n- 一篇涵盖许多机器学习资料的文章：[机器学习(Machine Learning)&深度学习(Deep Learning)资料](http://www.open-open.com/lib/view/open1428112201271.html)\n- **Edwin Chen**\t，机器学习爱好者，博客内容涵盖数学、机器学习和数据科学。分享其中一篇博文：[Choosing a Machine Learning Classifier](http://blog.echen.me/2011/04/27/choosing-a-machine-learning-classifier/)\t\n- 一篇以前的博文：[A List of Data Science and Machine Learning Resources](http://conductrics.com/data-science-resources/)，有时间好好阅读阅读，对你绝对有帮助。\n- [A Few Useful Things to Know about Machine Learning](http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf),一篇很有帮助的机器学习文章，里面包括了特征选择与模型的简化。\n- [The Discipline of Machine Learning](http://www.cs.cmu.edu/~tom/pubs/MachineLearning.pdf)机器学习规则。该文章比较老，2006年发布的，作者是Tom Mitchell，但很有参考价值，其中定义了机器学习的规则。Mitchell在说服CMU总裁为一个百年内都存在的问题建立一个独立的机器学习部门时，也用到了这本书中的观点。希望能对你也有所帮助。\n- 分享一个网站：[简书](http://www.jianshu.com/)。\n\n\n## **国外网站**\n\n如果你想搜索比较新颖的机器学习资料或是文章，可以到以下网站中搜索，里面不仅包括了机器学习的内容，还有许多其它相关领域内容，如数据科学和云计算等。\n\n- InfoWord：http://www.infoworld.com/reviews/\n- Kdnuggets：http://www.kdnuggets.com\n- Datasciencecentral：http://www.datasciencecentral.com/\n- Datascienceplus：http://datascienceplus.com\n\n## **数据科学竞赛**\n\n关于数据分析的竞赛，国内国外都有，下面推荐几个比较火的竞赛网站 ：\n\n- Kaggle比赛，网址：https://www.kaggle.com/\n- DataCastle比赛，网站：http://www.pkbigdata.com/\n- 阿里大数据竞赛，目前没有消息了，2015年有个【2015天池大数据竞赛】\n\n## **ML相关算法参考**\n\n- 决策树-参考：[decision Tree（Python实现）](http://blog.csdn.net/dream_angel_z/article/details/45965463)\n- SVM支持向量机-参考：[pluskid支持向量机三重境界](http://blog.pluskid.org/?page_id=683)\n- Adaboost-参考：[组合算法-Adaboost](http://www.csuldw.com/2015/07/05/2015-07-12-Adaboost/)\n- Random Forest-参考：[随机森林算法](http://www.cnblogs.com/wentingtu/archive/2011/12/22/2297405.html)\n- 朴素贝叶斯算法-参考：[Naive Bayes算法实现](http://blog.csdn.net/dream_angel_z/article/details/46120867)\n- 人工神经网络-参考：http://www.cnblogs.com/luxiaoxun/archive/2012/12/10/2811309.html\n- Apriori算法-参考地址：[Apriori关联分析](http://www.csuldw.com/2015/06/04/2015-06-04-Apriori/)\n- K最近邻算法-参考：[KNN从原理到实现](http://blog.csdn.net/dream_angel_z/article/details/45896449)\n- 梯度树提升GTB算法-参考：[Gradient Tree Boosting（或GBRT）](http://blog.csdn.net/dream_angel_z/article/details/48085889)\n- K-means聚类-参考：[K-means cluster](http://blog.csdn.net/dream_angel_z/article/details/46343597)\n- 组合算法总结-参考：[Ensemble算法总结](http://www.csuldw.com/2015/07/22/2015-07-22%20%20ensemble/)\n- EM期望最大算法-参考：[EM算法](http://blog.csdn.net/zouxy09/article/details/8537620)\n- Logistic回归-参考：[逻辑回归](http://blog.csdn.net/wangran51/article/details/8892923)\n- HMM隐马尔可夫模型，参考:[HMM](http://blog.csdn.net/likelet/article/details/7056068)\n- 条件随机场，参考：[CRF](http://www.tanghuangwhu.com/archives/162)\n- 随机森林和GBDT，参考：[决策树模型组合之随机森林与GBDT](http://www.cnblogs.com/LeftNotEasy/archive/2011/03/07/1976562.html)\n- 特征选择和特征提取，参考：[特征提取与特征选择](http://blog.csdn.net/lanbing510/article/details/40488787)\n- 梯度下降法，参考:[gradient descent](http://blog.csdn.net/woxincd/article/details/7040944)\n- 牛顿法，参考：[牛顿法](http://blog.csdn.net/luoleicn/article/details/6527049)\n- 线性判别分析，参考：[线性判别](http://www.cnblogs.com/jerrylead/archive/2011/04/21/2024384.html)\n- 深度学习-[深度学习概述：从感知机到深度网络](http://www.cnblogs.com/xiaowanyer/p/3701944.html)\n\n\n## **个人译文**\n\n下面是本人在CSDN云计算栏目发布的翻译文章，如有翻译不准确的地方，还望多多包涵，希望能给大家带来点帮助，译文列表如下：\n\n- 2015-09-14 [LSTM实现详解](http://www.csdn.net/article/2015-09-14/2825693)\n- 2015-09-10 [从零实现来理解机器学习算法：书籍推荐及障碍的克服](http://www.csdn.net/article/2015-09-08/2825646)\n- 2015-08-31  [机器学习开发者的现代化路径：不需要从统计学微积分开始](http://www.csdn.net/article/2015-08-27/2825551)\n- 2015-08-27 [基于Python的卷积神经网络和特征提取](http://www.csdn.net/article/2015-08-27/2825549)\n- 2015-08-20 [你应该掌握的七种回归技术](http://www.csdn.net/article/2015-08-19/2825492)\n- 2015-08-11 [机器学习API Top 10：AT&T Speech、IBM Watson和Google Prediction](http://www.csdn.net/article/2015-08-10/2825430)\n- 2015-08-03 [从Theano到Lasagne：基于Python的深度学习的框架和库](http://www.csdn.net/article/2015-08-01/2825362)\n- 2015-07-15 [Airbnb欺诈预测机器学习模型设计：准确率和召回率的故事](http://www.csdn.net/article/2015-07-13/2825188)\n- 2015-07-13 [开发者成功使用机器学习的十大诀窍](http://www.csdn.net/article/2015-07-13/2825187)\n\n下面是相关译者的译文，仅供参考：\n\n- 2015-09-16 [各种编程语言的深度学习库整理](http://www.csdn.net/article/2015-09-15/2825714)\n- 2015-09-11 [机器学习温和指南](http://www.csdn.net/article/2015-09-08/2825647)\n- 2015-09-10 [关于数据科学，书上不曾提及的三点经验](http://www.csdn.net/article/2015-09-10/2825668)\n\n---\n\n<font color=\"#CD3333\" >从这些牛人的博客中，你能学到很多。慢慢地你会体会到，不是你一个人在战斗，还有很多人，所以你不用害怕孤独。</font>\n\n最后，关于机器学习资料的整理，先到此为止吧，如果你有什么好的资料，欢迎在评论中给出推荐或网址链接。\n\n\n\n---\n\n","source":"_posts/2015-09-23 Machine learning materials.md","raw":"---\nlayout: post\ntitle: 机器学习-个人资料整理\ndate: 2015-09-23 22:22:22\ntag:\n\t- Machine Learning\ncomments: true\ncategories: ML\n---\n\n\n学习Machine Learning也有很长一段时间了，前段时间在paper中应用了GTB（Gradient Tree Boosting）算法。在我的数据集上GTB的performance比Random Forest要稍微强一点，整个experiment做完之后，有许多东西都来不及及时整理，很多都遗忘了。打算接下来的时间里，好好整理下自己的学习资料，这份资料绝对不是一时半会就整理得完的，先开个头吧，以后会间断性更新该blog的。\n\n下面来做个资料整理吧。\n\n<!-- more -->\n\n## **书籍推荐**\n\n机器学习的书籍很多，下面推荐几本本人用过而且觉得还不错的书籍。优于机器学习是一门跨领域的学科，所以在书籍上并非全是机器学习的书籍:\n\n- 1.《机器学习实战》**Machine Learning in Action [美] Peter Harington 著**。该书贯穿了10个最受欢迎的机器学习算法，提供了案例研究问题并用Python代码实例来解决。我本人比较喜欢这本书，因为里面的代码给了我很大的帮助，自己在学习机器学习算法的时候，理论上很多东西不太理解透，通过该书实践之后，在算法层面又有了进一步的提高。\n- 2.《统计学习方法》 李航著。该书比较详细地介绍了算法的原理，只从理论层面来研究算法。通过这本书和《机器学习实战》两本书相结合，一本讲理论，一本着手实践，加在一起会有事半功倍的效果。\n- 3.《数据挖掘概念与技术》 韩家炜著。该书介绍了数据挖掘的常用技术，比较详实，但本人觉得不太适合初学者，当时自己初学的时候看的就是这本书，结果最后很多地方理解的不是很好，后来通过《统计学习方法》和算法实践之后，再回头看《数据挖掘概念与技术》，感觉就轻松多了。\n- 4.《数学之美》 吴军著。本书可以当做业余书籍来看，可以在无聊的时候看看，不过里面讲的东西还是挺有用的。\n- 5.《Python科学计算》该书可以当做Python编程参考书籍，但前提是你喜欢使用Python，并爱上了它，不然这本书还是蛮贵的，我自己也是通过“研究生自由探索项目”才买的这本书，因为可以报销嘛。\n\n## **学习工具**\n\n机器学习的tools很多，这里只列出几个参考工具。\n\n- [Scikit-learn](http://scikit-learn.org/stable/user_guide.html).基于Python语言的[scikit-learn](http://scikit-learn.org/stable/user_guide.html)库，里面涵盖了分类、聚类、回归的大部分算法，并且有常用的评估指标以及预处理数据的方法，是一个不错的学习库，强力推荐。附一篇博文：[SOME USEFUL MACHINE LEARNING LIBRARIES](http://www.erogol.com/broad-view-machine-learning-libraries/).\n- [R](http://www.r-project.org/)语言，语言就是一门工具，R语言现在在商业界是用的最多的，在统计方面功能强大，而且也有封装好的算法库可以直接使用。附：[R语言参考卡片](https://cran.r-project.org/doc/contrib/Liu-R-refcard.pdf).\n- [Weka](http://www.cs.waikato.ac.nz/ml/weka/)，是一个基于java开发的数据挖掘工具，可以尝试一下。它为用户提供了一系列据挖掘API、命令行和图形化用户接口。你可以准备数据、可视化、建立分类、进行回归分析、建立聚类模型，同时可以通过第三方插件执行其他算法。除了WEKA之外， [Mahout](http://mahout.apache.org/)是Hadoop中为机器学习提供的一个很好的JAVA框架，你可以自行学习。如果你是机器学习和大数据学习的新手，那么坚持学习WEKA，并且全心全意地学习一个库。\n- Matlab，里面有很多的工具包，不过本人不怎么用过。参考：[Matlab Codes and Datasets for Feature Learning](http://www.cad.zju.edu.cn/home/dengcai/Data/data.html)和[Statistics and Machine Learning Toolbox](http://cn.mathworks.com/products/statistics/)。此外matlab中的[Octave](http://www.gnu.org/software/octave/)可以很方便地解决线性和非线性问题，比如机器学习算法底层涉及的问题。如果你有工程背景，那么你可以由此入手。\n- [BigML](https://bigml.com/):可能你并不想进行编程工作。你完全可以不通过代码，来使用 WEKA那样的工具。你通过使用BigMLS的服务来进行更加深入的工作。BigML通过Web页面，提供了机器学习的接口，因此你可以通过浏览器来建立模型。\n- 如果你使用Python，这里推荐一个IDE，[WinPython](http://sourceforge.net/projects/winpython/files/WinPython_2.7/2.7.10.1/),IDE版本就是Python的版本，自行选择！\n\n\n下面给出一个比较图，具体想要学什么，还需自己抉择。\n\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150918075645450)\n</center>\n\n\n## **学习视频**\n\n由于本人比较崇拜Andrew Ng，所以关于视频，首先推荐的便是Andrew Ng的斯坦福大学的机器学习课程。这套视频在网上有两个网址，国外和国内的都有，全程英语教学，内容很好，有时间建议你去听听：\n\n- 一个是国外的Coursera公开课，该课程在机器学习领域很火，是很多入门学者的首选。地址：https://www.coursera.org/；讲义地址：[Stanford CS229 course下载讲义和笔记](http://cs229.stanford.edu/)；\n- 一个是国内的网易公开课，链接地址：http://open.163.com/movie/2008/1/U/O/M6SGF6VB4_M6SGJURUO.html\n\n下面是一个机器学习视频库，由加州理工学院（Caltech）出品。\n\n- 机器学习视频库，地址：http://work.caltech.edu/library/\n\n其它的视频库\n\n- [Machine Learning Category on VideoLectures](http://videolectures.net/Top/Computer_Science/Machine_Learning/)，这个网站的视频比较多。你可以找出比较感兴趣的资源，然后深入学习。\n\n<font color=\"#008B00\">机器学习最近在国内比较火，许多培训机构都相应的开了该门课程，如果想要听中文教程的，可以去网上搜索下，这里就不给培训机构打广告了。</font>\n\n## **博客和文章推荐**\n\n大牛们的博客，会让你感到兴奋，让你觉得你不是一个人在奋斗，让你时刻记住你的前方已经有很多的学者正在等着你，你要加油。他们的经验会让我们少走些冤枉路，能让我们在他们的基础上进一步理解。下面推荐几个我所知道的或者说我了解到的几位牛人博客和几篇文章：\n\n- **pluskid**，真名张弛原，一位技术大牛，毕业于浙江大学，后来出国深造。他的博文质量非常高，深入浅出，其SVM三层境界的讲解让人茅塞顿开，应该给了很多人启发吧，很值得学习。现在的博客网址：[Chiyuan Zhang](http://pluskid.org/about.html)，原博客网址：[Chiyuan Zhang](http://blog.pluskid.org/)\n- **Rachel Zhang**，真名张睿卿，很有气质的一位软妹纸，目前是百度深度学习实验室研发工程师，在CSDN中的博客人气绝对屈指可数，算是IT界的一位女中豪杰。博客网址：[CSDN博客-Rachel Zhang](http://blog.csdn.net/abcjennifer)\n- **July**，对算法研究独具一格，目前是七月在线科技创始人兼CEO。博客网址：[July](http://blog.csdn.net/v_JULY_v)\n- **Jason**，一位国外机器学习爱好者，其博客内容详实，多篇文章被国内机器学习者翻译。博客网址：http://machinelearningmastery.com/blog/\n- 一个国外很好的机器学习博客，里面介绍了详细的算法知识，很全面，从感知机、神经网络、决策树、SVM、Adaboost到随机森林、Deep Learning.网址：[A Blog From a Human-engineer-being](http://www.erogol.com/machine-learning/)\n- 一篇涵盖许多机器学习资料的文章：[机器学习(Machine Learning)&深度学习(Deep Learning)资料](http://www.open-open.com/lib/view/open1428112201271.html)\n- **Edwin Chen**\t，机器学习爱好者，博客内容涵盖数学、机器学习和数据科学。分享其中一篇博文：[Choosing a Machine Learning Classifier](http://blog.echen.me/2011/04/27/choosing-a-machine-learning-classifier/)\t\n- 一篇以前的博文：[A List of Data Science and Machine Learning Resources](http://conductrics.com/data-science-resources/)，有时间好好阅读阅读，对你绝对有帮助。\n- [A Few Useful Things to Know about Machine Learning](http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf),一篇很有帮助的机器学习文章，里面包括了特征选择与模型的简化。\n- [The Discipline of Machine Learning](http://www.cs.cmu.edu/~tom/pubs/MachineLearning.pdf)机器学习规则。该文章比较老，2006年发布的，作者是Tom Mitchell，但很有参考价值，其中定义了机器学习的规则。Mitchell在说服CMU总裁为一个百年内都存在的问题建立一个独立的机器学习部门时，也用到了这本书中的观点。希望能对你也有所帮助。\n- 分享一个网站：[简书](http://www.jianshu.com/)。\n\n\n## **国外网站**\n\n如果你想搜索比较新颖的机器学习资料或是文章，可以到以下网站中搜索，里面不仅包括了机器学习的内容，还有许多其它相关领域内容，如数据科学和云计算等。\n\n- InfoWord：http://www.infoworld.com/reviews/\n- Kdnuggets：http://www.kdnuggets.com\n- Datasciencecentral：http://www.datasciencecentral.com/\n- Datascienceplus：http://datascienceplus.com\n\n## **数据科学竞赛**\n\n关于数据分析的竞赛，国内国外都有，下面推荐几个比较火的竞赛网站 ：\n\n- Kaggle比赛，网址：https://www.kaggle.com/\n- DataCastle比赛，网站：http://www.pkbigdata.com/\n- 阿里大数据竞赛，目前没有消息了，2015年有个【2015天池大数据竞赛】\n\n## **ML相关算法参考**\n\n- 决策树-参考：[decision Tree（Python实现）](http://blog.csdn.net/dream_angel_z/article/details/45965463)\n- SVM支持向量机-参考：[pluskid支持向量机三重境界](http://blog.pluskid.org/?page_id=683)\n- Adaboost-参考：[组合算法-Adaboost](http://www.csuldw.com/2015/07/05/2015-07-12-Adaboost/)\n- Random Forest-参考：[随机森林算法](http://www.cnblogs.com/wentingtu/archive/2011/12/22/2297405.html)\n- 朴素贝叶斯算法-参考：[Naive Bayes算法实现](http://blog.csdn.net/dream_angel_z/article/details/46120867)\n- 人工神经网络-参考：http://www.cnblogs.com/luxiaoxun/archive/2012/12/10/2811309.html\n- Apriori算法-参考地址：[Apriori关联分析](http://www.csuldw.com/2015/06/04/2015-06-04-Apriori/)\n- K最近邻算法-参考：[KNN从原理到实现](http://blog.csdn.net/dream_angel_z/article/details/45896449)\n- 梯度树提升GTB算法-参考：[Gradient Tree Boosting（或GBRT）](http://blog.csdn.net/dream_angel_z/article/details/48085889)\n- K-means聚类-参考：[K-means cluster](http://blog.csdn.net/dream_angel_z/article/details/46343597)\n- 组合算法总结-参考：[Ensemble算法总结](http://www.csuldw.com/2015/07/22/2015-07-22%20%20ensemble/)\n- EM期望最大算法-参考：[EM算法](http://blog.csdn.net/zouxy09/article/details/8537620)\n- Logistic回归-参考：[逻辑回归](http://blog.csdn.net/wangran51/article/details/8892923)\n- HMM隐马尔可夫模型，参考:[HMM](http://blog.csdn.net/likelet/article/details/7056068)\n- 条件随机场，参考：[CRF](http://www.tanghuangwhu.com/archives/162)\n- 随机森林和GBDT，参考：[决策树模型组合之随机森林与GBDT](http://www.cnblogs.com/LeftNotEasy/archive/2011/03/07/1976562.html)\n- 特征选择和特征提取，参考：[特征提取与特征选择](http://blog.csdn.net/lanbing510/article/details/40488787)\n- 梯度下降法，参考:[gradient descent](http://blog.csdn.net/woxincd/article/details/7040944)\n- 牛顿法，参考：[牛顿法](http://blog.csdn.net/luoleicn/article/details/6527049)\n- 线性判别分析，参考：[线性判别](http://www.cnblogs.com/jerrylead/archive/2011/04/21/2024384.html)\n- 深度学习-[深度学习概述：从感知机到深度网络](http://www.cnblogs.com/xiaowanyer/p/3701944.html)\n\n\n## **个人译文**\n\n下面是本人在CSDN云计算栏目发布的翻译文章，如有翻译不准确的地方，还望多多包涵，希望能给大家带来点帮助，译文列表如下：\n\n- 2015-09-14 [LSTM实现详解](http://www.csdn.net/article/2015-09-14/2825693)\n- 2015-09-10 [从零实现来理解机器学习算法：书籍推荐及障碍的克服](http://www.csdn.net/article/2015-09-08/2825646)\n- 2015-08-31  [机器学习开发者的现代化路径：不需要从统计学微积分开始](http://www.csdn.net/article/2015-08-27/2825551)\n- 2015-08-27 [基于Python的卷积神经网络和特征提取](http://www.csdn.net/article/2015-08-27/2825549)\n- 2015-08-20 [你应该掌握的七种回归技术](http://www.csdn.net/article/2015-08-19/2825492)\n- 2015-08-11 [机器学习API Top 10：AT&T Speech、IBM Watson和Google Prediction](http://www.csdn.net/article/2015-08-10/2825430)\n- 2015-08-03 [从Theano到Lasagne：基于Python的深度学习的框架和库](http://www.csdn.net/article/2015-08-01/2825362)\n- 2015-07-15 [Airbnb欺诈预测机器学习模型设计：准确率和召回率的故事](http://www.csdn.net/article/2015-07-13/2825188)\n- 2015-07-13 [开发者成功使用机器学习的十大诀窍](http://www.csdn.net/article/2015-07-13/2825187)\n\n下面是相关译者的译文，仅供参考：\n\n- 2015-09-16 [各种编程语言的深度学习库整理](http://www.csdn.net/article/2015-09-15/2825714)\n- 2015-09-11 [机器学习温和指南](http://www.csdn.net/article/2015-09-08/2825647)\n- 2015-09-10 [关于数据科学，书上不曾提及的三点经验](http://www.csdn.net/article/2015-09-10/2825668)\n\n---\n\n<font color=\"#CD3333\" >从这些牛人的博客中，你能学到很多。慢慢地你会体会到，不是你一个人在战斗，还有很多人，所以你不用害怕孤独。</font>\n\n最后，关于机器学习资料的整理，先到此为止吧，如果你有什么好的资料，欢迎在评论中给出推荐或网址链接。\n\n\n\n---\n\n","slug":"2015-09-23 Machine learning materials","published":1,"updated":"2015-11-19T07:50:44.440Z","photos":[],"link":"","_id":"cih8q8rpg001mr8uj2vwau8pd"},{"layout":"post","date":"2015-08-29T02:54:00.000Z","title":"2015年8月总结","_content":"\n很多时候，都想写点什么，可又不知道从何开始，总会有一种语尽词穷的感觉，道不出那种振奋人心的话。“书到用时方恨少”大概就是这个意思吧。有时间，再回头学学语文，看看美文，涨涨知识吧。\n\n下面来总结一下自已这几个月的学习成长吧。\n<!-- more -->\n以前总认为别人了不起，总感觉别人的知识面怎么会如此的宽泛，然后敬仰之心便犹如滔滔江水，连绵不绝。每次都会想着以后我也要好好充实自己的业余爱好，为生活增添一份乐趣，可事后往往又不了了之了。其实，学东西就好比爬山，起初精力充沛，步伐之神速令人刮目，很快就到了半山。可过了一阵子之后，精力值会达到了一个饱和点（或者说大脑的知识储藏量有限），会让你感觉怎么奋进都进步缓慢，看不到成功的灯塔，但当你再努力向前，到达山顶的时候，回首经历的一切，你会感觉，曾经的一切确实不过如此，一种“一览众山小”的感受油然而生，而这种感觉会让你心情舒畅，神清气爽，整个人都好了。\n\n从某种角度上说，我应该算是个“技术宅”吧。能够连续待在实验室拼个好几个月，这大概算是我最自豪的事情了，没有之一。\n\n\n\n从今年四月中旬开始，看paper，学习ML（DM）算法，然后跑实验，到现在大概整整四个月时间吧。能够写出一篇论文，确实不容易。期间也遇到了许多问题，比如自己做的数据没别人的好，数据正负样本不均衡、实验效果不理想等等，不过从中确实学到了很多的东西。现在，自己独立跑实验基本没有多大问题，至少自己能用Python实现常见的算法以及对文件的一些操作，唯一感觉会出问题的当属数据集这块。因为自己构造数据集，有些奇异点处理的不好，然后直接影响了最后模型的好坏。\n\n五月上旬基本上玩过去了，五月下旬各类机器学习书籍接连到手，然后开始学习《机器学习实践》这本书，全书是用Python实现的代码，因为有源码参考，所以很容易理解，很适合算法学习入门。由于之前学习过数据挖掘算法的理论知识，所以这本书不到半个月就把相应的知识点理解的差不多了。关于算法理论，清华大学出版社李航的《统计学习方法》确实不错，全书纯理论知识，分析独特，通俗易懂，很全面，适合想深入研究算法的人。这本书我还没完全看完，接下来可以好好学习下。\n\n六月，上旬的时候，在Leetcode上面刷了一个星期的算法题，做了60几个题目，后来感觉还是做实验重要，然后就接着去做数据了。数据处理期间，碰到了一些专业性问题，尤其是在计算结合位点的时候，导师当时也不在，而我对于生物上的一些专业知识不是很了解，所以进度卡住了一个星期左右。还有就是在计算一个特征的时候，停留了好几天。不过还好，六月底，数据的每个特征算是做出来了，但当时喉咙开始发炎了，然后又引起感冒，整个日子都不好过，整个人也都不好了。\n\n到了七月，开始整理自己的数据集，跑实验，然后从分析结果。这段时间碰到的问题也让人抓狂。首先是数据集不均衡，跑出来的效果很差，很不理想。不过这个问题还是比较容易解决，最常用的就是抽样了，下抽样还是上抽样就看结果好不好了。最后我选择的是下抽样，构造新的平衡数据，但是最后跑出来的效果不理想，使用别人的方法，跑出来的效果比别人差了将近8个百分点，这显然不合逻辑。到了七月下旬的时候，没办法了，还是使用别人的数据集吧。然后接着在别人数据集的基础上，加特征，构造新的数据集，然后使用不同算法来跑实验，比较效果等。最后得到的效果和别人的差不多，但是相对于另外一篇论文，似乎要差点。因为该论文没有说明自己的结果是在独立测试上的结果还是交叉验证得到的结果。所以，继续跑实验吧。\n\n八月的第一个星期，实验总算做出来了，最后比较了下，效果提升不多，因为本来原来的实验就做的比较好了，AUC达到了0.923，确实难以超越。接下来就开始赶paper，没日没夜的赶呀，终于在8月中旬将paper赶出来了。对于APBC2016能不能中，30%的接受率，就看运气了，因为整篇论文的效果确实不是很明显。\n\n总的来说，整个实验下来，学到了不少东西。以前是看中文论文容易，看英文paper难，现在感觉是看英文paper明显简单了，而写paper困难了。接下来好好努力，加油学英语、学算法、学理论、做实验吧，其他的事情都是浮云。\n\n\n---\n","source":"_posts/2015-08-29 Summary.md","raw":"---\nlayout: post\ndate: 2015-08-29 10:54\ntag: 总结\ntitle: \"2015年8月总结\"\ncategories: 总结\n---\n\n很多时候，都想写点什么，可又不知道从何开始，总会有一种语尽词穷的感觉，道不出那种振奋人心的话。“书到用时方恨少”大概就是这个意思吧。有时间，再回头学学语文，看看美文，涨涨知识吧。\n\n下面来总结一下自已这几个月的学习成长吧。\n<!-- more -->\n以前总认为别人了不起，总感觉别人的知识面怎么会如此的宽泛，然后敬仰之心便犹如滔滔江水，连绵不绝。每次都会想着以后我也要好好充实自己的业余爱好，为生活增添一份乐趣，可事后往往又不了了之了。其实，学东西就好比爬山，起初精力充沛，步伐之神速令人刮目，很快就到了半山。可过了一阵子之后，精力值会达到了一个饱和点（或者说大脑的知识储藏量有限），会让你感觉怎么奋进都进步缓慢，看不到成功的灯塔，但当你再努力向前，到达山顶的时候，回首经历的一切，你会感觉，曾经的一切确实不过如此，一种“一览众山小”的感受油然而生，而这种感觉会让你心情舒畅，神清气爽，整个人都好了。\n\n从某种角度上说，我应该算是个“技术宅”吧。能够连续待在实验室拼个好几个月，这大概算是我最自豪的事情了，没有之一。\n\n\n\n从今年四月中旬开始，看paper，学习ML（DM）算法，然后跑实验，到现在大概整整四个月时间吧。能够写出一篇论文，确实不容易。期间也遇到了许多问题，比如自己做的数据没别人的好，数据正负样本不均衡、实验效果不理想等等，不过从中确实学到了很多的东西。现在，自己独立跑实验基本没有多大问题，至少自己能用Python实现常见的算法以及对文件的一些操作，唯一感觉会出问题的当属数据集这块。因为自己构造数据集，有些奇异点处理的不好，然后直接影响了最后模型的好坏。\n\n五月上旬基本上玩过去了，五月下旬各类机器学习书籍接连到手，然后开始学习《机器学习实践》这本书，全书是用Python实现的代码，因为有源码参考，所以很容易理解，很适合算法学习入门。由于之前学习过数据挖掘算法的理论知识，所以这本书不到半个月就把相应的知识点理解的差不多了。关于算法理论，清华大学出版社李航的《统计学习方法》确实不错，全书纯理论知识，分析独特，通俗易懂，很全面，适合想深入研究算法的人。这本书我还没完全看完，接下来可以好好学习下。\n\n六月，上旬的时候，在Leetcode上面刷了一个星期的算法题，做了60几个题目，后来感觉还是做实验重要，然后就接着去做数据了。数据处理期间，碰到了一些专业性问题，尤其是在计算结合位点的时候，导师当时也不在，而我对于生物上的一些专业知识不是很了解，所以进度卡住了一个星期左右。还有就是在计算一个特征的时候，停留了好几天。不过还好，六月底，数据的每个特征算是做出来了，但当时喉咙开始发炎了，然后又引起感冒，整个日子都不好过，整个人也都不好了。\n\n到了七月，开始整理自己的数据集，跑实验，然后从分析结果。这段时间碰到的问题也让人抓狂。首先是数据集不均衡，跑出来的效果很差，很不理想。不过这个问题还是比较容易解决，最常用的就是抽样了，下抽样还是上抽样就看结果好不好了。最后我选择的是下抽样，构造新的平衡数据，但是最后跑出来的效果不理想，使用别人的方法，跑出来的效果比别人差了将近8个百分点，这显然不合逻辑。到了七月下旬的时候，没办法了，还是使用别人的数据集吧。然后接着在别人数据集的基础上，加特征，构造新的数据集，然后使用不同算法来跑实验，比较效果等。最后得到的效果和别人的差不多，但是相对于另外一篇论文，似乎要差点。因为该论文没有说明自己的结果是在独立测试上的结果还是交叉验证得到的结果。所以，继续跑实验吧。\n\n八月的第一个星期，实验总算做出来了，最后比较了下，效果提升不多，因为本来原来的实验就做的比较好了，AUC达到了0.923，确实难以超越。接下来就开始赶paper，没日没夜的赶呀，终于在8月中旬将paper赶出来了。对于APBC2016能不能中，30%的接受率，就看运气了，因为整篇论文的效果确实不是很明显。\n\n总的来说，整个实验下来，学到了不少东西。以前是看中文论文容易，看英文paper难，现在感觉是看英文paper明显简单了，而写paper困难了。接下来好好努力，加油学英语、学算法、学理论、做实验吧，其他的事情都是浮云。\n\n\n---\n","slug":"2015-08-29 Summary","published":1,"updated":"2015-11-19T07:50:44.439Z","comments":1,"photos":[],"link":"","_id":"cih8q8rpl001pr8uj2i4lphio"},{"layout":"post","title":"Gradient Tree Boosting","date":"2015-08-19T02:54:00.000Z","_content":"\n## **Introduction**\n\n决策树这种算法有着很多良好的特性，比如说训练时间复杂度较低，预测的过程比较快速，模型容易展示（容易将得到的决策树做成图片展示出来）等。但是同时，单决策树又有一些不好的地方，比如说容易over-fitting，虽然有一些方法，如剪枝可以减少这种情况，但是还是不太理想。\n\n模型组合（比如说有Boosting，Bagging等）与决策树相关的算法比较多，如randomForest、Adaboost、GBRT等，这些算法最终的结果是生成N(可能会有几百棵以上）棵树，这样可以大大的减少单决策树带来的毛病，有点类似于三个臭皮匠赛过一个诸葛亮的做法，虽然这几百棵决策树中的每一棵都很简单（相对于C4.5这种单决策树而言），但是他们组合起来确是很强大。虽然这些算法都是通过决策树演变过来的，但在处理的过程上有着一些差异，我会在后面对此做一个本质上的比较。下面先来介绍下本文的梯度提升算法。\n<!-- more -->\n\n## **Gradient Tree Boosting**\n\n梯度树提升（Gradient Tree Boosting）是一种组合算法，也叫做梯度提升回归树（gradient boosting regression tree），它的基分类器是决策树，既可以用来回归，也可以用作分类。在分类性能上，能够和随机森林媲美，甚至在有的数据集上表现的有过之而无不及。如今，Gradient Tree Boosting模型已经广泛的运用在Web搜索排行榜以及生态学上。在阿里内部也用的比较多，所以值得我们去花点时间认真学习。\n\n根据scikit-learn官网的介绍，GBRT的优势有：\n\n- 自然而然地处理混合类型的数据\n- 预测能力强\n- 在输出空间对于异常值的鲁棒性强（通过强大的损失函数）\n\n然而，GBRT也有劣势：\n\n- 可扩展性方面，由于提升的时序性，不能进行并行处理\n\n尽管如此，由于GTB的表现性能很好，所以它仍然受广大业界人士的青睐。下面来介绍下梯度提升树的算法原理。\n\n### __GTB算法__\n\n梯度提升（gradient boosting）算法最初是FreidMan在2000年提出来的，其核心就在于，每棵树是从先前所有树的残差中来学习。利用的是当前模型中损失函数的负梯度值\n\n![](http://latex.codecogs.com/gif.latex?%24%24%20r_%7Bmi%7D%20%3D%20-%20%5CBigg%20%5B%20%5Cfrac%20%7B%5Cpartial%20L%28y_i%2C%20f%20%28x_i%29%29%7D%7B%5Cpartial%20f%20%28x_i%29%7D%5CBigg%20%5D%20_%7Bf%20%28x%29%20%3D%20f%20_%7Bm-1%7D%28x%29%7D%24%24)\n\n作为提升树算法中的残差的近似值，进而拟合一棵回归（分类）树。\n\n梯度提升属于Boost算法的一种，也可以说是Boost算法的一种改进，原始的Boost算法是在算法开始时，为每一个样本赋上一个相等的权重值，也就是说，最开始的时候，大家都是一样重要的。在每一次训练中得到的模型，会使得数据点的估计有所差异，所以在每一步结束后，我们需要对权重值进行处理，而处理的方式就是通过增加错分类点的权重，同时减少错分类点的权重，这样使得某些点如果老是被分错，那么就会被“严重关注”，也就被赋上一个很高的权重。然后等进行了N次迭代（由用户指定），将会得到N个简单的基分类器（basic learner），最后将它们组合起来，可以对它们进行加权（错误率越大的基分类器权重值越小，错误率越小的基分类器权重值越大）、或者让它们进行投票等得到一个最终的模型。\n\nGradient Boost与传统的Boost有着很大的区别，它的每一次计算都是为了减少上一次的残差(residual)，而为了减少这些残差，可以在残差减少的梯度(Gradient)方向上建立一个新模型。所以说，在Gradient Boost中，每个新模型的建立是为了使得先前模型残差往梯度方向减少，与传统的Boost算法对正确、错误的样本进行加权有着极大的区别。\n\n\n#### **梯度提升算法（以回归为例）**\n\n对于给定的输入：训练数据集T={(x1,y1),(x2,y2),...,(xn,yn)},损失函数L(y,f(x));\n输出结果：一棵回归树$\\tilde{f}(x)$\n\n---\n\n（1）首先初始化\n\n$$f_0(x)=arg min_c \\sum_{i=1}^{N}L(y_i, c)$$\n\n估计一个使损失函数极小化的常数值，此时它只有一个节点的树；\n（2）迭代的建立M棵提升树\nfor m=1 to M:（第一层循环）\nfor i=1 to N：（第二层循环） 计算损失函数的负梯度在当前模型的值，并将它作为残差的估计值。\n\n\n![](http://latex.codecogs.com/gif.latex?%24%24%20r_%7Bmi%7D%20%3D%20-%20%5CBigg%20%5B%20%5Cfrac%20%7B%5Cpartial%20L%28y_i%2C%20f%20%28x_i%29%29%7D%7B%5Cpartial%20f%20%28x_i%29%7D%5CBigg%20%5D%20_%7Bf%20%28x%29%20%3D%20f%20_%7Bm-1%7D%28x%29%7D%24%24)\n\n对于$r_{mi}$拟合一棵回归树，得到第m棵树的叶节点区域 $R\\_{mj}$,j=1,2,...,J\n\nfor j=1 to J：（第二层循环）,计算：\n\n![](http://latex.codecogs.com/gif.latex?%24%24c_%7Bmj%7D%20%3D%20arg%20min_c%20%5Csum_%7Bx_i%5Cepsilon%20R_%7Bmj%7D%7DL%28y_i%2Cf_%7Bm-1%7D%28x_i%29&plus;c%29%24%24)\n\n利用线性搜索估计叶节点区域的值，使损失函数极小化；\n\n然后，更新\n\n![](http://latex.codecogs.com/gif.latex?%24%24f_%7Bm%7D%28x%29%20%3D%20f_%7Bm-1%7D%28x%29%20&plus;%20%5Csum_%7Bj%3D1%7D%5EJc_%7Bmj%7DI%28x%20%5Cepsilon%20R_%7Bmj%7D%29%24%24)\n\n（3）最后得到的$f_{m}(x)$就是我们最终的模型\n\n![](http://latex.codecogs.com/gif.latex?%24%24%5Ctilde%7Bf%7D%28x%29%3Df_M%28x%29%3D%5Csum_%7Bm%3D1%7D%5EM%5Csum_%7Bj%3D1%7D%5EJc_%7Bmj%7DI%28x%20%5Cepsilon%20R_%7Bmj%7D%29%24%24)\n---\n\n#### **使用scikit-learn中的GTB**\n\n在scikit-learn中对GTB算法有了很好的封装，对于分类可以选择的损失函数有逻辑回归和指数函数，对于回归的损失函数相对比较多，有最小二乘法、最小绝对偏差函数、huber以及分位数等。具体描述参考下面的图片：\n![](file:///C:/Users/liudiwei/Desktop/QQ截图20150829104337.png)\n\n下面是sklearn中的一个分类原例：\n\n```\n>>> from sklearn.datasets import make_hastie_10_2\n>>> from sklearn.ensemble import GradientBoostingClassifier\n>>> X, y = make_hastie_10_2(random_state=0)\n>>> X_train, X_test = X[:2000], X[2000:]\n>>> y_train, y_test = y[:2000], y[2000:]\n>>> clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,\n...     max_depth=1, random_state=0).fit(X_train, y_train)\n>>> clf.score(X_test, y_test)                 \n0.913...\n```\n\n其中n_estimators表示弱分类器的个数，learning_rate表示学习率，max_depth表示最大的深度等。GTB的参数比较多，在实际应用中需要自己去调整合适的参数。\n\n\n## **基于决策树的组合算法比较**\n\n基于决策树的组合算法常用的有三个，分别是Adaboost、RandomFrest以及本文的GBRT。\n\nAdaboost是通过迭代的学习每一个基分类器，每次迭代中，把上一次错分类的数据权值增大，正确分类的数据权值减小，然后将基分类器的线性组合作为一个强分类器，同时给分类误差率较小的基本分类器以大的权值，给分类误差率较大的基分类器以小的权重值。Adaboost使用的是自适应的方法，其中概率分布式变化的，关注的是难分类的样本。详细内容请参考我之前的文章：[机器学习算法-Adaboost](http://blog.csdn.net/dream_angel_z/article/details/46764845)。\n\n\n随机森林RandomForest算法，与adaboost有错区别，可以说一种改进的装袋组合算法。随机森林则(randomForest)，不仅对样本进行抽样，还对变量进行抽样。它通过随机的方式建立一个森林，森林里面有许多棵决策树，并且每一棵树之间是没有联系的。在得到森林之后，当有一个新的输入样本进来的时候，就让森林中的每一棵决策树分别对其进行判断，看这个样本应该属于哪一类（就分类算法而言），然后看看哪一类选择最多，就预测这个样本为该类。在建立每一棵决策树的过程中，有两点需要注意，即**采样**与**完全分裂**。首先是两个随机采样的过程，RF对输入的数据要进行行采样和列采样。对于行采样，是采用有放回的方式，也就是在采样得到的样本集合中，可能有重复的样本。假设输入样本为N个，那么采样的样本也为N个。这样使得在训练的时候，每一棵树的输入样本都不是全部的样本，使得相对不容易出现over-fitting过拟合。然后进行列采样，从M个feature特征中，选择m个(m << M)。之后就是对采样之后的数据使用**完全分裂**的方式建立出决策树，这样决策树的某一个叶子节点要么是无法继续分裂的，要么里面的所有样本的都是指向的同一个类别。一般很多的决策树算法都一个重要的步骤-**剪枝**，但是这里不这样干，由于之前的两个随机采样的过程保证了随机性，所以就算不剪枝，也不会出现over-fitting。按照这种算法得到的随机森林中的每一棵决策树都是非常弱的，但当它们组合在一起的时候，就相当厉害了。随机森林就好比是：每一棵决策树就是一个精通于某一领域的专家（因为我们从M个feature中选择m个让每一棵决策树进行学习），这样在随机森林中就有了很多个精通不同领域的专家，对一个新的问题（新的输入数据），可以用不同的角度去看待它，最终由各个专家，投票得到结果。随机森林的分类准确率可以与adaboost媲美。它对噪声数据更加鲁棒，运行速度比adaboost也快得多。\n\n\n对于梯度提升树，它的每一次计算都是为了减少上一次的残差(residual)，而为了减少这些残差，可以在残差减少的梯度(Gradient)方向上建立一个新模型。这与adaboost和随机森林有很大的区别。\n\n\n\n### References\n\n\n[1] Introduction to Data Mining 数据挖掘概论. Pang-Ning Tan Michael Steinbach Vipin Kumar著\n[2] 统计学习方法 李航 著\n[3] scikit-learn官网组合算法 [点击这里](http://scikit-learn.org/stable/modules/ensemble.html#gradient-boosting)\n\n参考文章： [随机森林与GBDT](http://www.cnblogs.com/LeftNotEasy/archive/2011/03/07/1976562.html)\n\n------\n<br>\n\n\n","source":"_posts/2015-08-19 GBDT.md","raw":"---\nlayout: post\ntitle: \"Gradient Tree Boosting\"\ndate: 2015-08-19 10:54\ntag: \n\t- Machine Learning\ncategories: ML\n---\n\n## **Introduction**\n\n决策树这种算法有着很多良好的特性，比如说训练时间复杂度较低，预测的过程比较快速，模型容易展示（容易将得到的决策树做成图片展示出来）等。但是同时，单决策树又有一些不好的地方，比如说容易over-fitting，虽然有一些方法，如剪枝可以减少这种情况，但是还是不太理想。\n\n模型组合（比如说有Boosting，Bagging等）与决策树相关的算法比较多，如randomForest、Adaboost、GBRT等，这些算法最终的结果是生成N(可能会有几百棵以上）棵树，这样可以大大的减少单决策树带来的毛病，有点类似于三个臭皮匠赛过一个诸葛亮的做法，虽然这几百棵决策树中的每一棵都很简单（相对于C4.5这种单决策树而言），但是他们组合起来确是很强大。虽然这些算法都是通过决策树演变过来的，但在处理的过程上有着一些差异，我会在后面对此做一个本质上的比较。下面先来介绍下本文的梯度提升算法。\n<!-- more -->\n\n## **Gradient Tree Boosting**\n\n梯度树提升（Gradient Tree Boosting）是一种组合算法，也叫做梯度提升回归树（gradient boosting regression tree），它的基分类器是决策树，既可以用来回归，也可以用作分类。在分类性能上，能够和随机森林媲美，甚至在有的数据集上表现的有过之而无不及。如今，Gradient Tree Boosting模型已经广泛的运用在Web搜索排行榜以及生态学上。在阿里内部也用的比较多，所以值得我们去花点时间认真学习。\n\n根据scikit-learn官网的介绍，GBRT的优势有：\n\n- 自然而然地处理混合类型的数据\n- 预测能力强\n- 在输出空间对于异常值的鲁棒性强（通过强大的损失函数）\n\n然而，GBRT也有劣势：\n\n- 可扩展性方面，由于提升的时序性，不能进行并行处理\n\n尽管如此，由于GTB的表现性能很好，所以它仍然受广大业界人士的青睐。下面来介绍下梯度提升树的算法原理。\n\n### __GTB算法__\n\n梯度提升（gradient boosting）算法最初是FreidMan在2000年提出来的，其核心就在于，每棵树是从先前所有树的残差中来学习。利用的是当前模型中损失函数的负梯度值\n\n![](http://latex.codecogs.com/gif.latex?%24%24%20r_%7Bmi%7D%20%3D%20-%20%5CBigg%20%5B%20%5Cfrac%20%7B%5Cpartial%20L%28y_i%2C%20f%20%28x_i%29%29%7D%7B%5Cpartial%20f%20%28x_i%29%7D%5CBigg%20%5D%20_%7Bf%20%28x%29%20%3D%20f%20_%7Bm-1%7D%28x%29%7D%24%24)\n\n作为提升树算法中的残差的近似值，进而拟合一棵回归（分类）树。\n\n梯度提升属于Boost算法的一种，也可以说是Boost算法的一种改进，原始的Boost算法是在算法开始时，为每一个样本赋上一个相等的权重值，也就是说，最开始的时候，大家都是一样重要的。在每一次训练中得到的模型，会使得数据点的估计有所差异，所以在每一步结束后，我们需要对权重值进行处理，而处理的方式就是通过增加错分类点的权重，同时减少错分类点的权重，这样使得某些点如果老是被分错，那么就会被“严重关注”，也就被赋上一个很高的权重。然后等进行了N次迭代（由用户指定），将会得到N个简单的基分类器（basic learner），最后将它们组合起来，可以对它们进行加权（错误率越大的基分类器权重值越小，错误率越小的基分类器权重值越大）、或者让它们进行投票等得到一个最终的模型。\n\nGradient Boost与传统的Boost有着很大的区别，它的每一次计算都是为了减少上一次的残差(residual)，而为了减少这些残差，可以在残差减少的梯度(Gradient)方向上建立一个新模型。所以说，在Gradient Boost中，每个新模型的建立是为了使得先前模型残差往梯度方向减少，与传统的Boost算法对正确、错误的样本进行加权有着极大的区别。\n\n\n#### **梯度提升算法（以回归为例）**\n\n对于给定的输入：训练数据集T={(x1,y1),(x2,y2),...,(xn,yn)},损失函数L(y,f(x));\n输出结果：一棵回归树$\\tilde{f}(x)$\n\n---\n\n（1）首先初始化\n\n$$f_0(x)=arg min_c \\sum_{i=1}^{N}L(y_i, c)$$\n\n估计一个使损失函数极小化的常数值，此时它只有一个节点的树；\n（2）迭代的建立M棵提升树\nfor m=1 to M:（第一层循环）\nfor i=1 to N：（第二层循环） 计算损失函数的负梯度在当前模型的值，并将它作为残差的估计值。\n\n\n![](http://latex.codecogs.com/gif.latex?%24%24%20r_%7Bmi%7D%20%3D%20-%20%5CBigg%20%5B%20%5Cfrac%20%7B%5Cpartial%20L%28y_i%2C%20f%20%28x_i%29%29%7D%7B%5Cpartial%20f%20%28x_i%29%7D%5CBigg%20%5D%20_%7Bf%20%28x%29%20%3D%20f%20_%7Bm-1%7D%28x%29%7D%24%24)\n\n对于$r_{mi}$拟合一棵回归树，得到第m棵树的叶节点区域 $R\\_{mj}$,j=1,2,...,J\n\nfor j=1 to J：（第二层循环）,计算：\n\n![](http://latex.codecogs.com/gif.latex?%24%24c_%7Bmj%7D%20%3D%20arg%20min_c%20%5Csum_%7Bx_i%5Cepsilon%20R_%7Bmj%7D%7DL%28y_i%2Cf_%7Bm-1%7D%28x_i%29&plus;c%29%24%24)\n\n利用线性搜索估计叶节点区域的值，使损失函数极小化；\n\n然后，更新\n\n![](http://latex.codecogs.com/gif.latex?%24%24f_%7Bm%7D%28x%29%20%3D%20f_%7Bm-1%7D%28x%29%20&plus;%20%5Csum_%7Bj%3D1%7D%5EJc_%7Bmj%7DI%28x%20%5Cepsilon%20R_%7Bmj%7D%29%24%24)\n\n（3）最后得到的$f_{m}(x)$就是我们最终的模型\n\n![](http://latex.codecogs.com/gif.latex?%24%24%5Ctilde%7Bf%7D%28x%29%3Df_M%28x%29%3D%5Csum_%7Bm%3D1%7D%5EM%5Csum_%7Bj%3D1%7D%5EJc_%7Bmj%7DI%28x%20%5Cepsilon%20R_%7Bmj%7D%29%24%24)\n---\n\n#### **使用scikit-learn中的GTB**\n\n在scikit-learn中对GTB算法有了很好的封装，对于分类可以选择的损失函数有逻辑回归和指数函数，对于回归的损失函数相对比较多，有最小二乘法、最小绝对偏差函数、huber以及分位数等。具体描述参考下面的图片：\n![](file:///C:/Users/liudiwei/Desktop/QQ截图20150829104337.png)\n\n下面是sklearn中的一个分类原例：\n\n```\n>>> from sklearn.datasets import make_hastie_10_2\n>>> from sklearn.ensemble import GradientBoostingClassifier\n>>> X, y = make_hastie_10_2(random_state=0)\n>>> X_train, X_test = X[:2000], X[2000:]\n>>> y_train, y_test = y[:2000], y[2000:]\n>>> clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,\n...     max_depth=1, random_state=0).fit(X_train, y_train)\n>>> clf.score(X_test, y_test)                 \n0.913...\n```\n\n其中n_estimators表示弱分类器的个数，learning_rate表示学习率，max_depth表示最大的深度等。GTB的参数比较多，在实际应用中需要自己去调整合适的参数。\n\n\n## **基于决策树的组合算法比较**\n\n基于决策树的组合算法常用的有三个，分别是Adaboost、RandomFrest以及本文的GBRT。\n\nAdaboost是通过迭代的学习每一个基分类器，每次迭代中，把上一次错分类的数据权值增大，正确分类的数据权值减小，然后将基分类器的线性组合作为一个强分类器，同时给分类误差率较小的基本分类器以大的权值，给分类误差率较大的基分类器以小的权重值。Adaboost使用的是自适应的方法，其中概率分布式变化的，关注的是难分类的样本。详细内容请参考我之前的文章：[机器学习算法-Adaboost](http://blog.csdn.net/dream_angel_z/article/details/46764845)。\n\n\n随机森林RandomForest算法，与adaboost有错区别，可以说一种改进的装袋组合算法。随机森林则(randomForest)，不仅对样本进行抽样，还对变量进行抽样。它通过随机的方式建立一个森林，森林里面有许多棵决策树，并且每一棵树之间是没有联系的。在得到森林之后，当有一个新的输入样本进来的时候，就让森林中的每一棵决策树分别对其进行判断，看这个样本应该属于哪一类（就分类算法而言），然后看看哪一类选择最多，就预测这个样本为该类。在建立每一棵决策树的过程中，有两点需要注意，即**采样**与**完全分裂**。首先是两个随机采样的过程，RF对输入的数据要进行行采样和列采样。对于行采样，是采用有放回的方式，也就是在采样得到的样本集合中，可能有重复的样本。假设输入样本为N个，那么采样的样本也为N个。这样使得在训练的时候，每一棵树的输入样本都不是全部的样本，使得相对不容易出现over-fitting过拟合。然后进行列采样，从M个feature特征中，选择m个(m << M)。之后就是对采样之后的数据使用**完全分裂**的方式建立出决策树，这样决策树的某一个叶子节点要么是无法继续分裂的，要么里面的所有样本的都是指向的同一个类别。一般很多的决策树算法都一个重要的步骤-**剪枝**，但是这里不这样干，由于之前的两个随机采样的过程保证了随机性，所以就算不剪枝，也不会出现over-fitting。按照这种算法得到的随机森林中的每一棵决策树都是非常弱的，但当它们组合在一起的时候，就相当厉害了。随机森林就好比是：每一棵决策树就是一个精通于某一领域的专家（因为我们从M个feature中选择m个让每一棵决策树进行学习），这样在随机森林中就有了很多个精通不同领域的专家，对一个新的问题（新的输入数据），可以用不同的角度去看待它，最终由各个专家，投票得到结果。随机森林的分类准确率可以与adaboost媲美。它对噪声数据更加鲁棒，运行速度比adaboost也快得多。\n\n\n对于梯度提升树，它的每一次计算都是为了减少上一次的残差(residual)，而为了减少这些残差，可以在残差减少的梯度(Gradient)方向上建立一个新模型。这与adaboost和随机森林有很大的区别。\n\n\n\n### References\n\n\n[1] Introduction to Data Mining 数据挖掘概论. Pang-Ning Tan Michael Steinbach Vipin Kumar著\n[2] 统计学习方法 李航 著\n[3] scikit-learn官网组合算法 [点击这里](http://scikit-learn.org/stable/modules/ensemble.html#gradient-boosting)\n\n参考文章： [随机森林与GBDT](http://www.cnblogs.com/LeftNotEasy/archive/2011/03/07/1976562.html)\n\n------\n<br>\n\n\n","slug":"2015-08-19 GBDT","published":1,"updated":"2015-11-19T14:32:43.132Z","comments":1,"photos":[],"link":"","_id":"cih8q8rpq001ur8uj9in421ej"},{"layout":"post","date":"2015-07-28T07:40:00.000Z","title":"机器学习-CrossValidation交叉验证Python实现","_content":"\n版权声明：本文为原创文章，转载请注明来源。\n\n## __1.原理__\n\n### **1.1 概念**\n\n交叉验证(Cross-validation)主要用于模型训练或建模应用中，如分类预测、PCR、PLS回归建模等。在给定的样本空间中，拿出大部分样本作为训练集来训练模型，剩余的小部分样本使用刚建立的模型进行预测，并求这小部分样本的预测误差或者预测精度，同时记录它们的加和平均值。这个过程迭代K次，即K折交叉。其中，把每个样本的预测误差平方加和，称为PRESS(predicted Error Sum of Squares)。\n<!-- more -->\n\n### **1.2 目的**\n\n用交叉验证的目的是为了得到可靠稳定的模型。在分类，建立PC 或PLS模型时，一个很重要的因素是取多少个主成分的问题。用cross validation校验每个主成分下的PRESS值，选择PRESS值小的主成分数。或PRESS值不再变小时的主成分数。\n\n常用的精度测试方法主要是交叉验证，例如10折交叉验证(10-fold cross validation)，将数据集分成十份，轮流将其中9份做训练1份做验证，10次的结果的均值作为对算法精度的估计，一般还需要进行多次10折交叉验证求均值，例如：10次10折交叉验证，以求更精确一点。\n交叉验证有时也称为交叉比对，如：10折交叉比对\n\n### **1.3 常见的交叉验证形式**：\n\n__Holdout 验证__\n\n>方法：将原始数据随机分为两组,一组做为训练集,一组做为验证集,利用训练集训练分类器,然后利用验证集验证模型,记录最后的分类准确率为此Hold-OutMethod下分类器的性能指标.。Hold-OutMethod相对于K-fold Cross Validation 又称Double cross-validation ，或相对K-CV称 2-fold cross-validation(2-CV)\n\n>一般来说，Holdout 验证并非一种交叉验证，因为数据并没有交叉使用。 随机从最初的样本中选出部分，形成交叉验证数据，而剩余的就当做训练数据。 一般来说，少于原本样本三分之一的数据被选做验证数据。\n\n- 优点：好处的处理简单,只需随机把原始数据分为两组即可\n- 缺点：严格意义来说Hold-Out Method并不能算是CV,因为这种方法没有达到交叉的思想,由于是随机的将原始数据分组,所以最后验证集分类准确率的高低与原始数据的分组有很大的关系,所以这种方法得到的结果其实并不具有说服性.(主要原因是 训练集样本数太少，通常不足以代表母体样本的分布，导致 test 阶段辨识率容易出现明显落差。此外，2-CV 中一分为二的分子集方法的变异度大，往往无法达到「实验过程必须可以被复制」的要求。)\n\n__K-fold cross-validation__\n\n>K折交叉验证，初始采样分割成K个子样本，一个单独的子样本被保留作为验证模型的数据，其他K-1个样本用来训练。交叉验证重复K次，每个子样本验证一次，平均K次的结果或者使用其它结合方式，最终得到一个单一估测。这个方法的优势在于，同时重复运用随机产生的子样本进行训练和验证，每次的结果验证一次，10折交叉验证是最常用的。\n\n- 优点：K-CV可以有效的避免过学习以及欠学习状态的发生,最后得到的结果也比较具有说服性.  \n- 缺点：K值选取上\n\n__留一验证__\n\n>正如名称所建议， 留一验证（LOOCV）意指只使用原本样本中的一项来当做验证资料， 而剩余的则留下来当做训练资料。 这个步骤一直持续到每个样本都被当做一次验证资料。 事实上，这等同于 K-fold 交叉验证是一样的，其中K为原本样本个数。 在某些情况下是存在有效率的演算法，如使用kernel regression 和Tikhonov regularization。\n \n## __2.深入__\n\n使用交叉验证方法的目的主要有3个： \n\n- （1）从有限的学习数据中获取尽可能多的有效信息； \n- （2）交叉验证从多个方向开始学习样本的，可以有效的避免陷入局部最小值； \n- （3）可以在一定程度上避免过拟合问题。\n\n采用交叉验证方法时需要将学习数据样本分为两部分：训练数据样本和验证数据样本。并且为了得到更好的学习效果，无论训练样本还是验证样本都要尽可能参与学习。一般选取10重交叉验证即可达到好的学习效果。下面在上述原则基础上设计算法，主要描述下算法步骤，如下所示。\n\n\nAlgorithm  \n------------------------------------------------\n```\nStep1: \t将学习样本空间 C 分为大小相等的 K 份  \nStep2: \tfor i = 1 to K ：\n\t\t\t取第i份作为测试集\n\t\t\tfor j = 1 to K:\n\t\t\t\tif i != j:\n\t\t\t\t\t将第j份加到训练集中，作为训练集的一部分\n\t\t\t\tend if\n\t\t\tend for\n\t\tend for\nStep3: \tfor i in (K-1训练集)：\n\t\t\t训练第i个训练集，得到一个分类模型\n\t\t\t使用该模型在第N个数据集上测试，计算并保存模型评估指标\n\t\tend for\nStep4: \t计算模型的平均性能\nStep5: \t用这K个模型在最终验证集的分类准确率平均值作为此K-CV下分类器的性能指标.\n```\n\n## __3.实现__\n\n### __3.1 scikit-learn交叉验证__\n\n在scikit-learn中有CrossValidation的实现代码，地址： [scikit-learn官网crossvalidation文档](http://scikit-learn.org/dev/modules/cross_validation.html#cross-validation)\n\n使用方法：\n\n首先加载数据集\n\n```\n>>> import numpy as np\n>>> from sklearn import cross_validation\n>>> from sklearn import datasets\n>>> from sklearn import svm\n>>> iris = datasets.load_iris()\n>>> iris.data.shape, iris.target.shape\n((150, 4), (150,))\n```\n\n通过上面代码，数据集特征和类标签分别为iris.data, iris.target，接着进行交叉验证\n\n```\n>>> X_train, X_test, y_train, y_test = cross_validation.train_test_split(\n...     iris.data, iris.target, test_size=0.4, random_state=0)\n>>> X_train.shape, y_train.shape\n((90, 4), (90,))\n>>> X_test.shape, y_test.shape\n((60, 4), (60,))\n>>> clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)\n>>> clf.score(X_test, y_test)                           \n0.96...\n```\n\n上面的clf是分类器，可以自己替换，比如我可以使用RandomForest\n\n```\nclf = RandomForestClassifier(n_estimators=400)\n```\n\n一个比较有用的函数是train_test_split。功能是从样本中随机的按比例选取train data和test data。形式为\n\n```\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(train_data,train_target, test_size=0.4, random_state=0)\n```\ntest_size是样本占比。如果是整数的话就是样本的数量。random_state是随机数的种子。\n\n当然，也可以换成别的，具体算法可以参考 [scikit-learn官方文档](http://scikit-learn.org/dev/supervised_learning.html#supervised-learning)\n\n-------------------------\n\n### __3.2 抽样与CV结合__\n\n> 由于我跑的实验，数据是非均衡数据，不能直接套用，所以这里自己写了一个交叉验证的代码，仅供参考，如有问题，欢迎交流。\n\n首先有一个自适应的数据加载函数，主要用于加载本地文本数据，同时文本每行数据以\"\\t\"隔开，最后一列为类标号，数据样例如下：\n\n```\nA1001\t708\tK\t-4\t-3\t6\t2\t-13\t0\t2\t-4\t-4\t-10\t-9\t1\nA1002\t709\tL\t-4\t-4\t-1\t-2\t-11\t-1\t0\t-12\t-7\t-5\t-1\t-1\nA1003\t710\tG\t0\t-6\t-2\t-6\t-8\t-4\t-6\t-6\t-9\t-4\t0\t-1\nA1004\t711\tR\t0\t0\t1\t-3\t-10\t-1\t-3\t-4\t-6\t-9\t-6\t1\n```\n\n**说明**：前面三个不是特征，所以在加载数据集的时候，特征部分起始位置修改了下，loadDataSet函数如下：\n\n```\ndef loadDataSet(fileName):\n    fr = open(fileName)\n    dataMat = []; labelMat = []\n    for eachline in fr:\n        lineArr = []\n        curLine = eachline.strip().split('\\t') #remove '\\n'\n        for i in range(3, len(curLine)-1):\n            lineArr.append(float(curLine[i])) #get all feature from inpurfile\n        dataMat.append(lineArr)\n        labelMat.append(int(curLine[-1])) #last one is class lable\n    fr.close()\n    return dataMat,labelMat\n```\n\n返回的dataMat为纯特征矩阵，labelMat为类别标号。\n\n下面的**splitDataSet**用来切分数据集，如果是十折交叉，则split_size取10，filename为整个数据集文件，outdir则是切分的数据集的存放路径。\n\n```\ndef splitDataSet(fileName, split_size,outdir):\n    if not os.path.exists(outdir): #if not outdir,makrdir\n        os.makedirs(outdir)\n    fr = open(fileName,'r')#open fileName to read\n    num_line = 0\n    onefile = fr.readlines()\n    num_line = len(onefile)        \n    arr = np.arange(num_line) #get a seq and set len=numLine\n    np.random.shuffle(arr) #generate a random seq from arr\n    list_all = arr.tolist()\n    each_size = (num_line+1) / split_size #size of each split sets\n    split_all = []; each_split = []\n    count_num = 0; count_split = 0  #count_num 统计每次遍历的当前个数\n                                    #count_split 统计切分次数\n    for i in range(len(list_all)): #遍历整个数字序列\n        each_split.append(onefile[int(list_all[i])].strip()) \n        count_num += 1\n        if count_num == each_size:\n            count_split += 1 \n            array_ = np.array(each_split)\n            np.savetxt(outdir + \"/split_\" + str(count_split) + '.txt',\\\n                        array_,fmt=\"%s\", delimiter='\\t')  #输出每一份数据\n            split_all.append(each_split) #将每一份数据加入到一个list中\n            each_split = []\n            count_num = 0\n    return split_all\n```\n\nunderSample(datafile)方法为抽样函数，强正负样本比例固定为1:1，返回的是一个正负样本比例均等的数据集合。\n\n```\ndef underSample(datafile): #只针对一个数据集的下采样\n    dataMat,labelMat = loadDataSet(datafile) #加载数据\n    pos_num = 0; pos_indexs = []; neg_indexs = []   \n    for i in range(len(labelMat)):#统计正负样本的下标    \n        if labelMat[i] == 1:\n            pos_num +=1\n            pos_indexs.append(i)\n            continue\n        neg_indexs.append(i)\n    np.random.shuffle(neg_indexs)\n    neg_indexs = neg_indexs[0:pos_num]\n    fr = open(datafile, 'r')\n    onefile = fr.readlines()\n    outfile = []\n    for i in range(pos_num):\n        pos_line = onefile[pos_indexs[i]]    \n        outfile.append(pos_line)\n        neg_line= onefile[neg_indexs[i]]      \n        outfile.append(neg_line)\n    return outfile #输出单个数据集采样结果\n```\n\n下面的generateDataset(datadir,outdir)方法是从切分的数据集中留出一份作为测试集（无需抽样），对其余的进行抽样然后合并为一个作为训练集，代码如下：\n\n```\ndef generateDataset(datadir,outdir): #从切分的数据集中，对其中九份抽样汇成一个,\\\n    #剩余一个做为测试集,将最后的结果按照训练集和测试集输出到outdir中\n    if not os.path.exists(outdir): #if not outdir,makrdir\n        os.makedirs(outdir)\n    listfile = os.listdir(datadir)\n    train_all = []; test_all = [];cross_now = 0\n    for eachfile1 in listfile:\n        train_sets = []; test_sets = []; \n        cross_now += 1 #记录当前的交叉次数\n        for eachfile2 in listfile:\n            if eachfile2 != eachfile1:#对其余九份欠抽样构成训练集\n                one_sample = underSample(datadir + '/' + eachfile2)\n                for i in range(len(one_sample)):\n                    train_sets.append(one_sample[i])\n        #将训练集和测试集文件单独保存起来\n        with open(outdir +\"/test_\"+str(cross_now)+\".datasets\",'w') as fw_test:\n            with open(datadir + '/' + eachfile1, 'r') as fr_testsets:\n                for each_testline in fr_testsets:                \n                    test_sets.append(each_testline) \n            for oneline_test in test_sets:\n                fw_test.write(oneline_test) #输出测试集\n            test_all.append(test_sets)#保存训练集\n        with open(outdir+\"/train_\"+str(cross_now)+\".datasets\",'w') as fw_train:\n            for oneline_train in train_sets:   \n                oneline_train = oneline_train\n                fw_train.write(oneline_train)#输出训练集\n            train_all.append(train_sets)#保存训练集\n    return train_all,test_all\n```\n\n因为需要评估交叉验证，所以我写了一个performance方法根据真实类标签纸和预测值来计算SN和SP，当然如果需要其他的评估标准，继续添加即可。\n\n```\ndef performance(labelArr, predictArr):#类标签为int类型\n    #labelArr[i] is actual value,predictArr[i] is predict value\n    TP = 0.; TN = 0.; FP = 0.; FN = 0.   \n    for i in range(len(labelArr)):\n        if labelArr[i] == 1 and predictArr[i] == 1:\n            TP += 1.\n        if labelArr[i] == 1 and predictArr[i] == -1:\n            FN += 1.\n        if labelArr[i] == -1 and predictArr[i] == 1:\n            FP += 1.\n        if labelArr[i] == -1 and predictArr[i] == -1:\n            TN += 1.\n    SN = TP/(TP + FN) #Sensitivity = TP/P  and P = TP + FN \n    SP = TN/(FP + TN) #Specificity = TN/N  and N = TN + FP\n    #MCC = (TP*TN-FP*FN)/math.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))\n    return SN,SP\n```\n\n classifier(clf,train_X, train_y, test_X, test_y)方法是交叉验证中每次用的分类器训练过程以及测试过程，里面使用的分类器是scikit-learn自带的。该方法会将一些训练结果写入到文件中并保存到本地，同时在最后会返回ACC,SP,SN。\n\n```\ndef classifier(clf,train_X, train_y, test_X, test_y):#X:训练特征，y:训练标号\n    # train with randomForest \n    print \" training begin...\"\n    clf = clf.fit(train_X,train_y)\n    print \" training end.\"\n    #==========================================================================\n    # test randomForestClassifier with testsets\n    print \" test begin.\"\n    predict_ = clf.predict(test_X) #return type is float64\n    proba = clf.predict_proba(test_X) #return type is float64\n    score_ = clf.score(test_X,test_y)\n    print \" test end.\"\n    #==========================================================================\n    # Modeal Evaluation\n    ACC = accuracy_score(test_y, predict_)\n    SN,SP = performance(test_y, predict_)\n    MCC = matthews_corrcoef(test_y, predict_)\n    #AUC = roc_auc_score(test_labelMat, proba)\n    #==========================================================================\n    #save output \n    eval_output = []\n    eval_output.append(ACC);eval_output.append(SN)  #eval_output.append(AUC)\n    eval_output.append(SP);eval_output.append(MCC)\n    eval_output.append(score_)\n    eval_output = np.array(eval_output,dtype=float)\n    np.savetxt(\"proba.data\",proba,fmt=\"%f\",delimiter=\"\\t\")\n    np.savetxt(\"test_y.data\",test_y,fmt=\"%f\",delimiter=\"\\t\")\n    np.savetxt(\"predict.data\",predict_,fmt=\"%f\",delimiter=\"\\t\") \n    np.savetxt(\"eval_output.data\",eval_output,fmt=\"%f\",delimiter=\"\\t\")\n    print \"Wrote results to output.data...EOF...\"\n    return ACC,SN,SP\n```\n\n下面的mean_fun用于求列表list中数值的平均值，主要是求ACC_mean,SP_mean,SN_mean，用来评估模型好坏。\n\n```\ndef mean_fun(onelist):\n    count = 0\n    for i in onelist:\n        count += i\n    return float(count/len(onelist))\n```\n\n交叉验证代码\n\n```\ndef crossValidation(clf, clfname, curdir,train_all, test_all):\n    os.chdir(curdir)\n    #构造出纯数据型样本集\n    cur_path = curdir\n    ACCs = [];SNs = []; SPs =[]\n    for i in range(len(train_all)):\n        os.chdir(cur_path)\n        train_data = train_all[i];train_X = [];train_y = []\n        test_data = test_all[i];test_X = [];test_y = []\n        for eachline_train in train_data:\n            one_train = eachline_train.split('\\t') \n            one_train_format = []\n            for index in range(3,len(one_train)-1):\n                one_train_format.append(float(one_train[index]))\n            train_X.append(one_train_format)\n            train_y.append(int(one_train[-1].strip()))\n        for eachline_test in test_data:\n            one_test = eachline_test.split('\\t')\n            one_test_format = []\n            for index in range(3,len(one_test)-1):\n                one_test_format.append(float(one_test[index]))\n            test_X.append(one_test_format)\n            test_y.append(int(one_test[-1].strip()))\n        #======================================================================\n        #classifier start here\n        if not os.path.exists(clfname):#使用的分类器\n            os.mkdir(clfname)\n        out_path = clfname + \"/\" + clfname + \"_00\" + str(i)#计算结果文件夹\n        if not os.path.exists(out_path):\n            os.mkdir(out_path)\n        os.chdir(out_path)\n        ACC, SN, SP = classifier(clf, train_X, train_y, test_X, test_y)\n        ACCs.append(ACC);SNs.append(SN);SPs.append(SP)\n        #======================================================================\n    ACC_mean = mean_fun(ACCs)\n    SN_mean = mean_fun(SNs)\n    SP_mean = mean_fun(SPs)\n    #==========================================================================\n    #output experiment result\n    os.chdir(\"../\")\n    os.system(\"echo `date` '\" + str(clf) + \"' >> log.out\")\n    os.system(\"echo ACC_mean=\" + str(ACC_mean) + \" >> log.out\")\n    os.system(\"echo SN_mean=\" + str(SN_mean) + \" >> log.out\")\n    os.system(\"echo SP_mean=\" + str(SP_mean) + \" >> log.out\")\n    return ACC_mean, SN_mean, SP_mean\n```\n\n**测试：**\n\n```python\nif __name__ == '__main__':\n\tos.chdir(\"your workhome\") #你的数据存放目录\n    datadir = \"split10_1\" #切分后的文件输出目录\n    splitDataSet('datasets',10,datadir)#将数据集datasets切为十个保存到datadir目录中\n\t#==========================================================================\n    outdir = \"sample_data1\"\t#抽样的数据集存放目录\n    train_all,test_all = generateDataset(datadir,outdir) #抽样后返回训练集和测试集\n    print \"generateDataset end and cross validation start\"\n    #==========================================================================\n    #分类器部分\n    from sklearn.ensemble import RandomForestClassifier\n    clf = RandomForestClassifier(n_estimators=500) #使用随机森林分类器来训练\n    clfname = \"RF_1\"\n    #==========================================================================\n    curdir = \"experimentdir\" #工作目录\n\t#clf:分类器,clfname:分类器名称,curdir:当前路径,train_all:训练集,test_all:测试集\n    ACC_mean, SN_mean, SP_mean = crossValidation(clf, clfname, curdir, train_all,test_all)\n    print ACC_mean,SN_mean,SP_mean\t#将ACC均值，SP均值，SN均值都输出到控制台\n```\n\n上面的代码主要用于抽样后的十倍交叉验证，该怎么设置参数，还得具体分析。\n\n总之，交叉验证在一定程度上能够避免陷入局部最小值。一般实际操作中使用的是十折交叉验证，单具体情况还得具体分析，并没有一个统一的标准固定十倍交叉的参数或者是算法的选择以及算法参数的选择。不同的数据使用不同的算法往往会的得到不同的最优分类器。So,just try it!Happy coding!\n\n------\n<br>\n","source":"_posts/2015-07-28 crossvalidation.md","raw":"---\nlayout: post\ndate: 2015-07-28 15:40\ntitle: \"机器学习-CrossValidation交叉验证Python实现\"\ntags: \n\t- Machine Learning\ncategories: ML\n---\n\n版权声明：本文为原创文章，转载请注明来源。\n\n## __1.原理__\n\n### **1.1 概念**\n\n交叉验证(Cross-validation)主要用于模型训练或建模应用中，如分类预测、PCR、PLS回归建模等。在给定的样本空间中，拿出大部分样本作为训练集来训练模型，剩余的小部分样本使用刚建立的模型进行预测，并求这小部分样本的预测误差或者预测精度，同时记录它们的加和平均值。这个过程迭代K次，即K折交叉。其中，把每个样本的预测误差平方加和，称为PRESS(predicted Error Sum of Squares)。\n<!-- more -->\n\n### **1.2 目的**\n\n用交叉验证的目的是为了得到可靠稳定的模型。在分类，建立PC 或PLS模型时，一个很重要的因素是取多少个主成分的问题。用cross validation校验每个主成分下的PRESS值，选择PRESS值小的主成分数。或PRESS值不再变小时的主成分数。\n\n常用的精度测试方法主要是交叉验证，例如10折交叉验证(10-fold cross validation)，将数据集分成十份，轮流将其中9份做训练1份做验证，10次的结果的均值作为对算法精度的估计，一般还需要进行多次10折交叉验证求均值，例如：10次10折交叉验证，以求更精确一点。\n交叉验证有时也称为交叉比对，如：10折交叉比对\n\n### **1.3 常见的交叉验证形式**：\n\n__Holdout 验证__\n\n>方法：将原始数据随机分为两组,一组做为训练集,一组做为验证集,利用训练集训练分类器,然后利用验证集验证模型,记录最后的分类准确率为此Hold-OutMethod下分类器的性能指标.。Hold-OutMethod相对于K-fold Cross Validation 又称Double cross-validation ，或相对K-CV称 2-fold cross-validation(2-CV)\n\n>一般来说，Holdout 验证并非一种交叉验证，因为数据并没有交叉使用。 随机从最初的样本中选出部分，形成交叉验证数据，而剩余的就当做训练数据。 一般来说，少于原本样本三分之一的数据被选做验证数据。\n\n- 优点：好处的处理简单,只需随机把原始数据分为两组即可\n- 缺点：严格意义来说Hold-Out Method并不能算是CV,因为这种方法没有达到交叉的思想,由于是随机的将原始数据分组,所以最后验证集分类准确率的高低与原始数据的分组有很大的关系,所以这种方法得到的结果其实并不具有说服性.(主要原因是 训练集样本数太少，通常不足以代表母体样本的分布，导致 test 阶段辨识率容易出现明显落差。此外，2-CV 中一分为二的分子集方法的变异度大，往往无法达到「实验过程必须可以被复制」的要求。)\n\n__K-fold cross-validation__\n\n>K折交叉验证，初始采样分割成K个子样本，一个单独的子样本被保留作为验证模型的数据，其他K-1个样本用来训练。交叉验证重复K次，每个子样本验证一次，平均K次的结果或者使用其它结合方式，最终得到一个单一估测。这个方法的优势在于，同时重复运用随机产生的子样本进行训练和验证，每次的结果验证一次，10折交叉验证是最常用的。\n\n- 优点：K-CV可以有效的避免过学习以及欠学习状态的发生,最后得到的结果也比较具有说服性.  \n- 缺点：K值选取上\n\n__留一验证__\n\n>正如名称所建议， 留一验证（LOOCV）意指只使用原本样本中的一项来当做验证资料， 而剩余的则留下来当做训练资料。 这个步骤一直持续到每个样本都被当做一次验证资料。 事实上，这等同于 K-fold 交叉验证是一样的，其中K为原本样本个数。 在某些情况下是存在有效率的演算法，如使用kernel regression 和Tikhonov regularization。\n \n## __2.深入__\n\n使用交叉验证方法的目的主要有3个： \n\n- （1）从有限的学习数据中获取尽可能多的有效信息； \n- （2）交叉验证从多个方向开始学习样本的，可以有效的避免陷入局部最小值； \n- （3）可以在一定程度上避免过拟合问题。\n\n采用交叉验证方法时需要将学习数据样本分为两部分：训练数据样本和验证数据样本。并且为了得到更好的学习效果，无论训练样本还是验证样本都要尽可能参与学习。一般选取10重交叉验证即可达到好的学习效果。下面在上述原则基础上设计算法，主要描述下算法步骤，如下所示。\n\n\nAlgorithm  \n------------------------------------------------\n```\nStep1: \t将学习样本空间 C 分为大小相等的 K 份  \nStep2: \tfor i = 1 to K ：\n\t\t\t取第i份作为测试集\n\t\t\tfor j = 1 to K:\n\t\t\t\tif i != j:\n\t\t\t\t\t将第j份加到训练集中，作为训练集的一部分\n\t\t\t\tend if\n\t\t\tend for\n\t\tend for\nStep3: \tfor i in (K-1训练集)：\n\t\t\t训练第i个训练集，得到一个分类模型\n\t\t\t使用该模型在第N个数据集上测试，计算并保存模型评估指标\n\t\tend for\nStep4: \t计算模型的平均性能\nStep5: \t用这K个模型在最终验证集的分类准确率平均值作为此K-CV下分类器的性能指标.\n```\n\n## __3.实现__\n\n### __3.1 scikit-learn交叉验证__\n\n在scikit-learn中有CrossValidation的实现代码，地址： [scikit-learn官网crossvalidation文档](http://scikit-learn.org/dev/modules/cross_validation.html#cross-validation)\n\n使用方法：\n\n首先加载数据集\n\n```\n>>> import numpy as np\n>>> from sklearn import cross_validation\n>>> from sklearn import datasets\n>>> from sklearn import svm\n>>> iris = datasets.load_iris()\n>>> iris.data.shape, iris.target.shape\n((150, 4), (150,))\n```\n\n通过上面代码，数据集特征和类标签分别为iris.data, iris.target，接着进行交叉验证\n\n```\n>>> X_train, X_test, y_train, y_test = cross_validation.train_test_split(\n...     iris.data, iris.target, test_size=0.4, random_state=0)\n>>> X_train.shape, y_train.shape\n((90, 4), (90,))\n>>> X_test.shape, y_test.shape\n((60, 4), (60,))\n>>> clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)\n>>> clf.score(X_test, y_test)                           \n0.96...\n```\n\n上面的clf是分类器，可以自己替换，比如我可以使用RandomForest\n\n```\nclf = RandomForestClassifier(n_estimators=400)\n```\n\n一个比较有用的函数是train_test_split。功能是从样本中随机的按比例选取train data和test data。形式为\n\n```\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(train_data,train_target, test_size=0.4, random_state=0)\n```\ntest_size是样本占比。如果是整数的话就是样本的数量。random_state是随机数的种子。\n\n当然，也可以换成别的，具体算法可以参考 [scikit-learn官方文档](http://scikit-learn.org/dev/supervised_learning.html#supervised-learning)\n\n-------------------------\n\n### __3.2 抽样与CV结合__\n\n> 由于我跑的实验，数据是非均衡数据，不能直接套用，所以这里自己写了一个交叉验证的代码，仅供参考，如有问题，欢迎交流。\n\n首先有一个自适应的数据加载函数，主要用于加载本地文本数据，同时文本每行数据以\"\\t\"隔开，最后一列为类标号，数据样例如下：\n\n```\nA1001\t708\tK\t-4\t-3\t6\t2\t-13\t0\t2\t-4\t-4\t-10\t-9\t1\nA1002\t709\tL\t-4\t-4\t-1\t-2\t-11\t-1\t0\t-12\t-7\t-5\t-1\t-1\nA1003\t710\tG\t0\t-6\t-2\t-6\t-8\t-4\t-6\t-6\t-9\t-4\t0\t-1\nA1004\t711\tR\t0\t0\t1\t-3\t-10\t-1\t-3\t-4\t-6\t-9\t-6\t1\n```\n\n**说明**：前面三个不是特征，所以在加载数据集的时候，特征部分起始位置修改了下，loadDataSet函数如下：\n\n```\ndef loadDataSet(fileName):\n    fr = open(fileName)\n    dataMat = []; labelMat = []\n    for eachline in fr:\n        lineArr = []\n        curLine = eachline.strip().split('\\t') #remove '\\n'\n        for i in range(3, len(curLine)-1):\n            lineArr.append(float(curLine[i])) #get all feature from inpurfile\n        dataMat.append(lineArr)\n        labelMat.append(int(curLine[-1])) #last one is class lable\n    fr.close()\n    return dataMat,labelMat\n```\n\n返回的dataMat为纯特征矩阵，labelMat为类别标号。\n\n下面的**splitDataSet**用来切分数据集，如果是十折交叉，则split_size取10，filename为整个数据集文件，outdir则是切分的数据集的存放路径。\n\n```\ndef splitDataSet(fileName, split_size,outdir):\n    if not os.path.exists(outdir): #if not outdir,makrdir\n        os.makedirs(outdir)\n    fr = open(fileName,'r')#open fileName to read\n    num_line = 0\n    onefile = fr.readlines()\n    num_line = len(onefile)        \n    arr = np.arange(num_line) #get a seq and set len=numLine\n    np.random.shuffle(arr) #generate a random seq from arr\n    list_all = arr.tolist()\n    each_size = (num_line+1) / split_size #size of each split sets\n    split_all = []; each_split = []\n    count_num = 0; count_split = 0  #count_num 统计每次遍历的当前个数\n                                    #count_split 统计切分次数\n    for i in range(len(list_all)): #遍历整个数字序列\n        each_split.append(onefile[int(list_all[i])].strip()) \n        count_num += 1\n        if count_num == each_size:\n            count_split += 1 \n            array_ = np.array(each_split)\n            np.savetxt(outdir + \"/split_\" + str(count_split) + '.txt',\\\n                        array_,fmt=\"%s\", delimiter='\\t')  #输出每一份数据\n            split_all.append(each_split) #将每一份数据加入到一个list中\n            each_split = []\n            count_num = 0\n    return split_all\n```\n\nunderSample(datafile)方法为抽样函数，强正负样本比例固定为1:1，返回的是一个正负样本比例均等的数据集合。\n\n```\ndef underSample(datafile): #只针对一个数据集的下采样\n    dataMat,labelMat = loadDataSet(datafile) #加载数据\n    pos_num = 0; pos_indexs = []; neg_indexs = []   \n    for i in range(len(labelMat)):#统计正负样本的下标    \n        if labelMat[i] == 1:\n            pos_num +=1\n            pos_indexs.append(i)\n            continue\n        neg_indexs.append(i)\n    np.random.shuffle(neg_indexs)\n    neg_indexs = neg_indexs[0:pos_num]\n    fr = open(datafile, 'r')\n    onefile = fr.readlines()\n    outfile = []\n    for i in range(pos_num):\n        pos_line = onefile[pos_indexs[i]]    \n        outfile.append(pos_line)\n        neg_line= onefile[neg_indexs[i]]      \n        outfile.append(neg_line)\n    return outfile #输出单个数据集采样结果\n```\n\n下面的generateDataset(datadir,outdir)方法是从切分的数据集中留出一份作为测试集（无需抽样），对其余的进行抽样然后合并为一个作为训练集，代码如下：\n\n```\ndef generateDataset(datadir,outdir): #从切分的数据集中，对其中九份抽样汇成一个,\\\n    #剩余一个做为测试集,将最后的结果按照训练集和测试集输出到outdir中\n    if not os.path.exists(outdir): #if not outdir,makrdir\n        os.makedirs(outdir)\n    listfile = os.listdir(datadir)\n    train_all = []; test_all = [];cross_now = 0\n    for eachfile1 in listfile:\n        train_sets = []; test_sets = []; \n        cross_now += 1 #记录当前的交叉次数\n        for eachfile2 in listfile:\n            if eachfile2 != eachfile1:#对其余九份欠抽样构成训练集\n                one_sample = underSample(datadir + '/' + eachfile2)\n                for i in range(len(one_sample)):\n                    train_sets.append(one_sample[i])\n        #将训练集和测试集文件单独保存起来\n        with open(outdir +\"/test_\"+str(cross_now)+\".datasets\",'w') as fw_test:\n            with open(datadir + '/' + eachfile1, 'r') as fr_testsets:\n                for each_testline in fr_testsets:                \n                    test_sets.append(each_testline) \n            for oneline_test in test_sets:\n                fw_test.write(oneline_test) #输出测试集\n            test_all.append(test_sets)#保存训练集\n        with open(outdir+\"/train_\"+str(cross_now)+\".datasets\",'w') as fw_train:\n            for oneline_train in train_sets:   \n                oneline_train = oneline_train\n                fw_train.write(oneline_train)#输出训练集\n            train_all.append(train_sets)#保存训练集\n    return train_all,test_all\n```\n\n因为需要评估交叉验证，所以我写了一个performance方法根据真实类标签纸和预测值来计算SN和SP，当然如果需要其他的评估标准，继续添加即可。\n\n```\ndef performance(labelArr, predictArr):#类标签为int类型\n    #labelArr[i] is actual value,predictArr[i] is predict value\n    TP = 0.; TN = 0.; FP = 0.; FN = 0.   \n    for i in range(len(labelArr)):\n        if labelArr[i] == 1 and predictArr[i] == 1:\n            TP += 1.\n        if labelArr[i] == 1 and predictArr[i] == -1:\n            FN += 1.\n        if labelArr[i] == -1 and predictArr[i] == 1:\n            FP += 1.\n        if labelArr[i] == -1 and predictArr[i] == -1:\n            TN += 1.\n    SN = TP/(TP + FN) #Sensitivity = TP/P  and P = TP + FN \n    SP = TN/(FP + TN) #Specificity = TN/N  and N = TN + FP\n    #MCC = (TP*TN-FP*FN)/math.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))\n    return SN,SP\n```\n\n classifier(clf,train_X, train_y, test_X, test_y)方法是交叉验证中每次用的分类器训练过程以及测试过程，里面使用的分类器是scikit-learn自带的。该方法会将一些训练结果写入到文件中并保存到本地，同时在最后会返回ACC,SP,SN。\n\n```\ndef classifier(clf,train_X, train_y, test_X, test_y):#X:训练特征，y:训练标号\n    # train with randomForest \n    print \" training begin...\"\n    clf = clf.fit(train_X,train_y)\n    print \" training end.\"\n    #==========================================================================\n    # test randomForestClassifier with testsets\n    print \" test begin.\"\n    predict_ = clf.predict(test_X) #return type is float64\n    proba = clf.predict_proba(test_X) #return type is float64\n    score_ = clf.score(test_X,test_y)\n    print \" test end.\"\n    #==========================================================================\n    # Modeal Evaluation\n    ACC = accuracy_score(test_y, predict_)\n    SN,SP = performance(test_y, predict_)\n    MCC = matthews_corrcoef(test_y, predict_)\n    #AUC = roc_auc_score(test_labelMat, proba)\n    #==========================================================================\n    #save output \n    eval_output = []\n    eval_output.append(ACC);eval_output.append(SN)  #eval_output.append(AUC)\n    eval_output.append(SP);eval_output.append(MCC)\n    eval_output.append(score_)\n    eval_output = np.array(eval_output,dtype=float)\n    np.savetxt(\"proba.data\",proba,fmt=\"%f\",delimiter=\"\\t\")\n    np.savetxt(\"test_y.data\",test_y,fmt=\"%f\",delimiter=\"\\t\")\n    np.savetxt(\"predict.data\",predict_,fmt=\"%f\",delimiter=\"\\t\") \n    np.savetxt(\"eval_output.data\",eval_output,fmt=\"%f\",delimiter=\"\\t\")\n    print \"Wrote results to output.data...EOF...\"\n    return ACC,SN,SP\n```\n\n下面的mean_fun用于求列表list中数值的平均值，主要是求ACC_mean,SP_mean,SN_mean，用来评估模型好坏。\n\n```\ndef mean_fun(onelist):\n    count = 0\n    for i in onelist:\n        count += i\n    return float(count/len(onelist))\n```\n\n交叉验证代码\n\n```\ndef crossValidation(clf, clfname, curdir,train_all, test_all):\n    os.chdir(curdir)\n    #构造出纯数据型样本集\n    cur_path = curdir\n    ACCs = [];SNs = []; SPs =[]\n    for i in range(len(train_all)):\n        os.chdir(cur_path)\n        train_data = train_all[i];train_X = [];train_y = []\n        test_data = test_all[i];test_X = [];test_y = []\n        for eachline_train in train_data:\n            one_train = eachline_train.split('\\t') \n            one_train_format = []\n            for index in range(3,len(one_train)-1):\n                one_train_format.append(float(one_train[index]))\n            train_X.append(one_train_format)\n            train_y.append(int(one_train[-1].strip()))\n        for eachline_test in test_data:\n            one_test = eachline_test.split('\\t')\n            one_test_format = []\n            for index in range(3,len(one_test)-1):\n                one_test_format.append(float(one_test[index]))\n            test_X.append(one_test_format)\n            test_y.append(int(one_test[-1].strip()))\n        #======================================================================\n        #classifier start here\n        if not os.path.exists(clfname):#使用的分类器\n            os.mkdir(clfname)\n        out_path = clfname + \"/\" + clfname + \"_00\" + str(i)#计算结果文件夹\n        if not os.path.exists(out_path):\n            os.mkdir(out_path)\n        os.chdir(out_path)\n        ACC, SN, SP = classifier(clf, train_X, train_y, test_X, test_y)\n        ACCs.append(ACC);SNs.append(SN);SPs.append(SP)\n        #======================================================================\n    ACC_mean = mean_fun(ACCs)\n    SN_mean = mean_fun(SNs)\n    SP_mean = mean_fun(SPs)\n    #==========================================================================\n    #output experiment result\n    os.chdir(\"../\")\n    os.system(\"echo `date` '\" + str(clf) + \"' >> log.out\")\n    os.system(\"echo ACC_mean=\" + str(ACC_mean) + \" >> log.out\")\n    os.system(\"echo SN_mean=\" + str(SN_mean) + \" >> log.out\")\n    os.system(\"echo SP_mean=\" + str(SP_mean) + \" >> log.out\")\n    return ACC_mean, SN_mean, SP_mean\n```\n\n**测试：**\n\n```python\nif __name__ == '__main__':\n\tos.chdir(\"your workhome\") #你的数据存放目录\n    datadir = \"split10_1\" #切分后的文件输出目录\n    splitDataSet('datasets',10,datadir)#将数据集datasets切为十个保存到datadir目录中\n\t#==========================================================================\n    outdir = \"sample_data1\"\t#抽样的数据集存放目录\n    train_all,test_all = generateDataset(datadir,outdir) #抽样后返回训练集和测试集\n    print \"generateDataset end and cross validation start\"\n    #==========================================================================\n    #分类器部分\n    from sklearn.ensemble import RandomForestClassifier\n    clf = RandomForestClassifier(n_estimators=500) #使用随机森林分类器来训练\n    clfname = \"RF_1\"\n    #==========================================================================\n    curdir = \"experimentdir\" #工作目录\n\t#clf:分类器,clfname:分类器名称,curdir:当前路径,train_all:训练集,test_all:测试集\n    ACC_mean, SN_mean, SP_mean = crossValidation(clf, clfname, curdir, train_all,test_all)\n    print ACC_mean,SN_mean,SP_mean\t#将ACC均值，SP均值，SN均值都输出到控制台\n```\n\n上面的代码主要用于抽样后的十倍交叉验证，该怎么设置参数，还得具体分析。\n\n总之，交叉验证在一定程度上能够避免陷入局部最小值。一般实际操作中使用的是十折交叉验证，单具体情况还得具体分析，并没有一个统一的标准固定十倍交叉的参数或者是算法的选择以及算法参数的选择。不同的数据使用不同的算法往往会的得到不同的最优分类器。So,just try it!Happy coding!\n\n------\n<br>\n","slug":"2015-07-28 crossvalidation","published":1,"updated":"2015-11-19T07:50:44.438Z","comments":1,"photos":[],"link":"","_id":"cih8q8rpv001xr8uj7aa77ifb"},{"layout":"post","date":"2015-07-23T04:53:00.000Z","title":"scikit-klean交叉验证","comment":true,"_content":"\n__一个Windows操作系统能够使用的pythonIDE__\n> winPython下载地址：[WinPython_2.7](http://sourceforge.net/projects/winpython/files/WinPython_2.7/2.7.10.1/)\n\n\n传统的F-measure或平衡的F-score (F1 score)是精度和召回的调和平均值：\n\n$$F_1 = 2\\dfrac{precision * recall}{precision + recall}$$\n\n\n### __1.Cross Validation （交叉验证）__\n\ncross validation大概的意思是：对于原始数据我们要将其一部分分为train_data，一部分分为test_data。train_data用于训练，test_data用于测试准确率。在test_data上测试的结果叫做validation_error。将一个算法作用于一个原始数据，我们不可能只做出随机的划分一次train和test_data，然后得到一个validation_error，就作为衡量这个算法好坏的标准。因为这样存在偶然性。我们必须好多次的随机的划分train_data和test_data，分别在其上面算出各自的validation_error。这样就有一组validation_error，根据这一组validation_error，就可以较好的准确的衡量算法的好坏。\n<!-- more -->\ncross validation是在数据量有限的情况下的非常好的一个evaluate performance的方法。而对原始数据划分出train data和test data的方法有很多种，这也就造成了cross validation的方法有很多种。\n\nsklearn中的cross validation模块，最主要的函数是如下函数：\nsklearn.cross_validation.cross_val_score:他的调用形式是scores = cross_validation.cross_val_score(clf, raw_data, raw_target, cv=5, score_func=None)\n\n__参数解释：__\n\n__clf__:表示的是不同的分类器，可以是任何的分类器。比如支持向量机分类器。clf = svm.SVC(kernel='linear', C=1)；   \n__raw_data__：原始数据；  \n__raw_target__:原始类别标号；  \n__cv__：代表的就是不同的cross validation的方法了。引用scikit-learn上的一句话（When the cv argument is an integer, cross_val_score uses the KFold or StratifiedKFold strategies by default, the latter being used if the estimator derives from ClassifierMixin.）如果cv是一个int数字的话，那么默认使用的是KFold或者StratifiedKFold交叉，如果如果指定了类别标签则使用的是StratifiedKFold。  \n__cross_val_score__:这个函数的返回值就是对于每次不同的的划分raw_data时，在test_data上得到的分类的**准确率**。至于准确率的算法可以通过score_func参数指定，如果不指定的话，是用clf默认自带的准确率算法。  \n\nscikit-learn的cross-validation交叉验证代码：\n\n```\n>>> from sklearn import cross_validation\n>>> from sklearn import svm\n>>> clf = svm.SVC(kernel='linear', C=1)\n>>> scores = cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5)#5-fold cv\n# change metrics\n>>> from sklearn import metrics\n>>> cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5, score_func=metrics.f1_score)\n#f1 score: http://en.wikipedia.org/wiki/F1_score\n```\n  \nNote: if using LR, clf = LogisticRegression().\n\n__生成一个数据集做为交叉验证__\n\n```\n>>> import numpy as np\n>>> from sklearn.cross_validation import train_test_split\n>>> X, y = np.arange(10).reshape((5, 2)), range(5)\n>>> X\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n>>> list(y)\n[0, 1, 2, 3, 4]\n```\n\n__将数据切分为训练集和测试集__\n\n```\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, test_size=0.33, random_state=42)\n...\n>>> X_train\narray([[4, 5],\n       [0, 1],\n       [6, 7]])\n>>> y_train\n[2, 0, 3]\n>>> X_test\narray([[2, 3],\n       [8, 9]])\n>>> y_test\n[1, 4]\n```\n\n__交叉验证的使用__\n\n下面是手动划分训练集和测试集，控制台中输入下列代码进行测试：\n\n```\n>>> import numpy as np\n>>> from sklearn import cross_validation\n>>> from sklearn import datasets\n>>> from sklearn import svm\n>>> iris = datasets.load_iris()\n>>> iris.data.shape, iris.target.shape\n((150, 4), (150,))\n>>> X_train, X_test, y_train, y_test = cross_validation.train_test_split(\n...     iris.data, iris.target, test_size=0.4, random_state=0)\n>>> X_train.shape, y_train.shape\n((90, 4), (90,))\n>>> X_test.shape, y_test.shape\n((60, 4), (60,))\n>>> clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)\n>>> clf.score(X_test, y_test)                           \n0.96...\n```\n\n下面是交叉验证的实例：\n\n```\n>>> clf = svm.SVC(kernel='linear', C=1)\n>>> scores = cross_validation.cross_val_score(\n...    clf, iris.data, iris.target, cv=5)\n...\n>>> scores                                              \narray([ 0.96...,  1.  ...,  0.96...,  0.96...,  1.        ])\n```\n\n通过cross_validation，设置cv=5，进行5倍交叉验证，最后得到一个scores的预测准确率数组，表示每次交叉验证得到的准确率。\n\n```\n>>> print(\"Accuracy: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))\nAccuracy: 0.98 (+/- 0.03)\n```\n\n通过scores.mean()求出平均值，得到平均精度。还可以通过指定scoring来设置准确率算法\n\n```\n>>> from sklearn import metrics\n>>> scores = cross_validation.cross_val_score(clf, iris.data, iris.target,\n...     cv=5, scoring='f1_weighted')\n>>> scores                                              \narray([ 0.96...,  1.  ...,  0.96...,  0.96...,  1.        ])\n```\n\n__libsvm格式的数据导入：__\n\n\n```\n>>> from sklearn.datasets import load_svmlight_file\n>>> X_train, y_train = load_svmlight_file(\"/path/to/train_dataset.txt\")\n...\n>>>X_train.todense()#将稀疏矩阵转化为完整特征矩阵\n```\n\n------\n\n### __2.处理非均衡问题__\n\n对于正负样本比例相差较大的非均衡问题，一种调节分类器的方法就是对分类器的训练数据进行改造。一种是**欠抽样**，一种是**过抽样**。过抽样意味着赋值样例，而欠抽样意味着删除样例。对于过抽样，最后可能导致过拟合问题；而对于欠抽样，则删掉的样本中可能包含某些重要的信息，会导致欠拟合。对于正例样本较少的情况下，通常采取的方式是**使用反例类别的欠抽样和正例类别的过抽样相混合的方法**\n\n\n\n\n---\n\n### __3.scikit-learn学习SVM__\n\n```\n>>> from sklearn import datasets\n>>> iris = datasets.load_iris()\n>>> digits = datasets.load_digits()\n>>> print digits.data\n[[  0.   0.   5. ...,   0.   0.   0.]\n [  0.   0.   0. ...,  10.   0.   0.]\n [  0.   0.   0. ...,  16.   9.   0.]\n ..., \n [  0.   0.   1. ...,   6.   0.   0.]\n [  0.   0.   2. ...,  12.   0.   0.]\n [  0.   0.  10. ...,  12.   1.   0.]]\n>>> digits.target\narray([0, 1, 2, ..., 8, 9, 8])\n>>> digits.images[0]\narray([[  0.,   0.,   5.,  13.,   9.,   1.,   0.,   0.],\n       [  0.,   0.,  13.,  15.,  10.,  15.,   5.,   0.],\n       [  0.,   3.,  15.,   2.,   0.,  11.,   8.,   0.],\n       [  0.,   4.,  12.,   0.,   0.,   8.,   8.,   0.],\n       [  0.,   5.,   8.,   0.,   0.,   9.,   8.,   0.],\n       [  0.,   4.,  11.,   0.,   1.,  12.,   7.,   0.],\n       [  0.,   2.,  14.,   5.,  10.,  12.,   0.,   0.],\n       [  0.,   0.,   6.,  13.,  10.,   0.,   0.,   0.]])\n>>> from sklearn import svm\n>>> clf = svm.SVC(gamma=0.001, C=100.)\n>>> clf.fit(digits.data[:-1],digits.target[:-1])\nSVC(C=100.0, cache_size=200, class_weight=None, coef0=0.0, degree=3,\n  gamma=0.001, kernel='rbf', max_iter=-1, probability=False,\n  random_state=None, shrinking=True, tol=0.001, verbose=False)\n>>> clf.predict(digits.data[-1])\narray([8])\n>>> \n```\n\n---\n\n\n### __4.scikit-learn学习RandomForest__\n\n\n使用例子\n\n```\n>>> from sklearn.ensemble import RandomForestClassifier\n>>> X = [[0, 0], [1, 1]]\n>>> Y = [0, 1]\n>>> clf = RandomForestClassifier(n_estimators=10)\n>>> clf = clf.fit(X, Y)\n```\n\n__Method__\n\n\n![](/assets/articleImg/2015-07-21 randomForest分类器的方法png.png)\n\nrandomForestClassifier分类器的初始值\n\n```\ndef __init__(self,\n\t n_estimators=10,\n\t criterion=\"gini\",\n\t max_depth=None,\n\t min_samples_split=2,\n\t min_samples_leaf=1,\n\t min_weight_fraction_leaf=0.,\n\t max_features=\"auto\",\n\t max_leaf_nodes=None,\n\t bootstrap=True,\n\t oob_score=False,\n\t n_jobs=1,\n\t random_state=None,\n\t verbose=0,\n\t warm_start=False,\n\t class_weight=None):\n```\n\n------\n\n<br>\n\n","source":"_posts/2015-07-23 machine learning tips.md","raw":"---\nlayout: post\ndate: 2015-07-23 12:53\ntitle: \"scikit-klean交叉验证\"\ntags: \n\t- Machine Learning\ncomment: true\ncategories: ML\n---\n\n__一个Windows操作系统能够使用的pythonIDE__\n> winPython下载地址：[WinPython_2.7](http://sourceforge.net/projects/winpython/files/WinPython_2.7/2.7.10.1/)\n\n\n传统的F-measure或平衡的F-score (F1 score)是精度和召回的调和平均值：\n\n$$F_1 = 2\\dfrac{precision * recall}{precision + recall}$$\n\n\n### __1.Cross Validation （交叉验证）__\n\ncross validation大概的意思是：对于原始数据我们要将其一部分分为train_data，一部分分为test_data。train_data用于训练，test_data用于测试准确率。在test_data上测试的结果叫做validation_error。将一个算法作用于一个原始数据，我们不可能只做出随机的划分一次train和test_data，然后得到一个validation_error，就作为衡量这个算法好坏的标准。因为这样存在偶然性。我们必须好多次的随机的划分train_data和test_data，分别在其上面算出各自的validation_error。这样就有一组validation_error，根据这一组validation_error，就可以较好的准确的衡量算法的好坏。\n<!-- more -->\ncross validation是在数据量有限的情况下的非常好的一个evaluate performance的方法。而对原始数据划分出train data和test data的方法有很多种，这也就造成了cross validation的方法有很多种。\n\nsklearn中的cross validation模块，最主要的函数是如下函数：\nsklearn.cross_validation.cross_val_score:他的调用形式是scores = cross_validation.cross_val_score(clf, raw_data, raw_target, cv=5, score_func=None)\n\n__参数解释：__\n\n__clf__:表示的是不同的分类器，可以是任何的分类器。比如支持向量机分类器。clf = svm.SVC(kernel='linear', C=1)；   \n__raw_data__：原始数据；  \n__raw_target__:原始类别标号；  \n__cv__：代表的就是不同的cross validation的方法了。引用scikit-learn上的一句话（When the cv argument is an integer, cross_val_score uses the KFold or StratifiedKFold strategies by default, the latter being used if the estimator derives from ClassifierMixin.）如果cv是一个int数字的话，那么默认使用的是KFold或者StratifiedKFold交叉，如果如果指定了类别标签则使用的是StratifiedKFold。  \n__cross_val_score__:这个函数的返回值就是对于每次不同的的划分raw_data时，在test_data上得到的分类的**准确率**。至于准确率的算法可以通过score_func参数指定，如果不指定的话，是用clf默认自带的准确率算法。  \n\nscikit-learn的cross-validation交叉验证代码：\n\n```\n>>> from sklearn import cross_validation\n>>> from sklearn import svm\n>>> clf = svm.SVC(kernel='linear', C=1)\n>>> scores = cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5)#5-fold cv\n# change metrics\n>>> from sklearn import metrics\n>>> cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5, score_func=metrics.f1_score)\n#f1 score: http://en.wikipedia.org/wiki/F1_score\n```\n  \nNote: if using LR, clf = LogisticRegression().\n\n__生成一个数据集做为交叉验证__\n\n```\n>>> import numpy as np\n>>> from sklearn.cross_validation import train_test_split\n>>> X, y = np.arange(10).reshape((5, 2)), range(5)\n>>> X\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n>>> list(y)\n[0, 1, 2, 3, 4]\n```\n\n__将数据切分为训练集和测试集__\n\n```\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...     X, y, test_size=0.33, random_state=42)\n...\n>>> X_train\narray([[4, 5],\n       [0, 1],\n       [6, 7]])\n>>> y_train\n[2, 0, 3]\n>>> X_test\narray([[2, 3],\n       [8, 9]])\n>>> y_test\n[1, 4]\n```\n\n__交叉验证的使用__\n\n下面是手动划分训练集和测试集，控制台中输入下列代码进行测试：\n\n```\n>>> import numpy as np\n>>> from sklearn import cross_validation\n>>> from sklearn import datasets\n>>> from sklearn import svm\n>>> iris = datasets.load_iris()\n>>> iris.data.shape, iris.target.shape\n((150, 4), (150,))\n>>> X_train, X_test, y_train, y_test = cross_validation.train_test_split(\n...     iris.data, iris.target, test_size=0.4, random_state=0)\n>>> X_train.shape, y_train.shape\n((90, 4), (90,))\n>>> X_test.shape, y_test.shape\n((60, 4), (60,))\n>>> clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)\n>>> clf.score(X_test, y_test)                           \n0.96...\n```\n\n下面是交叉验证的实例：\n\n```\n>>> clf = svm.SVC(kernel='linear', C=1)\n>>> scores = cross_validation.cross_val_score(\n...    clf, iris.data, iris.target, cv=5)\n...\n>>> scores                                              \narray([ 0.96...,  1.  ...,  0.96...,  0.96...,  1.        ])\n```\n\n通过cross_validation，设置cv=5，进行5倍交叉验证，最后得到一个scores的预测准确率数组，表示每次交叉验证得到的准确率。\n\n```\n>>> print(\"Accuracy: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))\nAccuracy: 0.98 (+/- 0.03)\n```\n\n通过scores.mean()求出平均值，得到平均精度。还可以通过指定scoring来设置准确率算法\n\n```\n>>> from sklearn import metrics\n>>> scores = cross_validation.cross_val_score(clf, iris.data, iris.target,\n...     cv=5, scoring='f1_weighted')\n>>> scores                                              \narray([ 0.96...,  1.  ...,  0.96...,  0.96...,  1.        ])\n```\n\n__libsvm格式的数据导入：__\n\n\n```\n>>> from sklearn.datasets import load_svmlight_file\n>>> X_train, y_train = load_svmlight_file(\"/path/to/train_dataset.txt\")\n...\n>>>X_train.todense()#将稀疏矩阵转化为完整特征矩阵\n```\n\n------\n\n### __2.处理非均衡问题__\n\n对于正负样本比例相差较大的非均衡问题，一种调节分类器的方法就是对分类器的训练数据进行改造。一种是**欠抽样**，一种是**过抽样**。过抽样意味着赋值样例，而欠抽样意味着删除样例。对于过抽样，最后可能导致过拟合问题；而对于欠抽样，则删掉的样本中可能包含某些重要的信息，会导致欠拟合。对于正例样本较少的情况下，通常采取的方式是**使用反例类别的欠抽样和正例类别的过抽样相混合的方法**\n\n\n\n\n---\n\n### __3.scikit-learn学习SVM__\n\n```\n>>> from sklearn import datasets\n>>> iris = datasets.load_iris()\n>>> digits = datasets.load_digits()\n>>> print digits.data\n[[  0.   0.   5. ...,   0.   0.   0.]\n [  0.   0.   0. ...,  10.   0.   0.]\n [  0.   0.   0. ...,  16.   9.   0.]\n ..., \n [  0.   0.   1. ...,   6.   0.   0.]\n [  0.   0.   2. ...,  12.   0.   0.]\n [  0.   0.  10. ...,  12.   1.   0.]]\n>>> digits.target\narray([0, 1, 2, ..., 8, 9, 8])\n>>> digits.images[0]\narray([[  0.,   0.,   5.,  13.,   9.,   1.,   0.,   0.],\n       [  0.,   0.,  13.,  15.,  10.,  15.,   5.,   0.],\n       [  0.,   3.,  15.,   2.,   0.,  11.,   8.,   0.],\n       [  0.,   4.,  12.,   0.,   0.,   8.,   8.,   0.],\n       [  0.,   5.,   8.,   0.,   0.,   9.,   8.,   0.],\n       [  0.,   4.,  11.,   0.,   1.,  12.,   7.,   0.],\n       [  0.,   2.,  14.,   5.,  10.,  12.,   0.,   0.],\n       [  0.,   0.,   6.,  13.,  10.,   0.,   0.,   0.]])\n>>> from sklearn import svm\n>>> clf = svm.SVC(gamma=0.001, C=100.)\n>>> clf.fit(digits.data[:-1],digits.target[:-1])\nSVC(C=100.0, cache_size=200, class_weight=None, coef0=0.0, degree=3,\n  gamma=0.001, kernel='rbf', max_iter=-1, probability=False,\n  random_state=None, shrinking=True, tol=0.001, verbose=False)\n>>> clf.predict(digits.data[-1])\narray([8])\n>>> \n```\n\n---\n\n\n### __4.scikit-learn学习RandomForest__\n\n\n使用例子\n\n```\n>>> from sklearn.ensemble import RandomForestClassifier\n>>> X = [[0, 0], [1, 1]]\n>>> Y = [0, 1]\n>>> clf = RandomForestClassifier(n_estimators=10)\n>>> clf = clf.fit(X, Y)\n```\n\n__Method__\n\n\n![](/assets/articleImg/2015-07-21 randomForest分类器的方法png.png)\n\nrandomForestClassifier分类器的初始值\n\n```\ndef __init__(self,\n\t n_estimators=10,\n\t criterion=\"gini\",\n\t max_depth=None,\n\t min_samples_split=2,\n\t min_samples_leaf=1,\n\t min_weight_fraction_leaf=0.,\n\t max_features=\"auto\",\n\t max_leaf_nodes=None,\n\t bootstrap=True,\n\t oob_score=False,\n\t n_jobs=1,\n\t random_state=None,\n\t verbose=0,\n\t warm_start=False,\n\t class_weight=None):\n```\n\n------\n\n<br>\n\n","slug":"2015-07-23 machine learning tips","published":1,"updated":"2015-11-19T07:50:44.437Z","comments":1,"photos":[],"link":"","_id":"cih8q8rq10020r8uj1t218ttk"},{"layout":"post","date":"2015-07-21T22:53:00.000Z","title":"机器学习-组合算法总结","comment":true,"_content":"\n\n## __组合模型__\n\n\n下面简单的介绍下Bootstraping, Bagging, Boosting, AdaBoost, RandomForest 和Gradient boosting这些组合型算法.\n\n### __1.Bootstraping__\n\n**Bootstraping**: 名字来自成语“pull up by your own bootstraps”，意思就是依靠你自己的资源，称为自助法，它是一种有放回的抽样方法，它是非参数统计中一种重要的估计统计量方差进而进行区间估计的统计方法。其核心思想和基本步骤如下：  \n <!-- more -->\n>（1）采用重抽样技术从原始样本中抽取一定数量（自己给定）的样本，此过程允许重复抽样。    \n>（2）根据抽出的样本计算给定的统计量T。  \n>（3）重复上述N次（一般大于1000），得到N个统计量T。  \n>（4）计算上述N个统计量T的样本方差，得到统计量的方差。 \n\n\n应该说Bootstrap是现代统计学较为流行的一种统计方法，在小样本时效果很好。通过方差的估计可以构造置信区间等，其运用范围得到进一步延伸。\n\n---\n\n### **2.装袋bagging**\n\n装袋算法相当于多个专家投票表决，对于多次测试，每个样本返回的是多次预测结果较多的那个。\n\n装袋算法描述\n\n```\n模型生成\n\t令n为训练数据的实例数量\n\t对于t次循环中的每一次\n\t\t从训练数据中采样n个实例\n\t\t将学习应用于所采样本\n\t\t保存结果模型\n分类\n\t对于t个模型的每一个\n\t\t使用模型对实例进行预测\n\t返回被预测次数最多的一个\n```\n\nbagging：bootstrap aggregating的缩写。让该学习算法训练多轮，每轮的训练集由从初始的训练集中随机取出的n个训练样本组成，某个初始训练样本在某轮训练集中可以出现多次或根本不出现，训练之后可得到一个预测函数序列\n\n$$h_1，⋯ ⋯h_n$$ \n\n最终的预测函数H对分类问题采用**投票方式**，对回归问题采用**简单平均方法**对新示例进行判别。\n\n[训练R个分类器f_i，分类器之间其他相同就是参数不同。其中f_i是通过从训练集合中(N篇文档)随机取(取后放回)N次文档构成的训练集合训练得到的。对于新文档d，用这R个分类器去分类，得到的最多的那个类别作为d的最终类别。]\n\n使用scikit-learn测试bagging方法\n\n```\n>>> from sklearn.ensemble import BaggingClassifier\n>>> from sklearn.neighbors import KNeighborsClassifier\n>>> bagging = BaggingClassifier(KNeighborsClassifier(),\n...                             max_samples=0.5, max_features=0.5)\n```\n\n---\n\n### __3.提升Boosting与Adaboost__\n\n**提升算法描述**\n\n```\n模型生成\n\t赋予每个训练实例相同的权值\n\tt次循环中的每一次：\n\t\t将学习算法应用于加了权的数据集上并保存结果模型\n\t\t计算模型在加了权的数据上的误差e并保存这个误差\n\t\t结果e等于0或者大于等于0.5：\n\t\t\t终止模型\n\t\t对于数据集中的每个实例：\n\t\t\t如果模型将实例正确分类\n\t\t\t\t将实例的权值乘以e/(1-e)\n\t\t将所有的实例权重进行正常化\n分类\n\t赋予所有类权重为0\n\t对于t（或小于t）个模型中的每一个：\n\t\t给模型预测的类加权 -log(e/(1-e))\n\t返回权重最高的类\n```\n\n这个模型提供了一种巧妙的方法生成一系列互补型的专家。\n\n**boosting**: 其中主要的是**AdaBoost**（Adaptive boosting，自适应boosting）。初始化时对每一个训练例赋相等的权重1／N，然后用该学算法对训练集训练t轮，每次训练后，对训练失败的训练例赋以较大的权重，也就是让学习算法在后续的学习中集中对比较难的训练例进行学习，从而得到一个预测函数序列$h_1,⋯, h_m$ , 其中h_i也有一定的权重，预测效果好的预测函数权重较大，反之较小。最终的预测函数H对分类问题采用有权重的投票方式，对回归问题采用加权平均的方法对新示例进行判别。\n\n提升算法理想状态是这些模型对于其他模型来说是一个补充，每个模型是这个领域的一个专家，而其他模型在这部分却不能表现很好，就像执行官一样要寻觅那些技能和经验互补的顾问，而不是重复的。这与装袋算法有所区分。\n\nAdaboost算法描述\n\n```\n模型生成\n\t训练数据中的每个样本，并赋予一个权重，构成权重向量D，初始值为1/N\n\tt次循环中的每一次：\n\t\t在训练数据上训练弱分类器并计算分类器的错误率e\n\t\t如果e等于0或者大于等于用户指定的阈值：\n\t\t\t终止模型，break\n\t\t重新调整每个样本的权重，其中alpha=0.5*ln((1-e)/e)\n\t\t对权重向量D进行更新，正确分类的样本的权重降低而错误分类的样本权重值升高\n\t\t对于数据集中的每个样例：\n\t\t\t如果某个样本正确分类：\n\t\t\t\t权重改为D^(t+1)_i = D^(t)_i * e^(-a)/Sum(D)\n\t\t\t如果某个样本错误分类：\n\t\t\t\t权重改为D^(t+1)_i = D^(t)_i * e^(a)/Sum(D)\n分类\n\t赋予所有类权重为0\n\t对于t（或小于t）个模型（基分类器）中的每一个：\n\t\t给模型预测的类加权 -log(e/(1-e))\n\t返回权重最高的类\n```\n（类似Bagging方法，但是训练是串行进行的，第k个分类器训练时关注对前k-1分类器中错分的文档，即不是随机取，而是加大取这些文档的概率。)\n\n__bagging与boosting的区别__：\n\n二者的主要区别是**取样方式不同**。bagging采用**均匀取样**，而Boosting根据**错误率来取样**，因此boosting的分类精度要优于Bagging。bagging的训练集的选择是随机的，各轮训练集之间相互独立，而boostlng的各轮训练集的选择与前面各轮的学习结果有关；bagging的各个预测函数没有权重，而boosting是有权重的；bagging的各个预测函数可以并行生成，而boosting的各个预测函数只能顺序生成。对于象神经网络这样极为耗时的学习方法。bagging可通过并行训练节省大量时间开销。\n\nbagging和boosting都可以有效地提高分类的准确性。在大多数数据集中，boosting的准确性比bagging高。在有些数据集中，boosting会引起退化--- Overfit。  \n\nBoosting思想的一种改进型AdaBoost方法在邮件过滤、文本分类方面都有很好的性能。 \n\n**Gradient boosting（又叫Mart, Treenet)**：Boosting是一种思想，Gradient Boosting是一种实现Boosting的方法，它主要的思想是，每一次建立模型是在之前建立模型**损失函数的梯度下降方向**。**损失函数(loss function)描述的是模型的不靠谱程度，损失函数越大，则说明模型越容易出错。**如果我们的模型能够让损失函数持续的下降，则说明我们的模型在不停的改进，而最好的方式就是**让损失函数在其梯度（Gradient)的方向上下降**。  \n\n使用scikit-learn测试adaboost算法\n\n```\n>>> from sklearn.cross_validation import cross_val_score\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.ensemble import AdaBoostClassifier\n>>> iris = load_iris()\n>>> clf = AdaBoostClassifier(n_estimators=100)\n>>> scores = cross_val_score(clf, iris.data, iris.target)\n>>> scores.mean()                             \n0.9...\n```\n\n\n\n---\n\n### __4.Random Forest__\n\n**Random Forest**： 随机森林，顾名思义，是用随机的方式建立一个森林，森林里面有很多的决策树组成，随机森林的每一棵决策树之间是没有关联的。在得到森林之后，当有一个新的输入样本进入的时候，就让森林中的每一棵决策树分别进行一下判断，看看这个样本应该属于哪一类（对于分类算法），然后看看哪一类被选择最多，就预测这个样本为那一类。 在建立每一棵决策树的过程中，有两点需要注意——**采样**与**完全分裂**。首先是两个随机采样的过程，random forest对输入的数据要进行行和列的采样。对于行采样，采用有放回的方式，也就是在采样得到的样本集合中，可能有重复的样本。假设输入样本为N个，那么采样的样本也为N个。这样使得在训练的时候，每一棵树的输入样本都不是全部的样本，使得相对不容易出现over-fitting。然后进行列采样，从M个feature中，选择m个(m << M)。之后就是对采样之后的数据使用完全分裂的方式建立出决策树，这样决策树的某一个叶子节点要么是无法继续分裂的，要么里面的所有样本的都是指向的同一个分类。**一般很多的决策树算法都一个重要的步骤——剪枝，但随机森林不这样做，由于之前的两个随机采样的过程保证了随机性，所以就算不剪枝，也不会出现over-fitting。** 按这种算法得到的随机森林中的每一棵都是很弱的，但是大家组合起来就很厉害了。可以这样比喻随机森林算法：每一棵决策树就是一个精通于某一个窄领域的专家（因为我们从M个feature中选择m让每一棵决策树进行学习），这样在随机森林中就有了很多个精通不同领域的专家，对一个新的问题（新的输入数据），可以用不同的角度去看待它，最终由各个专家，投票得到结果。  \n\n__Random forest与bagging的区别__：\n\n(1)Random forest是选与输入样本的数目相同多的次数（可能一个样本会被选取多次，同时也会造成一些样本不会被选取到），而bagging一般选取比输入样本的数目少的样本；  \n(2)bagging是用全部特征来得到分类器，而Random forest是需要从全部特征中选取其中的一部分来训练得到分类器； **一般Random forest效果比bagging效果好！**\n\n使用scikit-learn测试随机森林算法\n\n```\n>>> from sklearn.ensemble import RandomForestClassifier\n>>> X = [[0, 0], [1, 1]]\n>>> Y = [0, 1]\n>>> clf = RandomForestClassifier(n_estimators=10)\n>>> clf = clf.fit(X, Y)\n```\n\n\n### __5.Gradient boosting__\n\n梯度提升树或者梯度提升回归树(GBRT)是任意一个不同损失函数的泛化。GBRT是一个灵敏的并且高效程序，可以用在回归和分类中。梯度提升树模型在许多领域中都有使用，如web搜索排行榜和社会生态学中。它主要的思想是，每一次建立模型是在之前建立模型损失函数的梯度下降方向。这句话有一点拗口，损失函数(loss function)描述的是模型的不靠谱程度，损失函数越大，则说明模型越容易出错（其实这里有一个方差、偏差均衡的问题，但是这里就假设损失函数越大，模型越容易出错）。如果我们的模型能够让损失函数持续的下降，则说明我们的模型在不停的改进，而最好的方式就是让损失函数在其梯度（Gradient)的方向上下降。\n\n\nGRBT的优势：\n\n- 混合数据类型的自然处理\n- 预测力强\n- 健壮的输出空间\n\nBoosting主要是一种思想，表示“知错就改”。而Gradient Boosting是在这个思想下的一种函数（也可以说是模型）的优化的方法，首先将函数分解为可加的形式（其实所有的函数都是可加的，只是是否好放在这个框架中，以及最终的效果如何）。然后进行m次迭代，通过使得损失函数在梯度方向上减少，最终得到一个优秀的模型。值得一提的是，每次模型在梯度方向上的减少的部分，可以认为是一个“小”的或者“弱”的模型，最终我们会通过加权(也就是每次在梯度方向上下降的距离）的方式将这些“弱”的模型合并起来，形成一个更好的模型。\n\n------\n\n<br>\n","source":"_posts/2015-07-22  ensemble.md","raw":"---\nlayout: post\ndate: 2015-07-22 06:53\ntitle: \"机器学习-组合算法总结\"\ntags: \n\t- Machine Learning\ncomment: true\ncategories: ML\n---\n\n\n## __组合模型__\n\n\n下面简单的介绍下Bootstraping, Bagging, Boosting, AdaBoost, RandomForest 和Gradient boosting这些组合型算法.\n\n### __1.Bootstraping__\n\n**Bootstraping**: 名字来自成语“pull up by your own bootstraps”，意思就是依靠你自己的资源，称为自助法，它是一种有放回的抽样方法，它是非参数统计中一种重要的估计统计量方差进而进行区间估计的统计方法。其核心思想和基本步骤如下：  \n <!-- more -->\n>（1）采用重抽样技术从原始样本中抽取一定数量（自己给定）的样本，此过程允许重复抽样。    \n>（2）根据抽出的样本计算给定的统计量T。  \n>（3）重复上述N次（一般大于1000），得到N个统计量T。  \n>（4）计算上述N个统计量T的样本方差，得到统计量的方差。 \n\n\n应该说Bootstrap是现代统计学较为流行的一种统计方法，在小样本时效果很好。通过方差的估计可以构造置信区间等，其运用范围得到进一步延伸。\n\n---\n\n### **2.装袋bagging**\n\n装袋算法相当于多个专家投票表决，对于多次测试，每个样本返回的是多次预测结果较多的那个。\n\n装袋算法描述\n\n```\n模型生成\n\t令n为训练数据的实例数量\n\t对于t次循环中的每一次\n\t\t从训练数据中采样n个实例\n\t\t将学习应用于所采样本\n\t\t保存结果模型\n分类\n\t对于t个模型的每一个\n\t\t使用模型对实例进行预测\n\t返回被预测次数最多的一个\n```\n\nbagging：bootstrap aggregating的缩写。让该学习算法训练多轮，每轮的训练集由从初始的训练集中随机取出的n个训练样本组成，某个初始训练样本在某轮训练集中可以出现多次或根本不出现，训练之后可得到一个预测函数序列\n\n$$h_1，⋯ ⋯h_n$$ \n\n最终的预测函数H对分类问题采用**投票方式**，对回归问题采用**简单平均方法**对新示例进行判别。\n\n[训练R个分类器f_i，分类器之间其他相同就是参数不同。其中f_i是通过从训练集合中(N篇文档)随机取(取后放回)N次文档构成的训练集合训练得到的。对于新文档d，用这R个分类器去分类，得到的最多的那个类别作为d的最终类别。]\n\n使用scikit-learn测试bagging方法\n\n```\n>>> from sklearn.ensemble import BaggingClassifier\n>>> from sklearn.neighbors import KNeighborsClassifier\n>>> bagging = BaggingClassifier(KNeighborsClassifier(),\n...                             max_samples=0.5, max_features=0.5)\n```\n\n---\n\n### __3.提升Boosting与Adaboost__\n\n**提升算法描述**\n\n```\n模型生成\n\t赋予每个训练实例相同的权值\n\tt次循环中的每一次：\n\t\t将学习算法应用于加了权的数据集上并保存结果模型\n\t\t计算模型在加了权的数据上的误差e并保存这个误差\n\t\t结果e等于0或者大于等于0.5：\n\t\t\t终止模型\n\t\t对于数据集中的每个实例：\n\t\t\t如果模型将实例正确分类\n\t\t\t\t将实例的权值乘以e/(1-e)\n\t\t将所有的实例权重进行正常化\n分类\n\t赋予所有类权重为0\n\t对于t（或小于t）个模型中的每一个：\n\t\t给模型预测的类加权 -log(e/(1-e))\n\t返回权重最高的类\n```\n\n这个模型提供了一种巧妙的方法生成一系列互补型的专家。\n\n**boosting**: 其中主要的是**AdaBoost**（Adaptive boosting，自适应boosting）。初始化时对每一个训练例赋相等的权重1／N，然后用该学算法对训练集训练t轮，每次训练后，对训练失败的训练例赋以较大的权重，也就是让学习算法在后续的学习中集中对比较难的训练例进行学习，从而得到一个预测函数序列$h_1,⋯, h_m$ , 其中h_i也有一定的权重，预测效果好的预测函数权重较大，反之较小。最终的预测函数H对分类问题采用有权重的投票方式，对回归问题采用加权平均的方法对新示例进行判别。\n\n提升算法理想状态是这些模型对于其他模型来说是一个补充，每个模型是这个领域的一个专家，而其他模型在这部分却不能表现很好，就像执行官一样要寻觅那些技能和经验互补的顾问，而不是重复的。这与装袋算法有所区分。\n\nAdaboost算法描述\n\n```\n模型生成\n\t训练数据中的每个样本，并赋予一个权重，构成权重向量D，初始值为1/N\n\tt次循环中的每一次：\n\t\t在训练数据上训练弱分类器并计算分类器的错误率e\n\t\t如果e等于0或者大于等于用户指定的阈值：\n\t\t\t终止模型，break\n\t\t重新调整每个样本的权重，其中alpha=0.5*ln((1-e)/e)\n\t\t对权重向量D进行更新，正确分类的样本的权重降低而错误分类的样本权重值升高\n\t\t对于数据集中的每个样例：\n\t\t\t如果某个样本正确分类：\n\t\t\t\t权重改为D^(t+1)_i = D^(t)_i * e^(-a)/Sum(D)\n\t\t\t如果某个样本错误分类：\n\t\t\t\t权重改为D^(t+1)_i = D^(t)_i * e^(a)/Sum(D)\n分类\n\t赋予所有类权重为0\n\t对于t（或小于t）个模型（基分类器）中的每一个：\n\t\t给模型预测的类加权 -log(e/(1-e))\n\t返回权重最高的类\n```\n（类似Bagging方法，但是训练是串行进行的，第k个分类器训练时关注对前k-1分类器中错分的文档，即不是随机取，而是加大取这些文档的概率。)\n\n__bagging与boosting的区别__：\n\n二者的主要区别是**取样方式不同**。bagging采用**均匀取样**，而Boosting根据**错误率来取样**，因此boosting的分类精度要优于Bagging。bagging的训练集的选择是随机的，各轮训练集之间相互独立，而boostlng的各轮训练集的选择与前面各轮的学习结果有关；bagging的各个预测函数没有权重，而boosting是有权重的；bagging的各个预测函数可以并行生成，而boosting的各个预测函数只能顺序生成。对于象神经网络这样极为耗时的学习方法。bagging可通过并行训练节省大量时间开销。\n\nbagging和boosting都可以有效地提高分类的准确性。在大多数数据集中，boosting的准确性比bagging高。在有些数据集中，boosting会引起退化--- Overfit。  \n\nBoosting思想的一种改进型AdaBoost方法在邮件过滤、文本分类方面都有很好的性能。 \n\n**Gradient boosting（又叫Mart, Treenet)**：Boosting是一种思想，Gradient Boosting是一种实现Boosting的方法，它主要的思想是，每一次建立模型是在之前建立模型**损失函数的梯度下降方向**。**损失函数(loss function)描述的是模型的不靠谱程度，损失函数越大，则说明模型越容易出错。**如果我们的模型能够让损失函数持续的下降，则说明我们的模型在不停的改进，而最好的方式就是**让损失函数在其梯度（Gradient)的方向上下降**。  \n\n使用scikit-learn测试adaboost算法\n\n```\n>>> from sklearn.cross_validation import cross_val_score\n>>> from sklearn.datasets import load_iris\n>>> from sklearn.ensemble import AdaBoostClassifier\n>>> iris = load_iris()\n>>> clf = AdaBoostClassifier(n_estimators=100)\n>>> scores = cross_val_score(clf, iris.data, iris.target)\n>>> scores.mean()                             \n0.9...\n```\n\n\n\n---\n\n### __4.Random Forest__\n\n**Random Forest**： 随机森林，顾名思义，是用随机的方式建立一个森林，森林里面有很多的决策树组成，随机森林的每一棵决策树之间是没有关联的。在得到森林之后，当有一个新的输入样本进入的时候，就让森林中的每一棵决策树分别进行一下判断，看看这个样本应该属于哪一类（对于分类算法），然后看看哪一类被选择最多，就预测这个样本为那一类。 在建立每一棵决策树的过程中，有两点需要注意——**采样**与**完全分裂**。首先是两个随机采样的过程，random forest对输入的数据要进行行和列的采样。对于行采样，采用有放回的方式，也就是在采样得到的样本集合中，可能有重复的样本。假设输入样本为N个，那么采样的样本也为N个。这样使得在训练的时候，每一棵树的输入样本都不是全部的样本，使得相对不容易出现over-fitting。然后进行列采样，从M个feature中，选择m个(m << M)。之后就是对采样之后的数据使用完全分裂的方式建立出决策树，这样决策树的某一个叶子节点要么是无法继续分裂的，要么里面的所有样本的都是指向的同一个分类。**一般很多的决策树算法都一个重要的步骤——剪枝，但随机森林不这样做，由于之前的两个随机采样的过程保证了随机性，所以就算不剪枝，也不会出现over-fitting。** 按这种算法得到的随机森林中的每一棵都是很弱的，但是大家组合起来就很厉害了。可以这样比喻随机森林算法：每一棵决策树就是一个精通于某一个窄领域的专家（因为我们从M个feature中选择m让每一棵决策树进行学习），这样在随机森林中就有了很多个精通不同领域的专家，对一个新的问题（新的输入数据），可以用不同的角度去看待它，最终由各个专家，投票得到结果。  \n\n__Random forest与bagging的区别__：\n\n(1)Random forest是选与输入样本的数目相同多的次数（可能一个样本会被选取多次，同时也会造成一些样本不会被选取到），而bagging一般选取比输入样本的数目少的样本；  \n(2)bagging是用全部特征来得到分类器，而Random forest是需要从全部特征中选取其中的一部分来训练得到分类器； **一般Random forest效果比bagging效果好！**\n\n使用scikit-learn测试随机森林算法\n\n```\n>>> from sklearn.ensemble import RandomForestClassifier\n>>> X = [[0, 0], [1, 1]]\n>>> Y = [0, 1]\n>>> clf = RandomForestClassifier(n_estimators=10)\n>>> clf = clf.fit(X, Y)\n```\n\n\n### __5.Gradient boosting__\n\n梯度提升树或者梯度提升回归树(GBRT)是任意一个不同损失函数的泛化。GBRT是一个灵敏的并且高效程序，可以用在回归和分类中。梯度提升树模型在许多领域中都有使用，如web搜索排行榜和社会生态学中。它主要的思想是，每一次建立模型是在之前建立模型损失函数的梯度下降方向。这句话有一点拗口，损失函数(loss function)描述的是模型的不靠谱程度，损失函数越大，则说明模型越容易出错（其实这里有一个方差、偏差均衡的问题，但是这里就假设损失函数越大，模型越容易出错）。如果我们的模型能够让损失函数持续的下降，则说明我们的模型在不停的改进，而最好的方式就是让损失函数在其梯度（Gradient)的方向上下降。\n\n\nGRBT的优势：\n\n- 混合数据类型的自然处理\n- 预测力强\n- 健壮的输出空间\n\nBoosting主要是一种思想，表示“知错就改”。而Gradient Boosting是在这个思想下的一种函数（也可以说是模型）的优化的方法，首先将函数分解为可加的形式（其实所有的函数都是可加的，只是是否好放在这个框架中，以及最终的效果如何）。然后进行m次迭代，通过使得损失函数在梯度方向上减少，最终得到一个优秀的模型。值得一提的是，每次模型在梯度方向上的减少的部分，可以认为是一个“小”的或者“弱”的模型，最终我们会通过加权(也就是每次在梯度方向上下降的距离）的方式将这些“弱”的模型合并起来，形成一个更好的模型。\n\n------\n\n<br>\n","slug":"2015-07-22  ensemble","published":1,"updated":"2015-11-19T07:50:44.437Z","comments":1,"photos":[],"link":"","_id":"cih8q8rq60023r8uj8swrd1w1"},{"layout":"post","title":"机器学习scikit-learn入门教程（译）","date":"2015-07-21T13:31:00.000Z","comment":true,"_content":"\n原文链接：http://scikit-learn.github.io/dev/tutorial/basic/tutorial.html\n\n__章节内容__\n\n在这个章节中，我们主要介绍关于scikit-learn机器学习词库，并且将给出一个学习样例。\n\n## **机器学习：问题设置**\n\n通常，一个学习问题是通过一系列的n个样本数据来学习然后尝试预测未知数据的属性。如果每一个样本超过一个单一的数值，例如多维输入（也叫做多维数据），那么它就拥有了多个特征。\n<!-- more -->\n我们可以把学习问题划分为几个大的来别：\n\n* 监督学习: 在监督学习中，这些数据自带了我们想要预测的附加属性（[scikit-learn监督学习链接](http://scikit-learn.github.io/dev/supervised_learning.html#supervised-learning)），这个问题包括：\n\t* 分类：样本属于属于两类或者多类，我们想从已经被标记的数据中来预测未知数据的类别。一个分类问题的例子就是手写字识别。这个例子的目的是从有些的类别中识别出输入向量的类别。对于分类的另一种想法是作为监督学习的一种分离的表格(不是连续的)，在这个表格中，一个是被限制的类别数量，而且对于每个类别都有N个样例被提供；一个是尝试用正确的类别或者类来标记他们。\n\t* 回归：如果期望的输出是由一个或者更多的连续的变量组成，那么就叫做回归。回归问题的例子将通过一条鲑鱼的年龄和重量预测它的长度。\n* 无监督学习：在无监督学习里面，训练数据是由一组没有任何类别标签值的一系列输入向量组成。这种问题的目的是可能可以在这些数据里发现相似的样例组，这些相似的样例被称作聚类。或者在输入空间里决定数据分布，称之为密度估算；或者将数据从高维空间映射到二维或三维空间中，称之为数据可视化问题。（[无监督学习链接](http://scikit-learn.github.io/dev/unsupervised_learning.html#unsupervised-learning)）\n\n**训练集和测试集**\n\n机器学习是关于学习数据集的一些属性然后将它们应用到新的数据上。这就是为什么在机器学习中评价一个算法的通常惯例是把数据集切分为两个数据集，其中一个叫做训练集，用来学习数据的属性；另一个叫做测试集，在测试集上测试那些属性。\n\n\n## **加载样本数据集**\n\n\nscikit-learn带有一些标准的数据集，例如用于分类的[iris](http://en.wikipedia.org/wiki/Iris_flower_data_set)和[digit](http://archive.ics.uci.edu/ml/datasets/Pen-Based+Recognition+of+Handwritten+Digits)数据集和用于回归的[ boston house prices dataset ](http://archive.ics.uci.edu/ml/datasets/Housing).\n\n下面，我们打开Python编译器，然后载入__iris__和digits数据集。我们的符号'$'表示shell提示，'>>>'表示Python编译器提示\n\n```\n$ python\n>>> from sklearn import datasets\n>>> iris = datasets.load_iris()\n>>> digits = datasets.load_digits()\n```\n\n 数据集是一个类似字典的对象，包含所有的数据和一些和数据有关的元数据。数据存储在.data中，是个n_samples,n_features的数组。在监督问题的情况下，一个或多个类别变量存储在.target成员中。更多有关的不同数据集的细节可以在[dedicated section](http://scikit-learn.github.io/dev/datasets/index.html#datasets)查找。\n \n 例如，在digits数据集情况下，digits.data 提供了可用于分类数字样本。\n\n```\n>>> print(digits.data)  \n[[  0.   0.   5. ...,   0.   0.   0.]\n [  0.   0.   0. ...,  10.   0.   0.]\n [  0.   0.   0. ...,  16.   9.   0.]\n ...,\n [  0.   0.   1. ...,   6.   0.   0.]\n [  0.   0.   2. ...,  12.   0.   0.]\n [  0.   0.  10. ...,  12.   1.   0.]]\n```\n\n并且digits.target给出了digit数据集的真实结果，这些数字是和我们正在学习的每个数字图像相关的数字。\n\n```\n>>> digits.target\narray([0, 1, 2, ..., 8, 9, 8])\n```\n\n**数组的形状**\n\n数据总是一些2D数组，shape(n_samples,n_features),尽管原始数据也许有一个不同的形状，就这个digits而言，每一个原始样例是一个shape(8,8)的图像，并且能被访问使用:\n\n```\n>>> digits.images[0]\narray([[  0.,   0.,   5.,  13.,   9.,   1.,   0.,   0.],\n       [  0.,   0.,  13.,  15.,  10.,  15.,   5.,   0.],\n       [  0.,   3.,  15.,   2.,   0.,  11.,   8.,   0.],\n       [  0.,   4.,  12.,   0.,   0.,   8.,   8.,   0.],\n       [  0.,   5.,   8.,   0.,   0.,   9.,   8.,   0.],\n       [  0.,   4.,  11.,   0.,   1.,  12.,   7.,   0.],\n       [  0.,   2.,  14.,   5.,  10.,  12.,   0.,   0.],\n       [  0.,   0.,   6.,  13.,  10.,   0.,   0.,   0.]])\n```\n\n[simple example on this dataset ](http://scikit-learn.github.io/dev/auto_examples/classification/plot_digits_classification.html#example-classification-plot-digits-classification-py)这个数据集表明了在scikit-learn中怎样从原始问题开始着手制作数据。\n\n\n\n## **学习和预测**\n\n在digits数据集中，给定一幅手写数字的数字图像，任务是预测结果。我们给定的样本有10种类别（是数字0到9），基于此我们建立一个估计方法能够预测我们没有见过的样本属于哪一类。\n\n在scikit-learn中，用于分类的估计模型是一个实现了fit(x,y)方法和predict(T)方法的Python对象。\n    \n估计模型的例子是在实现了[support vector classification支持向量机](http://en.wikipedia.org/wiki/Support_vector_machine)的类 sklearn.svm.SVC。估计模型的构造函数带有模型参数，但是目前，我们将估计模型当做一个黑盒子。\n\n```\n>>> from sklearn import svm  \n>>> clf = svm.SVC(gamma=0.001, C=100.)\n```\n\n**选择模型参数**\n\t\n在这个例子中，我们这设定了gamma值。可以通过使用[网格搜索](http://scikit-learn.github.io/dev/modules/grid_search.html#grid-search)和[交叉验证](http://scikit-learn.github.io/dev/modules/cross_validation.html#cross-validation)自动的找出最好的参数值\n\n我们把我们的评估模型命名为clf，作为一个分类器，它现在必须拟合这个模型，也就是它必须从这个模型学习。我们通过将数据集传递给fit函数完成。作为训练集，除了最后一个样本，我们选择其余的所有样本。通过python语句[:-1]选择样本，这条语句将从digits.data中产生一个除了最后一个样本的新数组。\n\n```\nclf.fit(digits.data[:-1], digits.target[:-1])    \nSVC(C=100.0, cache_size=200, class_weight=None, coef0=0.0, degree=3,  \n  gamma=0.001, kernel='rbf', max_iter=-1, probability=False,  \n  random_state=None, shrinking=True, tol=0.001, verbose=False)  \n```\n\n现在，我们可以预测新值，尤其是我们可以问分类器在digits数据集中的用来训练分类器时没有使用的最后一个数据是数字几：\n\n相应的图像如下所示:\n\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150720185355481)\n</center>\n\n正如你看到的，这是一个具有挑战性的任务：图象的分辨率很低。你认同这个分类器吗？\n\n一个完整的分类问题实例可以通过下面的链接下载，用来作为你运行并且学习的例子 [Recognizing hand-written digits](http://scikit-learn.github.io/dev/auto_examples/classification/plot_digits_classification.html#example-classification-plot-digits-classification-py)\n\n## **模型持久化**\n\n可以通过使用python的built-in持久化模型在scikit中保存一个模型，命名[pickle](http://docs.python.org/library/pickle.html):\n\n```\n>>> from sklearn import svm\n>>> from sklearn import datasets\n>>> clf = svm.SVC()\n>>> iris = datasets.load_iris()\n>>> X, y = iris.data, iris.target\n>>> clf.fit(X, y)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> import pickle\n>>> s = pickle.dumps(clf)\n>>> clf2 = pickle.loads(s)\n>>> clf2.predict(X[0])\narray([0])\n>>> y[0]\n0\n```\n\n在scikit的特别情况下，使用joblib替换pickle(joblib.dump & joblib.load)会更有趣,它在大数据上是更有效的，但是仅仅只能存入的是字典而不是字符串。\n\n```\n>>> from sklearn.externals import joblib\n>>> joblib.dump(clf, 'filename.pkl') \n```\n\n然后你就可以读取上面的pickled模型使用了（通常是在其它的Python程序中）：\n\n```\n>>> clf = joblib.load('filename.pkl') \n```\n\n## **惯例**\n\nscikit-learn估计量有一些特定的规则是的分类器更具有预测性\n\n**Type casting 类型转换**\n\n除非特别指定，否则输入格式是float64\n\n```\n>>> import numpy as np\n>>> from sklearn import random_projection\n>>> rng = np.random.RandomState(0)\n>>> X = rng.rand(10, 2000)\n>>> X = np.array(X, dtype='float32')\n>>> X.dtype\ndtype('float32')\n>>> transformer = random_projection.GaussianRandomProjection()\n>>> X_new = transformer.fit_transform(X)\n>>> X_new.dtype\ndtype('float64')\n```\n\n在这个例子中，X是float32，通过fit_transform(X)把它转为float64\n\n回归的输出值是float64，分类的也是：\n\n```\n>>> from sklearn import datasets\n>>> from sklearn.svm import SVC\n>>> iris = datasets.load_iris()\n>>> clf = SVC()\n>>> clf.fit(iris.data, iris.target)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> list(clf.predict(iris.data[:3]))\n[0, 0, 0]\n>>> clf.fit(iris.data, iris.target_names[iris.target])  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> list(clf.predict(iris.data[:3]))  \n['setosa', 'setosa', 'setosa']\n```\n\n这里，第一次predict()返回的是一个整数数组，因为在拟合中用到了iris.target（一个整数数组），第二个predict返回的是一个字符串数组，因为用来拟合的是iris.target_names。\n\n\n## Supplementary\n\n推介一个好用的python IDE：\n> winPython下载地址：[WinPython_2.7](http://sourceforge.net/projects/winpython/files/WinPython_2.7/2.7.10.1/)\n\n---\n\n<br>\n\n\n","source":"_posts/2015-07-21-An-introduction-to-machine-learning-with-scikit-learn.md","raw":"---\nlayout: post\ntitle: \"机器学习scikit-learn入门教程（译）\"\ndate: 2015-07-21 21:31\ncomment: true\ntags: \n\t- Machine Learning\n\t- 译文\ncategories: 译文\n---\n\n原文链接：http://scikit-learn.github.io/dev/tutorial/basic/tutorial.html\n\n__章节内容__\n\n在这个章节中，我们主要介绍关于scikit-learn机器学习词库，并且将给出一个学习样例。\n\n## **机器学习：问题设置**\n\n通常，一个学习问题是通过一系列的n个样本数据来学习然后尝试预测未知数据的属性。如果每一个样本超过一个单一的数值，例如多维输入（也叫做多维数据），那么它就拥有了多个特征。\n<!-- more -->\n我们可以把学习问题划分为几个大的来别：\n\n* 监督学习: 在监督学习中，这些数据自带了我们想要预测的附加属性（[scikit-learn监督学习链接](http://scikit-learn.github.io/dev/supervised_learning.html#supervised-learning)），这个问题包括：\n\t* 分类：样本属于属于两类或者多类，我们想从已经被标记的数据中来预测未知数据的类别。一个分类问题的例子就是手写字识别。这个例子的目的是从有些的类别中识别出输入向量的类别。对于分类的另一种想法是作为监督学习的一种分离的表格(不是连续的)，在这个表格中，一个是被限制的类别数量，而且对于每个类别都有N个样例被提供；一个是尝试用正确的类别或者类来标记他们。\n\t* 回归：如果期望的输出是由一个或者更多的连续的变量组成，那么就叫做回归。回归问题的例子将通过一条鲑鱼的年龄和重量预测它的长度。\n* 无监督学习：在无监督学习里面，训练数据是由一组没有任何类别标签值的一系列输入向量组成。这种问题的目的是可能可以在这些数据里发现相似的样例组，这些相似的样例被称作聚类。或者在输入空间里决定数据分布，称之为密度估算；或者将数据从高维空间映射到二维或三维空间中，称之为数据可视化问题。（[无监督学习链接](http://scikit-learn.github.io/dev/unsupervised_learning.html#unsupervised-learning)）\n\n**训练集和测试集**\n\n机器学习是关于学习数据集的一些属性然后将它们应用到新的数据上。这就是为什么在机器学习中评价一个算法的通常惯例是把数据集切分为两个数据集，其中一个叫做训练集，用来学习数据的属性；另一个叫做测试集，在测试集上测试那些属性。\n\n\n## **加载样本数据集**\n\n\nscikit-learn带有一些标准的数据集，例如用于分类的[iris](http://en.wikipedia.org/wiki/Iris_flower_data_set)和[digit](http://archive.ics.uci.edu/ml/datasets/Pen-Based+Recognition+of+Handwritten+Digits)数据集和用于回归的[ boston house prices dataset ](http://archive.ics.uci.edu/ml/datasets/Housing).\n\n下面，我们打开Python编译器，然后载入__iris__和digits数据集。我们的符号'$'表示shell提示，'>>>'表示Python编译器提示\n\n```\n$ python\n>>> from sklearn import datasets\n>>> iris = datasets.load_iris()\n>>> digits = datasets.load_digits()\n```\n\n 数据集是一个类似字典的对象，包含所有的数据和一些和数据有关的元数据。数据存储在.data中，是个n_samples,n_features的数组。在监督问题的情况下，一个或多个类别变量存储在.target成员中。更多有关的不同数据集的细节可以在[dedicated section](http://scikit-learn.github.io/dev/datasets/index.html#datasets)查找。\n \n 例如，在digits数据集情况下，digits.data 提供了可用于分类数字样本。\n\n```\n>>> print(digits.data)  \n[[  0.   0.   5. ...,   0.   0.   0.]\n [  0.   0.   0. ...,  10.   0.   0.]\n [  0.   0.   0. ...,  16.   9.   0.]\n ...,\n [  0.   0.   1. ...,   6.   0.   0.]\n [  0.   0.   2. ...,  12.   0.   0.]\n [  0.   0.  10. ...,  12.   1.   0.]]\n```\n\n并且digits.target给出了digit数据集的真实结果，这些数字是和我们正在学习的每个数字图像相关的数字。\n\n```\n>>> digits.target\narray([0, 1, 2, ..., 8, 9, 8])\n```\n\n**数组的形状**\n\n数据总是一些2D数组，shape(n_samples,n_features),尽管原始数据也许有一个不同的形状，就这个digits而言，每一个原始样例是一个shape(8,8)的图像，并且能被访问使用:\n\n```\n>>> digits.images[0]\narray([[  0.,   0.,   5.,  13.,   9.,   1.,   0.,   0.],\n       [  0.,   0.,  13.,  15.,  10.,  15.,   5.,   0.],\n       [  0.,   3.,  15.,   2.,   0.,  11.,   8.,   0.],\n       [  0.,   4.,  12.,   0.,   0.,   8.,   8.,   0.],\n       [  0.,   5.,   8.,   0.,   0.,   9.,   8.,   0.],\n       [  0.,   4.,  11.,   0.,   1.,  12.,   7.,   0.],\n       [  0.,   2.,  14.,   5.,  10.,  12.,   0.,   0.],\n       [  0.,   0.,   6.,  13.,  10.,   0.,   0.,   0.]])\n```\n\n[simple example on this dataset ](http://scikit-learn.github.io/dev/auto_examples/classification/plot_digits_classification.html#example-classification-plot-digits-classification-py)这个数据集表明了在scikit-learn中怎样从原始问题开始着手制作数据。\n\n\n\n## **学习和预测**\n\n在digits数据集中，给定一幅手写数字的数字图像，任务是预测结果。我们给定的样本有10种类别（是数字0到9），基于此我们建立一个估计方法能够预测我们没有见过的样本属于哪一类。\n\n在scikit-learn中，用于分类的估计模型是一个实现了fit(x,y)方法和predict(T)方法的Python对象。\n    \n估计模型的例子是在实现了[support vector classification支持向量机](http://en.wikipedia.org/wiki/Support_vector_machine)的类 sklearn.svm.SVC。估计模型的构造函数带有模型参数，但是目前，我们将估计模型当做一个黑盒子。\n\n```\n>>> from sklearn import svm  \n>>> clf = svm.SVC(gamma=0.001, C=100.)\n```\n\n**选择模型参数**\n\t\n在这个例子中，我们这设定了gamma值。可以通过使用[网格搜索](http://scikit-learn.github.io/dev/modules/grid_search.html#grid-search)和[交叉验证](http://scikit-learn.github.io/dev/modules/cross_validation.html#cross-validation)自动的找出最好的参数值\n\n我们把我们的评估模型命名为clf，作为一个分类器，它现在必须拟合这个模型，也就是它必须从这个模型学习。我们通过将数据集传递给fit函数完成。作为训练集，除了最后一个样本，我们选择其余的所有样本。通过python语句[:-1]选择样本，这条语句将从digits.data中产生一个除了最后一个样本的新数组。\n\n```\nclf.fit(digits.data[:-1], digits.target[:-1])    \nSVC(C=100.0, cache_size=200, class_weight=None, coef0=0.0, degree=3,  \n  gamma=0.001, kernel='rbf', max_iter=-1, probability=False,  \n  random_state=None, shrinking=True, tol=0.001, verbose=False)  \n```\n\n现在，我们可以预测新值，尤其是我们可以问分类器在digits数据集中的用来训练分类器时没有使用的最后一个数据是数字几：\n\n相应的图像如下所示:\n\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150720185355481)\n</center>\n\n正如你看到的，这是一个具有挑战性的任务：图象的分辨率很低。你认同这个分类器吗？\n\n一个完整的分类问题实例可以通过下面的链接下载，用来作为你运行并且学习的例子 [Recognizing hand-written digits](http://scikit-learn.github.io/dev/auto_examples/classification/plot_digits_classification.html#example-classification-plot-digits-classification-py)\n\n## **模型持久化**\n\n可以通过使用python的built-in持久化模型在scikit中保存一个模型，命名[pickle](http://docs.python.org/library/pickle.html):\n\n```\n>>> from sklearn import svm\n>>> from sklearn import datasets\n>>> clf = svm.SVC()\n>>> iris = datasets.load_iris()\n>>> X, y = iris.data, iris.target\n>>> clf.fit(X, y)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> import pickle\n>>> s = pickle.dumps(clf)\n>>> clf2 = pickle.loads(s)\n>>> clf2.predict(X[0])\narray([0])\n>>> y[0]\n0\n```\n\n在scikit的特别情况下，使用joblib替换pickle(joblib.dump & joblib.load)会更有趣,它在大数据上是更有效的，但是仅仅只能存入的是字典而不是字符串。\n\n```\n>>> from sklearn.externals import joblib\n>>> joblib.dump(clf, 'filename.pkl') \n```\n\n然后你就可以读取上面的pickled模型使用了（通常是在其它的Python程序中）：\n\n```\n>>> clf = joblib.load('filename.pkl') \n```\n\n## **惯例**\n\nscikit-learn估计量有一些特定的规则是的分类器更具有预测性\n\n**Type casting 类型转换**\n\n除非特别指定，否则输入格式是float64\n\n```\n>>> import numpy as np\n>>> from sklearn import random_projection\n>>> rng = np.random.RandomState(0)\n>>> X = rng.rand(10, 2000)\n>>> X = np.array(X, dtype='float32')\n>>> X.dtype\ndtype('float32')\n>>> transformer = random_projection.GaussianRandomProjection()\n>>> X_new = transformer.fit_transform(X)\n>>> X_new.dtype\ndtype('float64')\n```\n\n在这个例子中，X是float32，通过fit_transform(X)把它转为float64\n\n回归的输出值是float64，分类的也是：\n\n```\n>>> from sklearn import datasets\n>>> from sklearn.svm import SVC\n>>> iris = datasets.load_iris()\n>>> clf = SVC()\n>>> clf.fit(iris.data, iris.target)  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> list(clf.predict(iris.data[:3]))\n[0, 0, 0]\n>>> clf.fit(iris.data, iris.target_names[iris.target])  \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n  max_iter=-1, probability=False, random_state=None, shrinking=True,\n  tol=0.001, verbose=False)\n>>> list(clf.predict(iris.data[:3]))  \n['setosa', 'setosa', 'setosa']\n```\n\n这里，第一次predict()返回的是一个整数数组，因为在拟合中用到了iris.target（一个整数数组），第二个predict返回的是一个字符串数组，因为用来拟合的是iris.target_names。\n\n\n## Supplementary\n\n推介一个好用的python IDE：\n> winPython下载地址：[WinPython_2.7](http://sourceforge.net/projects/winpython/files/WinPython_2.7/2.7.10.1/)\n\n---\n\n<br>\n\n\n","slug":"2015-07-21-An-introduction-to-machine-learning-with-scikit-learn","published":1,"updated":"2015-11-21T02:41:34.794Z","comments":1,"photos":[],"link":"","_id":"cih8q8rqb0026r8ujhhq6qcr4"},{"layout":"post","title":"Airbnb欺诈预测机器学习模型设计：准确率和召回率的故事（译）","date":"2015-07-18T04:30:00.000Z","comments":1,"_content":"\n<div style=\"text-align:right;padding-bottom:7px;\">译者：<a href=\"http://blog.csdn.net/dream_angel_z\">刘帝伟</a>   审校：刘翔宇 朱正贵   责编：周建丁</div>\n\n\nAirbnb网站基于允许任何人将闲置的房屋进行长期或短期出租构建商业模式，来自房客或房东的欺诈风险是必须解决的问题。Airbnb信任和安全小组通过构建机器学习模型进行欺诈预测，本文介绍了其设计思想。假想模型是预测某些虚拟人物是否为“反面人物”，基本步骤：构建模型预期，构建训练集和测试集，特征学习，模型性能评估。其中特征转换倾向于采用条件概率编码（CP-coding），评估度量是准确率（Precision）和召回率（Recall），通常偏向于高召回率。\n<!-- more -->\n**以下为全文内容：**\n\n在Airbnb网站上，我们专注于创造一个这样的地方：一个人可以属于任何地方。部分归属感来自于我们用户之间的信任，同时认识到他们的安全是我们最关心的。\n\n虽然我们绝大多数的社区是由友好和可靠的房东和房客组成，但仍然有一小部分用户，他们试图从我们的网站中（非法）获利。这些都是非常罕见的，尽管如此，信任和安全小组还是因此而产生。\n\n信任和安全小组主要是解决任何可能会发生在我们平台的欺诈行为。我们最主要目的是试图保护我们的用户和公司免于不同类型的风险。例如：退款风险——一个绝大多数电子商务企业都熟悉的风险问题。为了减少此类欺诈行为，信任和安全小组的数据科学家构建了不同种类的机器学习模型，用来帮助识别不同类型的风险。想要获得我们模型背后更多的体系结构信息，请参考以前的文章 [机器学习风险系统的设计](http://nerds.airbnb.com/architecting-machine-learning-system-risk/)。\n\n在这篇文章中，我对机器学习的模型建立给了一个简短的思维过程概述。当然，每个模型都有所不同，但希望它能够给读者在关于机器学习中我们如何使用数据来帮助保护我们的用户以及如何改善模型的不同处理方法上带来一个全新的认识。在这篇文章中，我们假设想要构建一个这样的模型：预测某些虚构的角色是否是反面人物。\n\n### 试图预测的是什么？\n\n在模型建立中最基本的问题就是明确你想要用这个模型来预测什么。我知道这个听起来似乎很愚蠢，但很多时候，通过这个问题可以引发出其它更深层的问题。\n\n即使是一个看似简单的角色分类模型，随着我们逐步深入地思考，也可以提出许多更深层的问题。例如，我们想要怎样来给这个模型评分：仅仅是给当前新介绍的角色还是给所有角色？如果是前者，我们想要评分的角色和人物介绍中的角色评分相差多远？如果是后者，我们又该多长时间给这些角色评分呢？\n\n第一个想法可能是根据人物介绍中给每个角色的评分来建立模型。然而，这种模型，我们可能不能随着时间的推移动态地追踪人物的评分。此外，我们可能会因为在介绍时的一些“好”的特征而忽略了潜在的反面人物。\n\n相反，我们还可以建立这样一个模型，只要他/她出现在情节里面就评分一次。这将让我们在每个时间段都会有人物评分并检测出任何异常情况。但是，考虑到在每个角色单独出现的情况下可能没有任何的角色类别发展，所以这可能也不是最实际的方法。\n\n深思熟虑之后，我们决定把模型设计成介于这两种想法之间的模型。例如，建立这样一种模型，在每次有意义的事情发生的时候对角色进行评分，比如结交新盟友，龙族领地占领等等。在这种方式下，我们仍然可以随着时间的变化来跟踪人物的评分，同时，对没有最新进展的角色也不会多加评分。\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a2b74a98e.jpg)\n\n### 如何模拟得分？\n\n因为我们的目的是分析每个时期的得分，所以我们的训练集要能反映出某段时间某个角色的类别行为，最后的训练数据集类似于下图：\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a2e11dabc_middle.jpg?_=23712)\n\n与每个角色相关的时间不一定是连续的，因为我们关心的是那些有着重要事件发展的时间。\n\n在这个实例当中，Jarden在3个不同的场合有着重要的角色发展并且在一段时间内持续扩充他的军队。相比之下，Dineas 在5个不同的场合有着重要的角色发展并且主管着4个龙族中心基地。\n\n### 采样\n\n在机器学习模型中，从观测数据中下采样是有必要的。采样过程本身很简单，一旦有了所需要的训练数据集，就可以在数据集上做一个基于行的采样。\n\n然而，由于这里描述的模型是处理每个角色多个时期的样本，基于行采样可能会导致这样一种情况，即在建立模型的数据和用来验证的数据之间，场景附加的人物角色被分离开。如下表所示：\n\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a304d75b7.jpg)\n\n显然这并不是理想的采样，因为我们没有得到每个角色的整体描述，并且这些缺失的观测数据可能对建立一个好的模型至关重要。\n\n出于这个原因，我们需要做基于角色的采样。这样做能确保在模型数据建立中包含所有场合附加的角色，或者什么都没有。\n\n\n\n\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a31c8bc17.jpg)\n\n\n此外，当我们将我们的数据集切分为训练集和测试集时，通常这样的逻辑也适用。\n\n### 特征设计\n\n特征设计是机器学习不可或缺的一部分，通常情况下，在特征种类的选择上，对数据的充分理解有助于形成一个更好的模型设计思路。特征设计的实例包括特征规范化和分类特征处理。\n\n特征规范化是标准化特征的一种方式，允许更合理的对比。如下表所示：\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a34d3dd90.jpg)\n\n\n从上表可知，每个人物都有10,000个士兵。然而，Serion掌权长达5年，而Dineas仅仅掌权2年。通过这些人物比较绝对的士兵数量可能并不是非常有效的。但是，通过人物掌权的年份来标准化他们可能会提供更好的见解，并且产生更有预测力的特征。\n\n在分类特征的特征设计上值得单独的写一篇博客文章，因为有很多方式可以去处理它们。特别是对于缺失值的插补，请看一看以前的博客文章—— [使用随机森林分类器处理缺失值](http://nerds.airbnb.com/overcoming-missing-values-in-a-rfc/)。\n\n转换分类特征最常见的方法就是矢量化（也称作one-hot encoding）。然而，在处理有许多不同级别的分类特征时，使用条件概率编码（CP-coding）则更为实用。\n\nCP-coding的基本思想就是在给定的分类级别上，计算出某个特征值发生的概率。这种方法使得我们能够将所有级别的分类特征转化为一个单一的数值型变量。\n\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a3b87ef92.jpg)\n\n\n\n然而，这种类型转换可能会因为没有充分描述的类别而造成噪音数据。在上面的例子中，我们只有一个来自House 为 “Tallight”的观测样本。结果相应的概率就是0或1。为了避免这种问题的发生并且降低噪声数据，通常情况下，可以通过考虑加权平均值，全局概率或者引入一个平滑的超系数来调整如何计算概率。\n\n那么，哪一种方法最好呢？这取决于分类特征的数量和级别。CP-coding是个不错的选择，因为他降低了特征的维数，但是这样会牺牲掉特征与特征之间的互信息，这种方法称之为矢量化保留。此外，我们可以整合这两种方法，即组合相似的类别特征，然后使用CP-coding处理整合的特征。\n\n\n### 模型性能评估\n\n当谈及到评估模型性能的时候，我们需要留意正面角色和反面角色的比例。在我们的例子模型中，数据最后的统计格式为[character*period]（下表左）。然而，模型评估应该以角色类别测量（下表右）。\n\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a3fb5a353.jpg)\n\n结果，在模型的构建数据和模型的评估数据之间的正面人物和反面人物的比例有着明显的差异。当评估模型准确率和召回率的时候分配合适的权重值是相当重要的。\n\n此外，因为我们可能会使用下采样以减少观测样本的数量，所以我们还需要调整模型占采样过程的准确率和召回率。\n\n### 评估准确率和召回率\n\n对于模型评估的两种主要的评估度量是准确率（Precision）和召回率（Recall）。在我们的例子当中，准确率是预测结果为反面角色中被正确预测为反面角色的比例。它在给定的阈值下衡量模型的准确度。另外，召回率是模型从原本为反面角色当中能够正确检测出为反面角色的比例。它在一个给定的阈值下以识别反面人物来衡量模型的综合指标。这两个变量很容易混淆，所以通过下表会更加的直观看出两者的不同。\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a428441f6.jpg)\n\n通常将最后的数据划分为四个不同的部分：\n\nTrue Positives（TP）：角色是反面人物，模型预测为反面人物； \nFalse Positives（FP）：角色是正面人物，模型预测为反面人物； \nTrue Negatives（TN）：角色是正面人物，模型预测为正面人物； \nFalse Negatives（FN）：角色是反面人物，模型预测为正面人物；\n准确率计算：在所有被预测为反面人物中，模型正确预测的比例，即TP /（TP + FP）。\n\n召回率计算：在所有原本就是反面人物中，模型正确预测的比例，即TP / (TP + FN）。\n\n通过观察可以看出，尽管准确率和召回率的分子是相同的，但分母不同。\n\n通常在选择高准确率和高召回率之间总有一种权衡。这要取决于构建模型的最终目的，对于某些情况而言，高准确率的选择可能会优于高召回率。然而，对于欺诈预测模型，通常要偏向于高召回率，即使会牺牲掉一些准确率。\n\n有许多的方式可以用来改善模型的准确度和召回率。其中包括添加更好的特征，优化决策树剪枝或者建立一个更大的森林等等。不过，鉴于讨论广泛，我打算将其单独地放在一篇文章当中。\n\n\n### 结束语\n\n希望这篇文章能让读者了解到什么是构建机器学习模型所需要的。遗憾的是，没有放之四海而皆准的解决方案来构建一种好的模型，充分了解数据的上下文是关键，因为通过它我们能够从中提取出更多更好的预测特征，从而建立出更优化的模型。\n\n最后，虽然将角色分为正面和反面是主观的，但类别标签的确是机器学习的一个非常重要的部分，而不好的类别标签通常会导致一个糟糕的模型。祝建模快乐!\n\n注：这个模型确保每个角色都是正面角色或者是反面角色，即如果他们生来就是反面角色，那么在他们的整个生命当中都是反面角色。如果我们假设角色可以跨越类别标签作为中立人物，那么模型的设计将会完全不同。\n\n英文原文： [Designing Machine Learning Models: A Tale of Precision and Recall](http://nerds.airbnb.com/designing-machine-learning-models/)（译者/刘帝伟 审校/刘翔宇、朱正贵 责编/周建丁）\n\n关于译者： [刘帝伟](http://my.csdn.net/Dream_angel_Z)，中南大学在读研究生，关注机器学习、数据挖掘及生物信息领域。 \n\n------\n\n本文为CSDN编译整理，未经允许不得转载，如需转载请联系market#csdn.net(#换成@)\n\n\n---","source":"_posts/2015-07-18-a precision and recall.md","raw":"---\nlayout: post\ntitle: \"Airbnb欺诈预测机器学习模型设计：准确率和召回率的故事（译）\"\ndate: 2015-07-18 12:30\ncomments: true\ncategories: 译文\ntags: \n\t- Machine Learning\n---\n\n<div style=\"text-align:right;padding-bottom:7px;\">译者：<a href=\"http://blog.csdn.net/dream_angel_z\">刘帝伟</a>   审校：刘翔宇 朱正贵   责编：周建丁</div>\n\n\nAirbnb网站基于允许任何人将闲置的房屋进行长期或短期出租构建商业模式，来自房客或房东的欺诈风险是必须解决的问题。Airbnb信任和安全小组通过构建机器学习模型进行欺诈预测，本文介绍了其设计思想。假想模型是预测某些虚拟人物是否为“反面人物”，基本步骤：构建模型预期，构建训练集和测试集，特征学习，模型性能评估。其中特征转换倾向于采用条件概率编码（CP-coding），评估度量是准确率（Precision）和召回率（Recall），通常偏向于高召回率。\n<!-- more -->\n**以下为全文内容：**\n\n在Airbnb网站上，我们专注于创造一个这样的地方：一个人可以属于任何地方。部分归属感来自于我们用户之间的信任，同时认识到他们的安全是我们最关心的。\n\n虽然我们绝大多数的社区是由友好和可靠的房东和房客组成，但仍然有一小部分用户，他们试图从我们的网站中（非法）获利。这些都是非常罕见的，尽管如此，信任和安全小组还是因此而产生。\n\n信任和安全小组主要是解决任何可能会发生在我们平台的欺诈行为。我们最主要目的是试图保护我们的用户和公司免于不同类型的风险。例如：退款风险——一个绝大多数电子商务企业都熟悉的风险问题。为了减少此类欺诈行为，信任和安全小组的数据科学家构建了不同种类的机器学习模型，用来帮助识别不同类型的风险。想要获得我们模型背后更多的体系结构信息，请参考以前的文章 [机器学习风险系统的设计](http://nerds.airbnb.com/architecting-machine-learning-system-risk/)。\n\n在这篇文章中，我对机器学习的模型建立给了一个简短的思维过程概述。当然，每个模型都有所不同，但希望它能够给读者在关于机器学习中我们如何使用数据来帮助保护我们的用户以及如何改善模型的不同处理方法上带来一个全新的认识。在这篇文章中，我们假设想要构建一个这样的模型：预测某些虚构的角色是否是反面人物。\n\n### 试图预测的是什么？\n\n在模型建立中最基本的问题就是明确你想要用这个模型来预测什么。我知道这个听起来似乎很愚蠢，但很多时候，通过这个问题可以引发出其它更深层的问题。\n\n即使是一个看似简单的角色分类模型，随着我们逐步深入地思考，也可以提出许多更深层的问题。例如，我们想要怎样来给这个模型评分：仅仅是给当前新介绍的角色还是给所有角色？如果是前者，我们想要评分的角色和人物介绍中的角色评分相差多远？如果是后者，我们又该多长时间给这些角色评分呢？\n\n第一个想法可能是根据人物介绍中给每个角色的评分来建立模型。然而，这种模型，我们可能不能随着时间的推移动态地追踪人物的评分。此外，我们可能会因为在介绍时的一些“好”的特征而忽略了潜在的反面人物。\n\n相反，我们还可以建立这样一个模型，只要他/她出现在情节里面就评分一次。这将让我们在每个时间段都会有人物评分并检测出任何异常情况。但是，考虑到在每个角色单独出现的情况下可能没有任何的角色类别发展，所以这可能也不是最实际的方法。\n\n深思熟虑之后，我们决定把模型设计成介于这两种想法之间的模型。例如，建立这样一种模型，在每次有意义的事情发生的时候对角色进行评分，比如结交新盟友，龙族领地占领等等。在这种方式下，我们仍然可以随着时间的变化来跟踪人物的评分，同时，对没有最新进展的角色也不会多加评分。\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a2b74a98e.jpg)\n\n### 如何模拟得分？\n\n因为我们的目的是分析每个时期的得分，所以我们的训练集要能反映出某段时间某个角色的类别行为，最后的训练数据集类似于下图：\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a2e11dabc_middle.jpg?_=23712)\n\n与每个角色相关的时间不一定是连续的，因为我们关心的是那些有着重要事件发展的时间。\n\n在这个实例当中，Jarden在3个不同的场合有着重要的角色发展并且在一段时间内持续扩充他的军队。相比之下，Dineas 在5个不同的场合有着重要的角色发展并且主管着4个龙族中心基地。\n\n### 采样\n\n在机器学习模型中，从观测数据中下采样是有必要的。采样过程本身很简单，一旦有了所需要的训练数据集，就可以在数据集上做一个基于行的采样。\n\n然而，由于这里描述的模型是处理每个角色多个时期的样本，基于行采样可能会导致这样一种情况，即在建立模型的数据和用来验证的数据之间，场景附加的人物角色被分离开。如下表所示：\n\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a304d75b7.jpg)\n\n显然这并不是理想的采样，因为我们没有得到每个角色的整体描述，并且这些缺失的观测数据可能对建立一个好的模型至关重要。\n\n出于这个原因，我们需要做基于角色的采样。这样做能确保在模型数据建立中包含所有场合附加的角色，或者什么都没有。\n\n\n\n\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a31c8bc17.jpg)\n\n\n此外，当我们将我们的数据集切分为训练集和测试集时，通常这样的逻辑也适用。\n\n### 特征设计\n\n特征设计是机器学习不可或缺的一部分，通常情况下，在特征种类的选择上，对数据的充分理解有助于形成一个更好的模型设计思路。特征设计的实例包括特征规范化和分类特征处理。\n\n特征规范化是标准化特征的一种方式，允许更合理的对比。如下表所示：\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a34d3dd90.jpg)\n\n\n从上表可知，每个人物都有10,000个士兵。然而，Serion掌权长达5年，而Dineas仅仅掌权2年。通过这些人物比较绝对的士兵数量可能并不是非常有效的。但是，通过人物掌权的年份来标准化他们可能会提供更好的见解，并且产生更有预测力的特征。\n\n在分类特征的特征设计上值得单独的写一篇博客文章，因为有很多方式可以去处理它们。特别是对于缺失值的插补，请看一看以前的博客文章—— [使用随机森林分类器处理缺失值](http://nerds.airbnb.com/overcoming-missing-values-in-a-rfc/)。\n\n转换分类特征最常见的方法就是矢量化（也称作one-hot encoding）。然而，在处理有许多不同级别的分类特征时，使用条件概率编码（CP-coding）则更为实用。\n\nCP-coding的基本思想就是在给定的分类级别上，计算出某个特征值发生的概率。这种方法使得我们能够将所有级别的分类特征转化为一个单一的数值型变量。\n\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a3b87ef92.jpg)\n\n\n\n然而，这种类型转换可能会因为没有充分描述的类别而造成噪音数据。在上面的例子中，我们只有一个来自House 为 “Tallight”的观测样本。结果相应的概率就是0或1。为了避免这种问题的发生并且降低噪声数据，通常情况下，可以通过考虑加权平均值，全局概率或者引入一个平滑的超系数来调整如何计算概率。\n\n那么，哪一种方法最好呢？这取决于分类特征的数量和级别。CP-coding是个不错的选择，因为他降低了特征的维数，但是这样会牺牲掉特征与特征之间的互信息，这种方法称之为矢量化保留。此外，我们可以整合这两种方法，即组合相似的类别特征，然后使用CP-coding处理整合的特征。\n\n\n### 模型性能评估\n\n当谈及到评估模型性能的时候，我们需要留意正面角色和反面角色的比例。在我们的例子模型中，数据最后的统计格式为[character*period]（下表左）。然而，模型评估应该以角色类别测量（下表右）。\n\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a3fb5a353.jpg)\n\n结果，在模型的构建数据和模型的评估数据之间的正面人物和反面人物的比例有着明显的差异。当评估模型准确率和召回率的时候分配合适的权重值是相当重要的。\n\n此外，因为我们可能会使用下采样以减少观测样本的数量，所以我们还需要调整模型占采样过程的准确率和召回率。\n\n### 评估准确率和召回率\n\n对于模型评估的两种主要的评估度量是准确率（Precision）和召回率（Recall）。在我们的例子当中，准确率是预测结果为反面角色中被正确预测为反面角色的比例。它在给定的阈值下衡量模型的准确度。另外，召回率是模型从原本为反面角色当中能够正确检测出为反面角色的比例。它在一个给定的阈值下以识别反面人物来衡量模型的综合指标。这两个变量很容易混淆，所以通过下表会更加的直观看出两者的不同。\n\n![](http://img.ptcms.csdn.net/article/201507/13/55a2a428441f6.jpg)\n\n通常将最后的数据划分为四个不同的部分：\n\nTrue Positives（TP）：角色是反面人物，模型预测为反面人物； \nFalse Positives（FP）：角色是正面人物，模型预测为反面人物； \nTrue Negatives（TN）：角色是正面人物，模型预测为正面人物； \nFalse Negatives（FN）：角色是反面人物，模型预测为正面人物；\n准确率计算：在所有被预测为反面人物中，模型正确预测的比例，即TP /（TP + FP）。\n\n召回率计算：在所有原本就是反面人物中，模型正确预测的比例，即TP / (TP + FN）。\n\n通过观察可以看出，尽管准确率和召回率的分子是相同的，但分母不同。\n\n通常在选择高准确率和高召回率之间总有一种权衡。这要取决于构建模型的最终目的，对于某些情况而言，高准确率的选择可能会优于高召回率。然而，对于欺诈预测模型，通常要偏向于高召回率，即使会牺牲掉一些准确率。\n\n有许多的方式可以用来改善模型的准确度和召回率。其中包括添加更好的特征，优化决策树剪枝或者建立一个更大的森林等等。不过，鉴于讨论广泛，我打算将其单独地放在一篇文章当中。\n\n\n### 结束语\n\n希望这篇文章能让读者了解到什么是构建机器学习模型所需要的。遗憾的是，没有放之四海而皆准的解决方案来构建一种好的模型，充分了解数据的上下文是关键，因为通过它我们能够从中提取出更多更好的预测特征，从而建立出更优化的模型。\n\n最后，虽然将角色分为正面和反面是主观的，但类别标签的确是机器学习的一个非常重要的部分，而不好的类别标签通常会导致一个糟糕的模型。祝建模快乐!\n\n注：这个模型确保每个角色都是正面角色或者是反面角色，即如果他们生来就是反面角色，那么在他们的整个生命当中都是反面角色。如果我们假设角色可以跨越类别标签作为中立人物，那么模型的设计将会完全不同。\n\n英文原文： [Designing Machine Learning Models: A Tale of Precision and Recall](http://nerds.airbnb.com/designing-machine-learning-models/)（译者/刘帝伟 审校/刘翔宇、朱正贵 责编/周建丁）\n\n关于译者： [刘帝伟](http://my.csdn.net/Dream_angel_Z)，中南大学在读研究生，关注机器学习、数据挖掘及生物信息领域。 \n\n------\n\n本文为CSDN编译整理，未经允许不得转载，如需转载请联系market#csdn.net(#换成@)\n\n\n---","slug":"2015-07-18-a precision and recall","published":1,"updated":"2015-11-19T07:50:44.436Z","photos":[],"link":"","_id":"cih8q8rql002cr8ujbozaqurg"},{"layout":"post","title":"一个简单的Python函数运行时间计时器","date":"2015-07-16T12:24:25.000Z","_content":"\n\n在实际开发中，往往想要计算一段代码运行多长时间，下面我将该功能写入到一个函数里面，只要在每个函数前面调用该函数即可，见下面代码：\n\n<!--more-->\n\n```python\n#--------------------------------\nimport time\nfrom functools import wraps  \ndef fun_timer(function):\n    @wraps(function)\n    def function_timer(*args, **kwargs):\n        t0 = time.time()\n        result = function(*args, **kwargs)\n        t1 = time.time()\n        os.system(\" echo Total time running %s: %s seconds\" % (function.func_name, str(t1-t0)) + \" >> timecount.log\")\n        return result\n    return function_timer\n#-----------------------------------\n```\n\n说明：<font color=\"green\">**一个记时器，只要在函数前面写上@fun_timer即可**</font>.\n\n\n---","source":"_posts/2015-07-16 Python timer.md","raw":"---\nlayout: post\ntitle: \"一个简单的Python函数运行时间计时器\"\ndate: 2015-07-16 20:24:25\ncategories: Python\ntag: \n\t- 函数计时器\n\t- Python\n---\n\n\n在实际开发中，往往想要计算一段代码运行多长时间，下面我将该功能写入到一个函数里面，只要在每个函数前面调用该函数即可，见下面代码：\n\n<!--more-->\n\n```python\n#--------------------------------\nimport time\nfrom functools import wraps  \ndef fun_timer(function):\n    @wraps(function)\n    def function_timer(*args, **kwargs):\n        t0 = time.time()\n        result = function(*args, **kwargs)\n        t1 = time.time()\n        os.system(\" echo Total time running %s: %s seconds\" % (function.func_name, str(t1-t0)) + \" >> timecount.log\")\n        return result\n    return function_timer\n#-----------------------------------\n```\n\n说明：<font color=\"green\">**一个记时器，只要在函数前面写上@fun_timer即可**</font>.\n\n\n---","slug":"2015-07-16 Python timer","published":1,"updated":"2015-11-19T07:50:44.435Z","comments":1,"photos":[],"link":"","_id":"cih8q8rqs002fr8ujhiln8scp"},{"layout":"post","title":"开发者成功使用机器学习的十大诀窍(译)","date":"2015-07-13T13:53:12.000Z","comments":1,"_content":"\n<div style=\"text-align:right;padding-bottom:7px;\">译者：<a href=\"http://blog.csdn.net/dream_angel_z\">刘帝伟</a>   审校：刘翔宇 朱正贵   责编：周建丁</div>\n\n在提供发现埋藏数据深层的模式的能力上，机器学习有着潜在的能力使得应用程序更加的强大并且更能响应用户的需求。精心调校好的算法能够从巨大的并且互不相同的数据源中提取价值，同时没有人类思考和分析的限制。对于开发者而言，机器学习为应用业务的关键分析提供了希望，从而实现从改善客户体验到提供产品推荐上升至超个性化内容服务的任何应用程序。\n<!-- more -->\n像Amazon和Micorosoft这样的云供应商提供云功能的机器学习解决方案，承诺为开发者提供一个简单的方法，使得机器学习的能力能够融入到他们的应用程序当中，这也算是最近的头条新闻了。承诺似乎很好，但开发者还需谨慎。\n\n对于开发人员而言，基于云的机器学习工具带来了使用机器学习创造和提供新的功能的可能性。然而，当我们使用不当时，这些工具会输出不好的结果，用户可能会因此而感到不安。测试过<a href=\"http://how-old.net/\">微软年龄检测机器学习工具</a>的人都会发现，伴随即插即用的易用性而来的是主要的精度问题——对于关键应用程序或者是重大决策，它应该不值得信赖。\n\n想要在应用程序中成功地融入机器学习的开发者，需要注意以下的一些关键要点：\n\n**1.算法使用的数据越多，它的精度会更加准确，所以如果可能要尽量避免抽样。**机器学习理论在预测误差上有着非常直观的描述。简而言之，在机器学习模型和最优预测（在理论上达到最佳可能的误差）之间的预测误差的差距可以被分解为三个部分：\n\n- 由于没有找到正确函数形式的模型的误差\n- 由于没有找到最佳参数的模型的误差\n- 由于没用使用足够数据的模型的误差\n- 如果训练集有限，它可能无法支撑解决这个问题所需的模型复杂性。统计学的基本规律告诉我们，如果我们可以的话，应该利用所有的数据而不是抽样。\n\n**2.对给定的问题选择效果最好的机器学习算法是决定成败的关键。**例如，梯度提升树（GBT）是一个非常受欢迎的监督学习算法，由于其精度而被业内开发人员广泛使用。然而，尽管其高度受欢迎，我们也不能盲目的把这种算法应用于任何问题上。相反，我们使用的算法应该是能够最佳地拟合数据特征同时能够保证精度的算法。\n\n为了证明这个观点，尝试做这样一个实验，在数据集 <a href=\"http://www.daviddlewis.com/resources/testcollections/rcv1/\">the popular text categorization dataset rcv1</a>上测试GBT算法和线性支持向量机（SVM）算法，并比较两者的精度。我们观察到在这个问题上，就错误率而言，线性SVM要优于GBT算法。这是因为在文本领域当中，数据通常是高维的。一个线性分类器能够在N-1维当中完美的分离出N个样本，所以，一个样本模型在这种数据上通常表现的更好。此外，模型越简单，通过利用有限的训练样本来避免过拟合的方式学习参数，并且提供一个精确的模型，产生的问题也会随之越少。\n\n另一方面，GBT是高度非线性的并且更加强大，但是在这种环境中却更难学习并且更容易发生过拟合，往往结果精度也较低。\n\n**3.为了得到一个更好的模型，必须选择最佳的的算法和相关的参数。**这对于非数据科学家而言可能不容易。现代的机器学习算法有许多的参数可以调整。例如，对于流行的GBT算法单独的就有十二个参数可以设置，其中包括如何控制树的大小，学习率，行或列的采样方法，损失函数，正则化选项等等。一个特有的项目需要在给定的数据集上为每一个参数找到其最优值并且达到最精准的精度，这确实不是一件容易的事。但是为了得到最佳的结果，数据科学家需要训练大量的模型，而直觉和经验会帮助他们根据交叉验证的得分，然后决定使用什么参数再次尝试。\n\n**4.机器学习模型会随着好的数据而变得更好，错误的数据收集和数据处理会降低你建立预测和归纳的机器学习模型的能力。**根据经验，建议仔细审查与主题相关的数据，从而深入了解数据和幕后数据的生成过程。通常这个过程可以识别与记录、特征、值或采样相关的数据质量问题。\n\n**5.理解数据特征并改进它们（通过创造新的特征或者去掉某个特征）对预测能力有着高度的影响。**机器学习的一个基本任务就是找到能够被机器学习算法充分利用的丰富特征空间来替代原始数据。例如，特征转换是一种流行的方法，可以通过在原始数据的基础上使用数学上的转换提取新的特征来实现。最后的特征空间（也就是最后用来描述数据的特征）要能更好的捕获数据的多复杂性（如非线性和多种特征之间的相互作用），这对于成功的学习过程至关重要。\n\n**6.在应用中，选择合适的灵感来自商业价值的目标函数/损失函数对于最后的成功至关重要。**几乎所有的机器学习算法最后都被当成是一种优化问题。根据业务的性质，合理设置或调整优化的目标函数，是机器学习成功的关键。\n\n以支持向量机为例，通过假设所有错误类型的权重相等，对一个二分类问题的泛化误差进行了优化。这对损失敏感的问题并不合适，如故障检测，其中某些类型的错误比重可能比其它类型的要高。在这种情况下，建议通过在特定的错误类型上，增加更多的惩罚来解释它们的权重，从而调整SVM的损失函数。\n\n**7.确保正确地处理训练数据和测试数据，如此当在生产中部署该模型时，测试数据能够模拟输入数据。**例如，我们可以看到，这对于时间依赖性数据是多么的重要。在这种情况下，使用标准的交叉验证方法进行训练，调整，那么测试模型的结果可能会有偏差，甚至会不准确。这是因为在实施平台上它不能准确的模拟输入数据的性质。为了纠正这一点，在部署时我们必须仿照模型来部署使用。我们应该使用一个基于时间的交叉验证，用时间较新的数据来验证训练模型。\n\n**8.部署前理解模型的泛化误差。泛化误差衡量模型在未知数据上的性能好坏。**因为一个模型在训练数据上的性能好并不意味着它在未知的数据上的表现也好。一个精心设计的模拟实际部署使用的模型评估过程，是估计模型泛化误差所需要的。\n\n一不留心就很容易违反交叉验证的规则，并且也没有一种显而易见的方法来表现交叉验证的非正确性，通常在你试图寻找快捷方式计算时发生。在任何模型部署之前，有必要仔细注意交叉验证的正确性，以获得部署性能的科学评估。\n\n**9.知道如何处理非结构化和半结构化数据，如文本、时间序列、空间、图形或者图像数据。**大多数机器学习算法在处理特征空间中的数据时，一个特征集代表一个对象，特征集的每一个元素都描述对象的一个特点。在实际当中，数据引进时并不是这种格式化的形式，往往来自于最原始的格式，并且最后都必须被改造成机器学习算法能够识别的理想格式。比如，我们必须知道如何使用各种计算机视觉技术从图像中提取特征或者如何将自然语言处理技术应用于影片文本。\n\n**10.学会将商业问题转换成机器学习算法。**一些重要的商业问题，比如欺诈检测、产品推荐、广告精准投放，都有“标准”的机器学习表达形式并且在实践当中取得了合理的成就。即使对于这些众所周知的问题，也还有鲜为人知但功能更强大的表达形式，从而带来更高的预测精度。对于一般在博客和论坛中讨论的小实例的商业问题，适当的机器学习方法则不太明显。\n\n如果你是一个开发者，学习这十个通往成功的诀窍可能似乎是一个艰难的任务，但是不要气馁。事实上，开发者不是数据科学家。认为开发人员可以充分利用所有的机学习工具是不公平的。但是这并不意味着开发人员没有机会去学习一些有水准的数据科学从而改进他们的应用。随着适当的企业解决方案和自动化程度的提高，开发人员可以做模型构建到实施部署的一切事情，使用机器学习最佳实践来保持高精度。\n\n自动化是在应用程序中扩展机器学习的关键。即使你能够供得起一批小的数据科学家团队和开发者携手合作，也没有足够的人才。像Skytree的AutoModel（自动化模型）能够帮助开发者自动地确定最佳的参数并且使得算法得到最大的模型精度。一个易于使用的接口可以引导开发人员通过训练加工，调整并且测试模型来防止统计上的错误。\n\n自动化机器学习过程，有许多方式，包括数据科学家或开发者的人工智能原理，允许算法去思考，学习并且承受更多的建模重任。也就是说，认为数据科学家能够从机器学习中解耦是错误的，特别是在关键任务模型上。谨防这种能够简单使用机器学习功能的承诺，即能够在不需要正确复杂的思考下或者可扩展的应用技术下就使用机器学习——这通常并不会得到高预测精度和机器学习提供的高商业价值结果。更糟糕的是，在应用程序中使用不好的模型实际上可能会适得其反，并迅速在其用户之间建立不信任的产品或服务。\n\n英文原文： <a href=\"http://www.infoworld.com/article/2943862/application-development/what-developers-need-to-know-about-machine-learning.html\">10 keys to successful machine learning for developers</a> （译者/<a href=\"http://blog.csdn.net/dream_angel_z\">刘帝伟</a> 审校/刘翔宇、朱正贵 责编/周建丁）\n\n作者简介：Alexander Gray，Skytree首席技术官，佐治亚理工学院计算机学院副教授，主要致力于大规模数据集的机器学习算法技术研发，1993年开始在NASA喷气推进实验室机器学习系统小组从事大规模科学数据的工作。\n\n译者简介： <a href=\"http://blog.csdn.net/dream_angel_z\">刘帝伟</a>，中南大学软件学院在读研究生，关注机器学习、数据挖掘及生物信息领域。\n\n【预告】<a href=\"http://ccai2015.csdn.net/\">首届中国人工智能大会（CCAI 2015）</a>将于7月26-27日在北京友谊宾馆召开。机器学习与模式识别、大数据的机遇与挑战、人工智能与认知科学、智能机器人四个主题专家云集。人工智能产品库将同步上线，预约咨询：QQ：1192936057。欢迎关注。\n\n本文为CSDN编译整理，未经允许不得转载，如需转载请联系market#csdn.net(#换成@)\n\n---","source":"_posts/2015-07-13-10 keys to successful machine learning for developers.md","raw":"---\nlayout: post\ntitle: \"开发者成功使用机器学习的十大诀窍(译)\"\ndate: 2015-07-13 21:53:12\ncomments: true\nexcerpt: bagging:对于开发人员而言，基于云的机器学习工具带来了使用机器学习创造和提供新的功能的可能性。然而，开发者想要在它们的应用程序中融入机器学习，通常会犯一些错误，本文列了十条注意点以飨读者。\ntags: \n\t- Machine Learning\n\t- CV\n\t- AI\n---\n\n<div style=\"text-align:right;padding-bottom:7px;\">译者：<a href=\"http://blog.csdn.net/dream_angel_z\">刘帝伟</a>   审校：刘翔宇 朱正贵   责编：周建丁</div>\n\n在提供发现埋藏数据深层的模式的能力上，机器学习有着潜在的能力使得应用程序更加的强大并且更能响应用户的需求。精心调校好的算法能够从巨大的并且互不相同的数据源中提取价值，同时没有人类思考和分析的限制。对于开发者而言，机器学习为应用业务的关键分析提供了希望，从而实现从改善客户体验到提供产品推荐上升至超个性化内容服务的任何应用程序。\n<!-- more -->\n像Amazon和Micorosoft这样的云供应商提供云功能的机器学习解决方案，承诺为开发者提供一个简单的方法，使得机器学习的能力能够融入到他们的应用程序当中，这也算是最近的头条新闻了。承诺似乎很好，但开发者还需谨慎。\n\n对于开发人员而言，基于云的机器学习工具带来了使用机器学习创造和提供新的功能的可能性。然而，当我们使用不当时，这些工具会输出不好的结果，用户可能会因此而感到不安。测试过<a href=\"http://how-old.net/\">微软年龄检测机器学习工具</a>的人都会发现，伴随即插即用的易用性而来的是主要的精度问题——对于关键应用程序或者是重大决策，它应该不值得信赖。\n\n想要在应用程序中成功地融入机器学习的开发者，需要注意以下的一些关键要点：\n\n**1.算法使用的数据越多，它的精度会更加准确，所以如果可能要尽量避免抽样。**机器学习理论在预测误差上有着非常直观的描述。简而言之，在机器学习模型和最优预测（在理论上达到最佳可能的误差）之间的预测误差的差距可以被分解为三个部分：\n\n- 由于没有找到正确函数形式的模型的误差\n- 由于没有找到最佳参数的模型的误差\n- 由于没用使用足够数据的模型的误差\n- 如果训练集有限，它可能无法支撑解决这个问题所需的模型复杂性。统计学的基本规律告诉我们，如果我们可以的话，应该利用所有的数据而不是抽样。\n\n**2.对给定的问题选择效果最好的机器学习算法是决定成败的关键。**例如，梯度提升树（GBT）是一个非常受欢迎的监督学习算法，由于其精度而被业内开发人员广泛使用。然而，尽管其高度受欢迎，我们也不能盲目的把这种算法应用于任何问题上。相反，我们使用的算法应该是能够最佳地拟合数据特征同时能够保证精度的算法。\n\n为了证明这个观点，尝试做这样一个实验，在数据集 <a href=\"http://www.daviddlewis.com/resources/testcollections/rcv1/\">the popular text categorization dataset rcv1</a>上测试GBT算法和线性支持向量机（SVM）算法，并比较两者的精度。我们观察到在这个问题上，就错误率而言，线性SVM要优于GBT算法。这是因为在文本领域当中，数据通常是高维的。一个线性分类器能够在N-1维当中完美的分离出N个样本，所以，一个样本模型在这种数据上通常表现的更好。此外，模型越简单，通过利用有限的训练样本来避免过拟合的方式学习参数，并且提供一个精确的模型，产生的问题也会随之越少。\n\n另一方面，GBT是高度非线性的并且更加强大，但是在这种环境中却更难学习并且更容易发生过拟合，往往结果精度也较低。\n\n**3.为了得到一个更好的模型，必须选择最佳的的算法和相关的参数。**这对于非数据科学家而言可能不容易。现代的机器学习算法有许多的参数可以调整。例如，对于流行的GBT算法单独的就有十二个参数可以设置，其中包括如何控制树的大小，学习率，行或列的采样方法，损失函数，正则化选项等等。一个特有的项目需要在给定的数据集上为每一个参数找到其最优值并且达到最精准的精度，这确实不是一件容易的事。但是为了得到最佳的结果，数据科学家需要训练大量的模型，而直觉和经验会帮助他们根据交叉验证的得分，然后决定使用什么参数再次尝试。\n\n**4.机器学习模型会随着好的数据而变得更好，错误的数据收集和数据处理会降低你建立预测和归纳的机器学习模型的能力。**根据经验，建议仔细审查与主题相关的数据，从而深入了解数据和幕后数据的生成过程。通常这个过程可以识别与记录、特征、值或采样相关的数据质量问题。\n\n**5.理解数据特征并改进它们（通过创造新的特征或者去掉某个特征）对预测能力有着高度的影响。**机器学习的一个基本任务就是找到能够被机器学习算法充分利用的丰富特征空间来替代原始数据。例如，特征转换是一种流行的方法，可以通过在原始数据的基础上使用数学上的转换提取新的特征来实现。最后的特征空间（也就是最后用来描述数据的特征）要能更好的捕获数据的多复杂性（如非线性和多种特征之间的相互作用），这对于成功的学习过程至关重要。\n\n**6.在应用中，选择合适的灵感来自商业价值的目标函数/损失函数对于最后的成功至关重要。**几乎所有的机器学习算法最后都被当成是一种优化问题。根据业务的性质，合理设置或调整优化的目标函数，是机器学习成功的关键。\n\n以支持向量机为例，通过假设所有错误类型的权重相等，对一个二分类问题的泛化误差进行了优化。这对损失敏感的问题并不合适，如故障检测，其中某些类型的错误比重可能比其它类型的要高。在这种情况下，建议通过在特定的错误类型上，增加更多的惩罚来解释它们的权重，从而调整SVM的损失函数。\n\n**7.确保正确地处理训练数据和测试数据，如此当在生产中部署该模型时，测试数据能够模拟输入数据。**例如，我们可以看到，这对于时间依赖性数据是多么的重要。在这种情况下，使用标准的交叉验证方法进行训练，调整，那么测试模型的结果可能会有偏差，甚至会不准确。这是因为在实施平台上它不能准确的模拟输入数据的性质。为了纠正这一点，在部署时我们必须仿照模型来部署使用。我们应该使用一个基于时间的交叉验证，用时间较新的数据来验证训练模型。\n\n**8.部署前理解模型的泛化误差。泛化误差衡量模型在未知数据上的性能好坏。**因为一个模型在训练数据上的性能好并不意味着它在未知的数据上的表现也好。一个精心设计的模拟实际部署使用的模型评估过程，是估计模型泛化误差所需要的。\n\n一不留心就很容易违反交叉验证的规则，并且也没有一种显而易见的方法来表现交叉验证的非正确性，通常在你试图寻找快捷方式计算时发生。在任何模型部署之前，有必要仔细注意交叉验证的正确性，以获得部署性能的科学评估。\n\n**9.知道如何处理非结构化和半结构化数据，如文本、时间序列、空间、图形或者图像数据。**大多数机器学习算法在处理特征空间中的数据时，一个特征集代表一个对象，特征集的每一个元素都描述对象的一个特点。在实际当中，数据引进时并不是这种格式化的形式，往往来自于最原始的格式，并且最后都必须被改造成机器学习算法能够识别的理想格式。比如，我们必须知道如何使用各种计算机视觉技术从图像中提取特征或者如何将自然语言处理技术应用于影片文本。\n\n**10.学会将商业问题转换成机器学习算法。**一些重要的商业问题，比如欺诈检测、产品推荐、广告精准投放，都有“标准”的机器学习表达形式并且在实践当中取得了合理的成就。即使对于这些众所周知的问题，也还有鲜为人知但功能更强大的表达形式，从而带来更高的预测精度。对于一般在博客和论坛中讨论的小实例的商业问题，适当的机器学习方法则不太明显。\n\n如果你是一个开发者，学习这十个通往成功的诀窍可能似乎是一个艰难的任务，但是不要气馁。事实上，开发者不是数据科学家。认为开发人员可以充分利用所有的机学习工具是不公平的。但是这并不意味着开发人员没有机会去学习一些有水准的数据科学从而改进他们的应用。随着适当的企业解决方案和自动化程度的提高，开发人员可以做模型构建到实施部署的一切事情，使用机器学习最佳实践来保持高精度。\n\n自动化是在应用程序中扩展机器学习的关键。即使你能够供得起一批小的数据科学家团队和开发者携手合作，也没有足够的人才。像Skytree的AutoModel（自动化模型）能够帮助开发者自动地确定最佳的参数并且使得算法得到最大的模型精度。一个易于使用的接口可以引导开发人员通过训练加工，调整并且测试模型来防止统计上的错误。\n\n自动化机器学习过程，有许多方式，包括数据科学家或开发者的人工智能原理，允许算法去思考，学习并且承受更多的建模重任。也就是说，认为数据科学家能够从机器学习中解耦是错误的，特别是在关键任务模型上。谨防这种能够简单使用机器学习功能的承诺，即能够在不需要正确复杂的思考下或者可扩展的应用技术下就使用机器学习——这通常并不会得到高预测精度和机器学习提供的高商业价值结果。更糟糕的是，在应用程序中使用不好的模型实际上可能会适得其反，并迅速在其用户之间建立不信任的产品或服务。\n\n英文原文： <a href=\"http://www.infoworld.com/article/2943862/application-development/what-developers-need-to-know-about-machine-learning.html\">10 keys to successful machine learning for developers</a> （译者/<a href=\"http://blog.csdn.net/dream_angel_z\">刘帝伟</a> 审校/刘翔宇、朱正贵 责编/周建丁）\n\n作者简介：Alexander Gray，Skytree首席技术官，佐治亚理工学院计算机学院副教授，主要致力于大规模数据集的机器学习算法技术研发，1993年开始在NASA喷气推进实验室机器学习系统小组从事大规模科学数据的工作。\n\n译者简介： <a href=\"http://blog.csdn.net/dream_angel_z\">刘帝伟</a>，中南大学软件学院在读研究生，关注机器学习、数据挖掘及生物信息领域。\n\n【预告】<a href=\"http://ccai2015.csdn.net/\">首届中国人工智能大会（CCAI 2015）</a>将于7月26-27日在北京友谊宾馆召开。机器学习与模式识别、大数据的机遇与挑战、人工智能与认知科学、智能机器人四个主题专家云集。人工智能产品库将同步上线，预约咨询：QQ：1192936057。欢迎关注。\n\n本文为CSDN编译整理，未经允许不得转载，如需转载请联系market#csdn.net(#换成@)\n\n---","slug":"2015-07-13-10 keys to successful machine learning for developers","published":1,"updated":"2015-11-19T07:50:44.435Z","photos":[],"link":"","_id":"cih8q8rqz002kr8ujwgvuuh6e"},{"layout":"post","title":"机器学习算法-Adaboost","date":"2015-07-05T14:53:12.000Z","comments":1,"_content":"\n## **本章内容**\n\n- 组合相似的分类器来提高分类性能\n- 应用AdaBoost算法\n- 处理非均衡分类问题\n\n\n## **主题：**\n\n**利用AdaBoost元算法提高分类性能**\n\n<!-- more -->\n### 1.基于数据集多重抽样的分类器\n\n| Feature |AdaBoost  |\n| -- | -- |\n| 优点 |  泛化错误率低，易编码，可以应用在大部分分类器上，无需参数调整 |\n| 缺点 |  对离群点敏感 |\n| 数据 | 数值型和标称型数据 |\n\n<br>\n\nbagging:基于数据随机重抽样的分类器构建方法\n\n自举汇聚法(bootstrap aggregating),也称为bagging方法，是从原始数据集选择S次后得到S个新数据集的一种技术。新数据集和原始数据集的大小相等。每个数据集都是通过在原始数据集中随机选择一个本来进行替换而得到的。\n\n在S个数据集建好之后，将某个学习算法分别作用域每个数据集得到了S个分类器。当我们对新数据进行分类时，就可以应用S个分类器进行分类。与此同时，选择分类器投票结果最多的类别作为最后的分类结果。\n\n有一些比较先进的bagging方法，如**随机森林**（RF）。\n\nboosting是一种与bagging很类似的技术。不论是boosting还是bagging当中，当使用的多个分类器的类型都是一致的。但是在前者当中，不同的分类器是通过串行训练而获得的，每个新分类器都根据已训练出的分类器的性能来进行训练。boosting是通过训练集中关注被已有分类器错分的那些数据来获得新的分类器。\n\nboosting方法有多个版本，当前最流行便属于**AdaBoost**。\n\n**AdaBoost的一般流程**\n\n（1）收集数据：可以使用任何方法；<br>\n（2）准备数据：依赖于所使用的若分类器类型；<br>\n（3）分析数据：可以使用任意方法<br>\n（4）训练算法：AdaBoost的大部分时间都用在训练上，分类器将多次在同一数据集上训练若分类器；<br>\n（5）测试算法：计算分类的错误率；<br>\n（6）使用算法：同SVM一样，AdaBoost预测的两个类别中的一个，如果想要把它应用到多个类的场合，那么就像多类SVM中的做法一样对AdaBoost进行修改。\n\n\n### 2.训练算法：基于错误提升分类器的性能\n\nAdaBoost是adaptive boosting（自适应boosting）的缩写，其运行过程：训练集中的每个样本，赋予其一个权重，这些权重构成向量D。一开始，这些权重都初试化成相等值。首先在训练数据上训练处一个若分类器并计算该分类器的错误率，然后在同一数据集上再次训练若分类器。在分类器的第二次训练当中，将会重新调整每个样本的权重，其中第一次分队的样本的权重值将会降低，而第一次分错的样本的权重将会提高。为了从所有分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重值alpha，这些alpha值是基于每个分类器的错误率进行计算的。其中错误率定义为\n\n$$\\epsilon=\\dfrac{为正确分类的样本数目}{所有样本数目}$$\n\nalpha计算公式\n\n$$\\alpha=\\dfrac{1}{2}ln(\\dfrac{1-\\epsilon}{\\epsilon})$$\n\n计算出alpha值之后，可以对权重向量D进行更新，使得正确分类的样本的权重值降低而分错的样本权重值升高，D的计算方法如下\n如果某个样本被正确分类，更新该样本权重值为：\n\n$$D^{(t+1)}_i=\\dfrac{D_i^{(t)} e^{-\\alpha}}{Sum(D)}$$\n\n如果某个样本被错误分类，更新该样本的权重值为：\n\n$$D^{(t+1)}_i=\\dfrac{D_i^{(t)} e^{\\alpha}}{Sum(D)}$$\n\n计算出D后，AdaBoost接着开始下一轮的迭代。AdaBoost算法会不断地重复训练和调整权重的过程，知道训练错误率为0或者若分类器的数目达到用户指定值为止。\n\n在建立完整的AdaBoost算法之前，需要通过一些代码建立若分类器及保存数据集的权重。\n\n\n### 3.基于单层决策树构建若分类器\n\n\n单层决策树是一种简单的决策树。首先构建一个简单的数据集,建立一个adaboost.py文件并加入下列代码：\n\n```python\ndef loadSimpData():\n    datMat = matrix([[ 1. ,  2.1],\n        [ 2. ,  1.1],\n        [ 1.3,  1. ],\n        [ 1. ,  1. ],\n        [ 2. ,  1. ]])\n    classLabels = [1.0, 1.0, -1.0, -1.0, 1.0]\n    return datMat,classLabels\n```\n导入数据\n\n```\n>>> import adaboost\n>>> datMat,classLabels=adaboost.loadSimpData()\n```\n\n下面两个函数，一个用于测试是否某个值小于或者大于我们正在测试的阈值，一个会在一个加权数据集中循环，并找到具有最低错误率的单层决策树。\n\n伪代码如下：<br>\n\n\t将最小错误率minError设为无穷大\n\t对数据及中的每一个特征（第一层循环）：\n\t\t对每个步长（第二层循环）：\n\t\t\t对每个不等号（第三层循环）：\n\t\t\t\t建立一颗单层决策树并利用加权数据集对它进行测试\n\t\t\t\t如果错误率低于minError，则将当前单层决策树设置为最佳单层决策树\n\t返回最佳单层决策树\n\n\n单层决策树生成函数代码：\n\n```python\ndef stumpClassify(dataMatrix,dimen,threshVal,threshIneq):#just classify the data\n    retArray = ones((shape(dataMatrix)[0],1))\n    if threshIneq == 'lt':\n        retArray[dataMatrix[:,dimen] <= threshVal] = -1.0\n    else:\n        retArray[dataMatrix[:,dimen] > threshVal] = -1.0\n    return retArray\n    \n\ndef buildStump(dataArr,classLabels,D):\n    dataMatrix = mat(dataArr); labelMat = mat(classLabels).T\n    m,n = shape(dataMatrix)\n    numSteps = 10.0; bestStump = {}; bestClasEst = mat(zeros((m,1)))\n    minError = inf #init error sum, to +infinity\n    for i in range(n):#loop over all dimensions\n        rangeMin = dataMatrix[:,i].min(); rangeMax = dataMatrix[:,i].max();\n        stepSize = (rangeMax-rangeMin)/numSteps\n        for j in range(-1,int(numSteps)+1):#loop over all range in current dimension\n            for inequal in ['lt', 'gt']: #go over less than and greater than\n                threshVal = (rangeMin + float(j) * stepSize)\n                predictedVals = stumpClassify(dataMatrix,i,threshVal,inequal)#call stump classify with i, j, lessThan\n                errArr = mat(ones((m,1)))\n                errArr[predictedVals == labelMat] = 0\n                weightedError = D.T*errArr  #calc total error multiplied by D\n                #print \"split: dim %d, thresh %.2f, thresh ineqal: %s, the weighted error is %.3f\" % (i, threshVal, inequal, weightedError)\n                if weightedError < minError:\n                    minError = weightedError\n                    bestClasEst = predictedVals.copy()\n                    bestStump['dim'] = i\n                    bestStump['thresh'] = threshVal\n                    bestStump['ineq'] = inequal\n    return bestStump,minError,bestClasEst\n\n```\n\n\n### 4.AdaBoost算法的实现\n\n整个实现的伪代码如下：\n\n\t对每次迭代：\n\t\t利用buildStump()函数找到最佳的单层决策树\n\t\t将最佳单层决策树加入到单层决策树数据中\n\t\t计算alpha\n\t\t计算心的权重向量D\n\t\t更新累计类别估计值\n\t\t如果错误率低于0.0 则退出循环\n\n基于单层决策树的AdaBoost训练过程\n\n```python\ndef adaBoostTrainDS(dataArr,classLabels,numIt=40):\n    weakClassArr = []\n    m = shape(dataArr)[0]\n    D = mat(ones((m,1))/m)   #init D to all equal\n    aggClassEst = mat(zeros((m,1)))\n    for i in range(numIt):\n        bestStump,error,classEst = buildStump(dataArr,classLabels,D)#build Stump\n        #print \"D:\",D.T\n        alpha = float(0.5*log((1.0-error)/max(error,1e-16)))#calc alpha, throw in max(error,eps) to account for error=0\n        bestStump['alpha'] = alpha  \n        weakClassArr.append(bestStump)                  #store Stump Params in Array\n        #print \"classEst: \",classEst.T\n        expon = multiply(-1*alpha*mat(classLabels).T,classEst) #exponent for D calc, getting messy\n        D = multiply(D,exp(expon))                              #Calc New D for next iteration\n        D = D/D.sum()\n        #calc training error of all classifiers, if this is 0 quit for loop early (use break)\n        aggClassEst += alpha*classEst\n        #print \"aggClassEst: \",aggClassEst.T\n        aggErrors = multiply(sign(aggClassEst) != mat(classLabels).T,ones((m,1)))\n        errorRate = aggErrors.sum()/m\n        print \"total error: \",errorRate\n        if errorRate == 0.0: break\n    return weakClassArr,aggClassEst\n\n```\n\n### 5.测试算法\n\n\n拥有了多个若分类器以及其对应的alpha值，进行测试就方便了。\n\nAdaBoost分类函数:利用训练处的多个若分类器进行分类的函数。\n\n```python\ndef adaClassify(datToClass,classifierArr):\n    dataMatrix = mat(datToClass)#do stuff similar to last aggClassEst in adaBoostTrainDS\n    m = shape(dataMatrix)[0]\n    aggClassEst = mat(zeros((m,1)))\n    for i in range(len(classifierArr)):\n        classEst = stumpClassify(dataMatrix,classifierArr[i]['dim'],\\\n                                 classifierArr[i]['thresh'],\\\n                                 classifierArr[i]['ineq'])#call stump classify\n        aggClassEst += classifierArr[i]['alpha']*classEst\n        print aggClassEst\n    return sign(aggClassEst)\n```\n\n\n\n\n### 6.绘制ROC曲线\n\n\nROC曲线绘制代码：\n\n```python\ndef plotROC(predStrengths, classLabels):\n    import matplotlib.pyplot as plt\n    cur = (1.0,1.0) #cursor\n    ySum = 0.0 #variable to calculate AUC\n    numPosClas = sum(array(classLabels)==1.0)\n    yStep = 1/float(numPosClas); xStep = 1/float(len(classLabels)-numPosClas)\n    sortedIndicies = predStrengths.argsort()#get sorted index, it's reverse\n    fig = plt.figure()\n    fig.clf()\n    ax = plt.subplot(111)\n    #loop through all the values, drawing a line segment at each point\n    for index in sortedIndicies.tolist()[0]:\n        if classLabels[index] == 1.0:\n            delX = 0; delY = yStep;\n        else:\n            delX = xStep; delY = 0;\n            ySum += cur[1]\n        #draw line from cur to (cur[0]-delX,cur[1]-delY)\n        ax.plot([cur[0],cur[0]-delX],[cur[1],cur[1]-delY], c='b')\n        cur = (cur[0]-delX,cur[1]-delY)\n    ax.plot([0,1],[0,1],'b--')\n    plt.xlabel('False positive rate'); plt.ylabel('True positive rate')\n    plt.title('ROC curve for AdaBoost horse colic detection system')\n    ax.axis([0,1,0,1])\n    plt.show()\n    print \"the Area Under the Curve is: \",ySum*xStep\n\n```\n\n\n### References\n\n\n【1】Machine Learning in Action 机器学习实战 第七章\n\n------\n<br>\n\n","source":"_posts/2015-07-12-Adaboost.md","raw":"---\nlayout: post\ntitle: \"机器学习算法-Adaboost\"\ndate: 2015-07-05 22:53:12\ntags: \n\t- Machine Learning\nexcerpt: bagging:基于数据随机重抽样的分类器构建方法\ncomments: true\ncategories: ML\n---\n\n## **本章内容**\n\n- 组合相似的分类器来提高分类性能\n- 应用AdaBoost算法\n- 处理非均衡分类问题\n\n\n## **主题：**\n\n**利用AdaBoost元算法提高分类性能**\n\n<!-- more -->\n### 1.基于数据集多重抽样的分类器\n\n| Feature |AdaBoost  |\n| -- | -- |\n| 优点 |  泛化错误率低，易编码，可以应用在大部分分类器上，无需参数调整 |\n| 缺点 |  对离群点敏感 |\n| 数据 | 数值型和标称型数据 |\n\n<br>\n\nbagging:基于数据随机重抽样的分类器构建方法\n\n自举汇聚法(bootstrap aggregating),也称为bagging方法，是从原始数据集选择S次后得到S个新数据集的一种技术。新数据集和原始数据集的大小相等。每个数据集都是通过在原始数据集中随机选择一个本来进行替换而得到的。\n\n在S个数据集建好之后，将某个学习算法分别作用域每个数据集得到了S个分类器。当我们对新数据进行分类时，就可以应用S个分类器进行分类。与此同时，选择分类器投票结果最多的类别作为最后的分类结果。\n\n有一些比较先进的bagging方法，如**随机森林**（RF）。\n\nboosting是一种与bagging很类似的技术。不论是boosting还是bagging当中，当使用的多个分类器的类型都是一致的。但是在前者当中，不同的分类器是通过串行训练而获得的，每个新分类器都根据已训练出的分类器的性能来进行训练。boosting是通过训练集中关注被已有分类器错分的那些数据来获得新的分类器。\n\nboosting方法有多个版本，当前最流行便属于**AdaBoost**。\n\n**AdaBoost的一般流程**\n\n（1）收集数据：可以使用任何方法；<br>\n（2）准备数据：依赖于所使用的若分类器类型；<br>\n（3）分析数据：可以使用任意方法<br>\n（4）训练算法：AdaBoost的大部分时间都用在训练上，分类器将多次在同一数据集上训练若分类器；<br>\n（5）测试算法：计算分类的错误率；<br>\n（6）使用算法：同SVM一样，AdaBoost预测的两个类别中的一个，如果想要把它应用到多个类的场合，那么就像多类SVM中的做法一样对AdaBoost进行修改。\n\n\n### 2.训练算法：基于错误提升分类器的性能\n\nAdaBoost是adaptive boosting（自适应boosting）的缩写，其运行过程：训练集中的每个样本，赋予其一个权重，这些权重构成向量D。一开始，这些权重都初试化成相等值。首先在训练数据上训练处一个若分类器并计算该分类器的错误率，然后在同一数据集上再次训练若分类器。在分类器的第二次训练当中，将会重新调整每个样本的权重，其中第一次分队的样本的权重值将会降低，而第一次分错的样本的权重将会提高。为了从所有分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重值alpha，这些alpha值是基于每个分类器的错误率进行计算的。其中错误率定义为\n\n$$\\epsilon=\\dfrac{为正确分类的样本数目}{所有样本数目}$$\n\nalpha计算公式\n\n$$\\alpha=\\dfrac{1}{2}ln(\\dfrac{1-\\epsilon}{\\epsilon})$$\n\n计算出alpha值之后，可以对权重向量D进行更新，使得正确分类的样本的权重值降低而分错的样本权重值升高，D的计算方法如下\n如果某个样本被正确分类，更新该样本权重值为：\n\n$$D^{(t+1)}_i=\\dfrac{D_i^{(t)} e^{-\\alpha}}{Sum(D)}$$\n\n如果某个样本被错误分类，更新该样本的权重值为：\n\n$$D^{(t+1)}_i=\\dfrac{D_i^{(t)} e^{\\alpha}}{Sum(D)}$$\n\n计算出D后，AdaBoost接着开始下一轮的迭代。AdaBoost算法会不断地重复训练和调整权重的过程，知道训练错误率为0或者若分类器的数目达到用户指定值为止。\n\n在建立完整的AdaBoost算法之前，需要通过一些代码建立若分类器及保存数据集的权重。\n\n\n### 3.基于单层决策树构建若分类器\n\n\n单层决策树是一种简单的决策树。首先构建一个简单的数据集,建立一个adaboost.py文件并加入下列代码：\n\n```python\ndef loadSimpData():\n    datMat = matrix([[ 1. ,  2.1],\n        [ 2. ,  1.1],\n        [ 1.3,  1. ],\n        [ 1. ,  1. ],\n        [ 2. ,  1. ]])\n    classLabels = [1.0, 1.0, -1.0, -1.0, 1.0]\n    return datMat,classLabels\n```\n导入数据\n\n```\n>>> import adaboost\n>>> datMat,classLabels=adaboost.loadSimpData()\n```\n\n下面两个函数，一个用于测试是否某个值小于或者大于我们正在测试的阈值，一个会在一个加权数据集中循环，并找到具有最低错误率的单层决策树。\n\n伪代码如下：<br>\n\n\t将最小错误率minError设为无穷大\n\t对数据及中的每一个特征（第一层循环）：\n\t\t对每个步长（第二层循环）：\n\t\t\t对每个不等号（第三层循环）：\n\t\t\t\t建立一颗单层决策树并利用加权数据集对它进行测试\n\t\t\t\t如果错误率低于minError，则将当前单层决策树设置为最佳单层决策树\n\t返回最佳单层决策树\n\n\n单层决策树生成函数代码：\n\n```python\ndef stumpClassify(dataMatrix,dimen,threshVal,threshIneq):#just classify the data\n    retArray = ones((shape(dataMatrix)[0],1))\n    if threshIneq == 'lt':\n        retArray[dataMatrix[:,dimen] <= threshVal] = -1.0\n    else:\n        retArray[dataMatrix[:,dimen] > threshVal] = -1.0\n    return retArray\n    \n\ndef buildStump(dataArr,classLabels,D):\n    dataMatrix = mat(dataArr); labelMat = mat(classLabels).T\n    m,n = shape(dataMatrix)\n    numSteps = 10.0; bestStump = {}; bestClasEst = mat(zeros((m,1)))\n    minError = inf #init error sum, to +infinity\n    for i in range(n):#loop over all dimensions\n        rangeMin = dataMatrix[:,i].min(); rangeMax = dataMatrix[:,i].max();\n        stepSize = (rangeMax-rangeMin)/numSteps\n        for j in range(-1,int(numSteps)+1):#loop over all range in current dimension\n            for inequal in ['lt', 'gt']: #go over less than and greater than\n                threshVal = (rangeMin + float(j) * stepSize)\n                predictedVals = stumpClassify(dataMatrix,i,threshVal,inequal)#call stump classify with i, j, lessThan\n                errArr = mat(ones((m,1)))\n                errArr[predictedVals == labelMat] = 0\n                weightedError = D.T*errArr  #calc total error multiplied by D\n                #print \"split: dim %d, thresh %.2f, thresh ineqal: %s, the weighted error is %.3f\" % (i, threshVal, inequal, weightedError)\n                if weightedError < minError:\n                    minError = weightedError\n                    bestClasEst = predictedVals.copy()\n                    bestStump['dim'] = i\n                    bestStump['thresh'] = threshVal\n                    bestStump['ineq'] = inequal\n    return bestStump,minError,bestClasEst\n\n```\n\n\n### 4.AdaBoost算法的实现\n\n整个实现的伪代码如下：\n\n\t对每次迭代：\n\t\t利用buildStump()函数找到最佳的单层决策树\n\t\t将最佳单层决策树加入到单层决策树数据中\n\t\t计算alpha\n\t\t计算心的权重向量D\n\t\t更新累计类别估计值\n\t\t如果错误率低于0.0 则退出循环\n\n基于单层决策树的AdaBoost训练过程\n\n```python\ndef adaBoostTrainDS(dataArr,classLabels,numIt=40):\n    weakClassArr = []\n    m = shape(dataArr)[0]\n    D = mat(ones((m,1))/m)   #init D to all equal\n    aggClassEst = mat(zeros((m,1)))\n    for i in range(numIt):\n        bestStump,error,classEst = buildStump(dataArr,classLabels,D)#build Stump\n        #print \"D:\",D.T\n        alpha = float(0.5*log((1.0-error)/max(error,1e-16)))#calc alpha, throw in max(error,eps) to account for error=0\n        bestStump['alpha'] = alpha  \n        weakClassArr.append(bestStump)                  #store Stump Params in Array\n        #print \"classEst: \",classEst.T\n        expon = multiply(-1*alpha*mat(classLabels).T,classEst) #exponent for D calc, getting messy\n        D = multiply(D,exp(expon))                              #Calc New D for next iteration\n        D = D/D.sum()\n        #calc training error of all classifiers, if this is 0 quit for loop early (use break)\n        aggClassEst += alpha*classEst\n        #print \"aggClassEst: \",aggClassEst.T\n        aggErrors = multiply(sign(aggClassEst) != mat(classLabels).T,ones((m,1)))\n        errorRate = aggErrors.sum()/m\n        print \"total error: \",errorRate\n        if errorRate == 0.0: break\n    return weakClassArr,aggClassEst\n\n```\n\n### 5.测试算法\n\n\n拥有了多个若分类器以及其对应的alpha值，进行测试就方便了。\n\nAdaBoost分类函数:利用训练处的多个若分类器进行分类的函数。\n\n```python\ndef adaClassify(datToClass,classifierArr):\n    dataMatrix = mat(datToClass)#do stuff similar to last aggClassEst in adaBoostTrainDS\n    m = shape(dataMatrix)[0]\n    aggClassEst = mat(zeros((m,1)))\n    for i in range(len(classifierArr)):\n        classEst = stumpClassify(dataMatrix,classifierArr[i]['dim'],\\\n                                 classifierArr[i]['thresh'],\\\n                                 classifierArr[i]['ineq'])#call stump classify\n        aggClassEst += classifierArr[i]['alpha']*classEst\n        print aggClassEst\n    return sign(aggClassEst)\n```\n\n\n\n\n### 6.绘制ROC曲线\n\n\nROC曲线绘制代码：\n\n```python\ndef plotROC(predStrengths, classLabels):\n    import matplotlib.pyplot as plt\n    cur = (1.0,1.0) #cursor\n    ySum = 0.0 #variable to calculate AUC\n    numPosClas = sum(array(classLabels)==1.0)\n    yStep = 1/float(numPosClas); xStep = 1/float(len(classLabels)-numPosClas)\n    sortedIndicies = predStrengths.argsort()#get sorted index, it's reverse\n    fig = plt.figure()\n    fig.clf()\n    ax = plt.subplot(111)\n    #loop through all the values, drawing a line segment at each point\n    for index in sortedIndicies.tolist()[0]:\n        if classLabels[index] == 1.0:\n            delX = 0; delY = yStep;\n        else:\n            delX = xStep; delY = 0;\n            ySum += cur[1]\n        #draw line from cur to (cur[0]-delX,cur[1]-delY)\n        ax.plot([cur[0],cur[0]-delX],[cur[1],cur[1]-delY], c='b')\n        cur = (cur[0]-delX,cur[1]-delY)\n    ax.plot([0,1],[0,1],'b--')\n    plt.xlabel('False positive rate'); plt.ylabel('True positive rate')\n    plt.title('ROC curve for AdaBoost horse colic detection system')\n    ax.axis([0,1,0,1])\n    plt.show()\n    print \"the Area Under the Curve is: \",ySum*xStep\n\n```\n\n\n### References\n\n\n【1】Machine Learning in Action 机器学习实战 第七章\n\n------\n<br>\n\n","slug":"2015-07-12-Adaboost","published":1,"updated":"2015-11-19T07:50:44.434Z","photos":[],"link":"","_id":"cih8q8rr4002qr8ujp80gla5n"},{"layout":"post","date":"2015-07-07T15:23:23.000Z","title":"数据预处理-PDB文件","comments":1,"_content":"\n以下代码为个人原创，python实现，是处理PDB文件的部分常用代码，仅供参考！\n\n### 1.下载PDB文件\n\n下面是一个下载PDB文件的函数，传入的参数是一个写有pdb名字的namefile文件，函数的核心部分是三个系统命令，先通过wget下载，然后解压，最后替换名字。\n\n<!-- more -->\n\n```python\ndef downloadpdb(namefile):\n    inputfile = open(namefile, 'r')\n    for eachline in inputfile:\n        pdbname = eachline.lower().strip()\n        os.system(\"wget http://ftp.wwpdb.org/pub/pdb/data/structures/all/pdb/pdb\" + pdbname + \".ent.gz\")\n        os.system(\"gzip -d pdb\" + pdbname + '.ent.gz')\n        os.system(\"mv pdb\" + pdbname + \".ent \" + pdbname.upper() + '.pdb')\n```\n\n测试用例\n\n```python\nos.chdir('/ifs/home/liudiwei/datasets/RPdatas')\ndownloadpdb('protein.name')\n```\n\n### 2.PDB转DSSP\n\n将下载的PDB文件转成DSSP文件\n\n```python\n# 处理一行dssp数据\ndef formatdsspline(dsspline):\n    eachline  = dsspline\n    col = '\\t' + eachline[0:5]\n    col += '\\t' + eachline[5:10]\n    col += '\\t' + eachline[10:12]\n    col += '\\t' + eachline[12:15]\n    col += '\\t' + eachline[15:25]\n    col += '\\t' + eachline[25:39]\n    col += '\\t' + eachline[29:34]\n    col += '\\t' + eachline[34:38]\n    col += '\\t' + eachline[38:50]\n    col += '\\t' + eachline[50:61]\n    col += '\\t' + eachline[61:72]\n    col += '\\t' + eachline[72:83]\n    col += '\\t' + eachline[83:92]\n    col += '\\t' + eachline[92:97]\n    col += '\\t' + eachline[97:103]\n    col += '\\t' + eachline[103:109]\n    col += '\\t' + eachline[109:115]\n    col += '\\t' + eachline[115:122]\n    col += '\\t' + eachline[122:129]\n    col += '\\t' + eachline[129:136]\n    return col\n```\n\n\nPDB转DSSP格式，需要DSSP软件\n\n参数：\n\n- pdbdir: pdb文件目录   \n- dsspdir: 生成的dssp文件目录（需创建）\n\n```python\ndef pdbToDSSP(pdbnamefile,pdbdir, dsspdir):    \n    pdbfiles = os.listdir(pdbdir)\n    #对于每个pdb文件，生成对应的dssp文件，并保存在dssp目录下\n    for pdb_file in pdbfiles:\n        pdb_name = pdb_file.split('.')[0].upper()\n        command = 'DSSPCMBI.EXE -x ' + pdbdir +'/'+ pdb_file + '  '+ dsspdir +\"/\"+ pdb_name +'.dssp'\n        os.system(command) \n    dsspfiles = os.listdir(dsspdir)\n    if os.path.exists(dsspdir + \"/DSSP\"):      #判断DSSP文件是否存在，存在则删除\n        dsspfiles.remove(\"DSSP\")\n    output=open(dsspdir + '/DSSP','w')\n    #循环读取dssp文件，将其合并成一个整的DSSP\n    with open(pdbnamefile, 'r') as namefile:\n        for eachline in namefile:\n            pdb_name = eachline.strip() \n            dssp_file = pdb_name + '.dssp'\n        #for dssp_file in dsspfiles:\n            #pdb_name = dssp_file.split('.')[0]\n            with open(dsspdir + '/' + dssp_file,\"r\") as f:\n                if not os.path.isdir(dsspdir + '/format'):\n                    os.mkdir(dsspdir + '/format')\n                with open(dsspdir + '/format/' + pdb_name + '.dssp.format','w') as singleOut:\n                    count = 0; preRes=[]\n                    sets = set('');content=''   \n                    for eachline in f.readlines():\n                        list1=[];oneline=[]\n                        count+=1\n                        list1.append(pdb_name)                             \n                        if count >= 29:\n                            eachline = formatdsspline(eachline)\n                            oneline = eachline.split('\\t')\n\n                            if oneline[3].strip():\n                                preRes = oneline[3].strip()                        \n                            \n                            list1.append(eachline)\n                            content += \"\".join(list1)+'\\n'                            \n                            \n                            if '!' == oneline[4].strip():\n                                continue\n                            \n                            if '!*' in eachline or not oneline[3].strip():\n                                if preRes in sets and len(sets):\n                                    content=''\n                                    preRes=[]\n                                    continue\n                                sets.add(preRes)\n                                output.write(content)\n                                singleOut.write(content)\n                                content=''\n                    if preRes and preRes not in sets:\n                        output.write(content)\n                        singleOut.write(content)\n    output.close()\n```\n\n测试\n\n```python\n#test\npdbdir = 'z:/datasets/protein/pdb'\ndsspdir = 'Z:/datasets/protein/DSSPdir' \nproname = 'Z:/datasets/protein/protein.name'\npdbToDSSP(proname,pdbdir, dsspdir)\n```\n### 3.DSSP抽取序列\n从一个整合的DSSP文件中抽取序列文件 \n\n从格式化后的dssp文件获取序列信息\n\n参数：dsspfile为格式过的DSSP文件,seqfile为输出的序列文件,同时输出序列文件\n\n```python\ndef getSeqFromDSSP(dsspfile, seqfile, minLen):\n    with open(dsspfile, 'r') as inputfile:\n        if not seqfile.strip():\n            seqfile = 'protein'+minLen + '.dssp.seq'\n        outchain = open('protein40.chain.all', 'w')\n        with open(seqfile, 'w') as outputfile:\n            residue=[];Ntype=[]\n            preType=[];preRes=[]\n            firstline=[];secondline=[];content=''\n            for eachline in inputfile:\n                oneline = eachline.split('\\t')\n                residue = oneline[0]\n                if not residue.strip(): \n                    continue\n                Ntype = oneline[3].strip()\n                if not Ntype.strip():\n                    continue\n                if preRes!=residue:\n                    content = ''.join(firstline)+'\\n' + ''.join(secondline) +'\\n'\n                    if len(secondline) >=minLen and not 'X' in secondline:\n                        outchain.write(''.join(firstline) + '\\n')\n                        outputfile.write(content)\n                    firstline=[]\n                    firstline.append('>' + residue + ':' + Ntype)\n                    secondline=[];secondline.append(oneline[4].strip())\n                    preRes = residue;preType = Ntype\n                    continue\n                if Ntype != preType:\n                    content = ''.join(firstline)+'\\n' + ''.join(secondline) +'\\n'\n                    if len(secondline) >=minLen and  not 'X' in secondline:\n                        outchain.write(''.join(firstline) + '\\n')\n                        outputfile.write(content)\n                    firstline=[]\n                    firstline.append('>' + residue + ':' + Ntype)\n                    secondline=[];secondline.append(oneline[4].strip())\n                    preRes = residue;preType = Ntype\n                else: #如果Ntype不为空，且等于preType\n                    secondline.append(oneline[4].strip())\n            content = ''.join(firstline)+'\\n' + ''.join(secondline) +'\\n'\n            if len(secondline) >=minLen and not 'X' in secondline:  #选择长度大于40\n                outchain.write(''.join(firstline) + '\\n')\n                outputfile.write(content)\n        outchain.close()\n```\n测试：\n\n```\nos.chdir(r\"E:\\3-CSU\\Academic\\_Oriented\\analysis\\experiment\\Datasets\\ptest.dssp\")\npdbfile = 'DSSP'\noutfile = 'protein.seq'\ngetSeqFromDSSP(pdbfile,outfile)\n```\n\n### 4.对序列做blast聚类\n设置相应的参数，在服务器上跑blast，代码如下：\n\n```python\nifs/share/lib/cd-hit-v4.5.4/cd-hit -i /ifs/home/liudiwei/datasets/protein40.seq -o /ifs/home/liudiwei/experiment/cdhit/fasta.40 -c 0.4 -n 2 -M 2000\n```\n\n### 5.生成聚类后的DSSP，得到protein.name、protein.seq、protein.chain三个文件\n\n从原来的DSSP文件中，根据聚类后的链名抽取新的DSSP文件\n\n```python\n # extract dssp from old dssp file\ndef extractDSSP(dsspfile, chainname, outfile):\n    with open(outfile, 'w') as outdssp:\n        with open(dsspfile, 'r') as inputdssp:\n            for eachline in inputdssp:\n                oneline = eachline.split('\\t')\n                #preNum = oneline[2].strip()     \n                with open(chainname,'r') as chainfile:       \n                    for eachchain in chainfile:\n                        protein_ame = eachchain[1:5]\n                        chain_id = eachchain[6:7]\n                        if oneline[0].strip() == protein_ame and oneline[3].strip() == chain_id:\n                            outdssp.write(eachline)\n                            break\n```\n\n测试实例：\n\n```python\ndsspfile = '/ifs/home/liudiwei/datasets/832.protein/DSSPdir1/DSSP'\nchainname = '/ifs/home/liudiwei/experiment/step1/832p.cluster/cdhit/protein.chain'\noutfile = '/ifs/home/liudiwei/experiment/step1/832p.cluster/cdhit/DSSP'\nextractDSSP(dsspfile, chainname, outfile )\n```\n\n\n-----\n\n","source":"_posts/2015-07-07-PDB.md","raw":"---\nlayout: post\ndate: 2015-07-07 23:23:23\ntitle: \"数据预处理-PDB文件\"\ntags: \n\t- BioInfo\ncomments: true\nexcerpt: 以下代码为个人原创，python实现，是处理PDB文件的常用代码，仅供参考！1.下载PDB文件下面是一个下载PDB文件的函数，传入的参数是一个写有pdb名字的namefile文件，函数的核心部分是三个系统命令，先通过wget下载，然后解压，最后替换名字。def downloadpdb(namefile)\ncategories: BioInfo\n---\n\n以下代码为个人原创，python实现，是处理PDB文件的部分常用代码，仅供参考！\n\n### 1.下载PDB文件\n\n下面是一个下载PDB文件的函数，传入的参数是一个写有pdb名字的namefile文件，函数的核心部分是三个系统命令，先通过wget下载，然后解压，最后替换名字。\n\n<!-- more -->\n\n```python\ndef downloadpdb(namefile):\n    inputfile = open(namefile, 'r')\n    for eachline in inputfile:\n        pdbname = eachline.lower().strip()\n        os.system(\"wget http://ftp.wwpdb.org/pub/pdb/data/structures/all/pdb/pdb\" + pdbname + \".ent.gz\")\n        os.system(\"gzip -d pdb\" + pdbname + '.ent.gz')\n        os.system(\"mv pdb\" + pdbname + \".ent \" + pdbname.upper() + '.pdb')\n```\n\n测试用例\n\n```python\nos.chdir('/ifs/home/liudiwei/datasets/RPdatas')\ndownloadpdb('protein.name')\n```\n\n### 2.PDB转DSSP\n\n将下载的PDB文件转成DSSP文件\n\n```python\n# 处理一行dssp数据\ndef formatdsspline(dsspline):\n    eachline  = dsspline\n    col = '\\t' + eachline[0:5]\n    col += '\\t' + eachline[5:10]\n    col += '\\t' + eachline[10:12]\n    col += '\\t' + eachline[12:15]\n    col += '\\t' + eachline[15:25]\n    col += '\\t' + eachline[25:39]\n    col += '\\t' + eachline[29:34]\n    col += '\\t' + eachline[34:38]\n    col += '\\t' + eachline[38:50]\n    col += '\\t' + eachline[50:61]\n    col += '\\t' + eachline[61:72]\n    col += '\\t' + eachline[72:83]\n    col += '\\t' + eachline[83:92]\n    col += '\\t' + eachline[92:97]\n    col += '\\t' + eachline[97:103]\n    col += '\\t' + eachline[103:109]\n    col += '\\t' + eachline[109:115]\n    col += '\\t' + eachline[115:122]\n    col += '\\t' + eachline[122:129]\n    col += '\\t' + eachline[129:136]\n    return col\n```\n\n\nPDB转DSSP格式，需要DSSP软件\n\n参数：\n\n- pdbdir: pdb文件目录   \n- dsspdir: 生成的dssp文件目录（需创建）\n\n```python\ndef pdbToDSSP(pdbnamefile,pdbdir, dsspdir):    \n    pdbfiles = os.listdir(pdbdir)\n    #对于每个pdb文件，生成对应的dssp文件，并保存在dssp目录下\n    for pdb_file in pdbfiles:\n        pdb_name = pdb_file.split('.')[0].upper()\n        command = 'DSSPCMBI.EXE -x ' + pdbdir +'/'+ pdb_file + '  '+ dsspdir +\"/\"+ pdb_name +'.dssp'\n        os.system(command) \n    dsspfiles = os.listdir(dsspdir)\n    if os.path.exists(dsspdir + \"/DSSP\"):      #判断DSSP文件是否存在，存在则删除\n        dsspfiles.remove(\"DSSP\")\n    output=open(dsspdir + '/DSSP','w')\n    #循环读取dssp文件，将其合并成一个整的DSSP\n    with open(pdbnamefile, 'r') as namefile:\n        for eachline in namefile:\n            pdb_name = eachline.strip() \n            dssp_file = pdb_name + '.dssp'\n        #for dssp_file in dsspfiles:\n            #pdb_name = dssp_file.split('.')[0]\n            with open(dsspdir + '/' + dssp_file,\"r\") as f:\n                if not os.path.isdir(dsspdir + '/format'):\n                    os.mkdir(dsspdir + '/format')\n                with open(dsspdir + '/format/' + pdb_name + '.dssp.format','w') as singleOut:\n                    count = 0; preRes=[]\n                    sets = set('');content=''   \n                    for eachline in f.readlines():\n                        list1=[];oneline=[]\n                        count+=1\n                        list1.append(pdb_name)                             \n                        if count >= 29:\n                            eachline = formatdsspline(eachline)\n                            oneline = eachline.split('\\t')\n\n                            if oneline[3].strip():\n                                preRes = oneline[3].strip()                        \n                            \n                            list1.append(eachline)\n                            content += \"\".join(list1)+'\\n'                            \n                            \n                            if '!' == oneline[4].strip():\n                                continue\n                            \n                            if '!*' in eachline or not oneline[3].strip():\n                                if preRes in sets and len(sets):\n                                    content=''\n                                    preRes=[]\n                                    continue\n                                sets.add(preRes)\n                                output.write(content)\n                                singleOut.write(content)\n                                content=''\n                    if preRes and preRes not in sets:\n                        output.write(content)\n                        singleOut.write(content)\n    output.close()\n```\n\n测试\n\n```python\n#test\npdbdir = 'z:/datasets/protein/pdb'\ndsspdir = 'Z:/datasets/protein/DSSPdir' \nproname = 'Z:/datasets/protein/protein.name'\npdbToDSSP(proname,pdbdir, dsspdir)\n```\n### 3.DSSP抽取序列\n从一个整合的DSSP文件中抽取序列文件 \n\n从格式化后的dssp文件获取序列信息\n\n参数：dsspfile为格式过的DSSP文件,seqfile为输出的序列文件,同时输出序列文件\n\n```python\ndef getSeqFromDSSP(dsspfile, seqfile, minLen):\n    with open(dsspfile, 'r') as inputfile:\n        if not seqfile.strip():\n            seqfile = 'protein'+minLen + '.dssp.seq'\n        outchain = open('protein40.chain.all', 'w')\n        with open(seqfile, 'w') as outputfile:\n            residue=[];Ntype=[]\n            preType=[];preRes=[]\n            firstline=[];secondline=[];content=''\n            for eachline in inputfile:\n                oneline = eachline.split('\\t')\n                residue = oneline[0]\n                if not residue.strip(): \n                    continue\n                Ntype = oneline[3].strip()\n                if not Ntype.strip():\n                    continue\n                if preRes!=residue:\n                    content = ''.join(firstline)+'\\n' + ''.join(secondline) +'\\n'\n                    if len(secondline) >=minLen and not 'X' in secondline:\n                        outchain.write(''.join(firstline) + '\\n')\n                        outputfile.write(content)\n                    firstline=[]\n                    firstline.append('>' + residue + ':' + Ntype)\n                    secondline=[];secondline.append(oneline[4].strip())\n                    preRes = residue;preType = Ntype\n                    continue\n                if Ntype != preType:\n                    content = ''.join(firstline)+'\\n' + ''.join(secondline) +'\\n'\n                    if len(secondline) >=minLen and  not 'X' in secondline:\n                        outchain.write(''.join(firstline) + '\\n')\n                        outputfile.write(content)\n                    firstline=[]\n                    firstline.append('>' + residue + ':' + Ntype)\n                    secondline=[];secondline.append(oneline[4].strip())\n                    preRes = residue;preType = Ntype\n                else: #如果Ntype不为空，且等于preType\n                    secondline.append(oneline[4].strip())\n            content = ''.join(firstline)+'\\n' + ''.join(secondline) +'\\n'\n            if len(secondline) >=minLen and not 'X' in secondline:  #选择长度大于40\n                outchain.write(''.join(firstline) + '\\n')\n                outputfile.write(content)\n        outchain.close()\n```\n测试：\n\n```\nos.chdir(r\"E:\\3-CSU\\Academic\\_Oriented\\analysis\\experiment\\Datasets\\ptest.dssp\")\npdbfile = 'DSSP'\noutfile = 'protein.seq'\ngetSeqFromDSSP(pdbfile,outfile)\n```\n\n### 4.对序列做blast聚类\n设置相应的参数，在服务器上跑blast，代码如下：\n\n```python\nifs/share/lib/cd-hit-v4.5.4/cd-hit -i /ifs/home/liudiwei/datasets/protein40.seq -o /ifs/home/liudiwei/experiment/cdhit/fasta.40 -c 0.4 -n 2 -M 2000\n```\n\n### 5.生成聚类后的DSSP，得到protein.name、protein.seq、protein.chain三个文件\n\n从原来的DSSP文件中，根据聚类后的链名抽取新的DSSP文件\n\n```python\n # extract dssp from old dssp file\ndef extractDSSP(dsspfile, chainname, outfile):\n    with open(outfile, 'w') as outdssp:\n        with open(dsspfile, 'r') as inputdssp:\n            for eachline in inputdssp:\n                oneline = eachline.split('\\t')\n                #preNum = oneline[2].strip()     \n                with open(chainname,'r') as chainfile:       \n                    for eachchain in chainfile:\n                        protein_ame = eachchain[1:5]\n                        chain_id = eachchain[6:7]\n                        if oneline[0].strip() == protein_ame and oneline[3].strip() == chain_id:\n                            outdssp.write(eachline)\n                            break\n```\n\n测试实例：\n\n```python\ndsspfile = '/ifs/home/liudiwei/datasets/832.protein/DSSPdir1/DSSP'\nchainname = '/ifs/home/liudiwei/experiment/step1/832p.cluster/cdhit/protein.chain'\noutfile = '/ifs/home/liudiwei/experiment/step1/832p.cluster/cdhit/DSSP'\nextractDSSP(dsspfile, chainname, outfile )\n```\n\n\n-----\n\n","slug":"2015-07-07-PDB","published":1,"updated":"2015-11-19T07:50:44.432Z","photos":[],"link":"","_id":"cih8q8rre002tr8uj0e84jv24"},{"layout":"post","date":"2015-06-10T11:24:00.000Z","title":"Python模拟ls命令","_content":"\n模拟控制台命令\n\n写一个程序 lsrm 要求如下:\n\n\t模拟linux的命令ls部分功能\n\t当使用命令\n\tlsrm -ll\n\t显示目录下所有 py 结尾的文件\n\t增加难度 (1.使用递归 显示所有目录里的 py 结尾文件)\n\n<!--more-->\n\n---\n\n首先定义一个outputFile函数，参数只设置一个infile，表示的是文件名或者目录名，然后进行判断，如果是文件，而且以py结尾，则输出；否则，如果是目录，则循环遍历每个每个文件。代码如下：\n\n\n```Python\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Oct 28 19:25:20 2015\n\n@author: liudiwei\n\"\"\"\n\nimport os\n\ndef outputFile(infile):\n    if os.path.isdir(infile):\n        filelist = getFileList(infile)\n        for eachfile in filelist:\n            os.chdir(infile)\n            outputFile(eachfile)\n            os.chdir(\"..\")\n    else:\n        if \".py\" in infile:\n            print infile\n\n\nif __name__=='__main__':\n    filepath = r\"F:\\CSU\\Academic\\analysis\\experiment\\code\"; \n    filelist = getFileList(filepath)\n    while True:\n        command = raw_input('# ' )\n        if command == 'lsrm -ll':    \n            outputFile(filepath)\n        elif command == \"stop\":\n            break\n```\n\n运行结果如下图所示：\n\n<center>\n![output](/assets/images/20151029094653.png)\n</center>\n\n\n注意：在寻找子目录的文件时，需将工作目切换到子目录，档子目录遍历完毕后，再前换到上一层目录os.chdir(\"..\").\n\n---\n\n","source":"_posts/2015-06-10 Python simulate command.md","raw":"---\nlayout: post\ndate: 2015-06-10 19:24\ntitle: \"Python模拟ls命令\" \ntags:\n\t- Python\ncategories: Python\n---\n\n模拟控制台命令\n\n写一个程序 lsrm 要求如下:\n\n\t模拟linux的命令ls部分功能\n\t当使用命令\n\tlsrm -ll\n\t显示目录下所有 py 结尾的文件\n\t增加难度 (1.使用递归 显示所有目录里的 py 结尾文件)\n\n<!--more-->\n\n---\n\n首先定义一个outputFile函数，参数只设置一个infile，表示的是文件名或者目录名，然后进行判断，如果是文件，而且以py结尾，则输出；否则，如果是目录，则循环遍历每个每个文件。代码如下：\n\n\n```Python\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Oct 28 19:25:20 2015\n\n@author: liudiwei\n\"\"\"\n\nimport os\n\ndef outputFile(infile):\n    if os.path.isdir(infile):\n        filelist = getFileList(infile)\n        for eachfile in filelist:\n            os.chdir(infile)\n            outputFile(eachfile)\n            os.chdir(\"..\")\n    else:\n        if \".py\" in infile:\n            print infile\n\n\nif __name__=='__main__':\n    filepath = r\"F:\\CSU\\Academic\\analysis\\experiment\\code\"; \n    filelist = getFileList(filepath)\n    while True:\n        command = raw_input('# ' )\n        if command == 'lsrm -ll':    \n            outputFile(filepath)\n        elif command == \"stop\":\n            break\n```\n\n运行结果如下图所示：\n\n<center>\n![output](/assets/images/20151029094653.png)\n</center>\n\n\n注意：在寻找子目录的文件时，需将工作目切换到子目录，档子目录遍历完毕后，再前换到上一层目录os.chdir(\"..\").\n\n---\n\n","slug":"2015-06-10 Python simulate command","published":1,"updated":"2015-11-19T07:50:44.432Z","comments":1,"photos":[],"link":"","_id":"cih8q8rrl002wr8ujo3eftmu3"},{"layout":"post","title":"机器学习算法-Apriori关联分析","date":"2015-06-04T13:53:12.000Z","comments":1,"_content":"\n**引文：** 学习一个算法，我们最关心的并不是算法本身，而是一个算法能够干什么，能应用到什么地方。很多的时候，我们都需要从大量数据中提取出有用的信息，从大规模数据中寻找物品间的隐含关系叫做关联分析(association analysis)或者关联规则学习(association rule learning)。比如在平时的购物中，那些商品一起捆绑购买销量会比较好，又比如购物商城中的那些推荐信息，都是根据用户平时的搜索或者是购买情况来生成的。如果是蛮力搜索的话代价太高了，所以Apriori就出现了，就是为了解决这类问题的。\n\n<!-- more -->\n\n**内容纲要**\n\n- 关联分析\n- Apriori算法理论\n- Apriori实现\n\t- 频繁项集生成\n\t- 关联规则生成\n\n- reference\n\n**Apriori算法**\n\n- 优点：易编码实现\n- 缺点：在大数据集上可能较慢\n- 适合数据类型：数值型或者标称型数据\n\n### **1 关联分析**\n\n说到关联分析，顾名思义的就可以联想到，所谓关联就是两个东西之间存在的某种联系。关联分析最有名的例子是“尿布和啤酒”，以前在美国西部的一家连锁店，店家发现男人们在周四购买尿布后还会购买啤酒。于是他便得出一个推理，尿布和啤酒存在某种关联。但是具体怎么来评判呢？\n\n那么，这里用的是**支持度**和**可信度**来评判!\n\n一个项集的支持度（support）被定义为数据集中包含该数据集的记录所占的比例。可信度或置信度（confidence）是正对一条关联规则来定义的，比如{尿布}->{啤酒}，这条规则的可信度定义为“支持度{尿布，啤酒}/支持度{尿布}”\n\n\n比如有规则X=>Y，它的**支持度**可以计算为包含XUY所有商品的交易量相对所有交易量的比例（也就是X和Y同时出现一次交易的概率）。**可信度**定义为包含XUY所有物品的交易量相对仅包含X的交易量的比值，也就是说可信度对应给定X时的条件概率。关联规则挖掘，其目的是自动发起这样的规则，同时计算这些规则的质量。\n\n计算公式如下：\n\n$$支持度=\\frac{交易量包含XUY}{交易量}$$\n\n$$可信度=\\frac{交易量包含XUY}{交易量包含X}$$\n\n支持度和可信度是用来量化关联分析是否成功的方法。关联分析的目的包括两个：发现频繁项集和发现关联规则。首先我们要找到频繁项集，然后根据频繁项集找出关联规则。下面使用apriori算法来发现频繁项集。\n\n### **2 Apriori理论**\n\n**算法的一般过程：**\n\n- 收集数据：使用任何方法\n- 准备数据：任意数据类型都可以，因为我们只保存集合\n- 分析数据：使用任何方法\n- 训练算法：使用Apriori算法来找到频繁项集\n- 测试算法：不需要测试过程\n- 使用算法：用于发现频繁项集以及物品之间的关联规则\n\n**使用Apriori算法，首先计算出单个元素的支持度，然后选出单个元素置信度大于我们要求的数值，比如0.5或是0.7等。然后增加单个元素组合的个数，只要组合项的支持度大于我们要求的数值就把它加到我们的频繁项集中，依次递归。**\n\n然后根据计算的支持度选出来的频繁项集来生成关联规则。\n\n### **3 Apriori实现**\n\n首先定义一些算法的辅助函数\n加载数据集的\n\n```\nfrom numpy import *\n\ndef loadDataSet():\n    list = [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]\n    return list\n```\n\n根据数据集构建集合C1，该集合是大小为1的所有候选集的集合。\n\n```\ndef createC1(dataSet):\n    C1 = [] #C1是大小为1的所有候选项集的集合\n    for transaction in dataSet:\n        for item in transaction:\n            if not [item] in C1:\n                C1.append([item])             \n    C1.sort()\n    return map(frozenset, C1)#use frozen set so we can use it as a key in a dict    \n```\n\n根据构建出来的频繁项集，选出满足我们需要的大于我们给定的支持度的项集\n\n```\n#D表示数据集，CK表示候选项集，minSupport表示最小的支持度，自己设定\ndef scanD(D, Ck, minSupport):\n    ssCnt = {}\n    for tid in D:\n        for can in Ck:\n            if can.issubset(tid):\n                if not ssCnt.has_key(can): ssCnt[can]=1\n                else: ssCnt[can] += 1\n    numItems = float(len(D))\n    retList = [] #存储满足最小支持度要求的项集\n    supportData = {} #每个项集的支持度字典\n    for key in ssCnt:  #计算所有项集的支持度\n        support = ssCnt[key]/numItems\n        if support >= minSupport:\n            retList.insert(0,key)\n        supportData[key] = support\n    return retList, supportData\n```\n\n#### **3.1 频繁项集**\n\n关于频繁项集的产生，我们单独的抽取出来\n首先需要一个生成合并项集的函数，将两个子集合并的函数\n\n```\n#LK是频繁项集列表，K表示接下来合并的项集中的单个想的个数{1,2,3}表示k=3\ndef aprioriGen(Lk, k): #creates Ck\n    retList = []\n    lenLk = len(Lk)\n    for i in range(lenLk):\n        for j in range(i+1, lenLk): \n            L1 = list(Lk[i])[:k-2]; L2 = list(Lk[j])[:k-2] #前k-2个项相同时，将两个集合合并\n            L1.sort(); L2.sort()\n            if L1==L2: #if first k-2 elements are equal\n                retList.append(Lk[i] | Lk[j]) #set union\n    return retList \n```\n\n\n接着定义生成频繁项集的函数\n\n```\n#只需要输入数据集和支持度即可\ndef apriori(dataSet, minSupport = 0.5):\n    C1 = createC1(dataSet)\n    D = map(set, dataSet)\n    L1, supportData = scanD(D, C1, minSupport)\n    L = [L1]\n    k = 2\n    while (len(L[k-2]) > 0):\n        Ck = aprioriGen(L[k-2], k)\n        Lk, supK = scanD(D, Ck, minSupport)#scan DB to get Lk\n        supportData.update(supK)\n        L.append(Lk)\n        k += 1\n    return L, supportData#返回频繁项集和每个项集的支持度值\n```\n\n\n#### **3.2 关联规则生成**\n\n通过频繁项集，我们可以得到相应的规则，但是具体规则怎么得出来的呢？下面给出一个规则生成函数，具体原理参考注释\n\n\n```\n#输入的参数分别为：频繁项集、支持度数据字典、自定义的最小支持度，返回的是可信度规则列表\ndef generateRules(L, supportData, minConf=0.7):  #支持度是通过scanD得到的字典\n    bigRuleList = []\n    for i in range(1, len(L)):#只去频繁项集中元素个数大于2的子集，如{1,2}{1,2,3}，不取{2}{3},etc...\n        for freqSet in L[i]:\n            H1 = [frozenset([item]) for item in freqSet]\n            if (i > 1):\n                rulesFromConseq(freqSet, H1, supportData, bigRuleList, minConf)\n            else:\n                calcConf(freqSet, H1, supportData, bigRuleList, minConf)\n    return bigRuleList         \n```\n\n下面定义一个用来计算置信度的函数，通过该函数抽取出符合我们要求的规则，如freqSet为{1,2}，H为{1}，{2}，可以计算出{1}-->{2}和{2}-->{1}的质心度，即下面的conf变量，然后用if语句判断是否符合我们的要求。代码如下：\n\n\n```\n#计算可信度，找到满足最小可信度的要求规则\ndef calcConf(freqSet, H, supportData, brl, minConf=0.7):\n    prunedH = [] #create new list to return\n    for conseq in H:\n        conf = supportData[freqSet]/supportData[freqSet-conseq] #calc confidence\n        if conf >= minConf: \n            print freqSet-conseq,'-->',conseq,'conf:',conf\n            brl.append((freqSet-conseq, conseq, conf))\n            prunedH.append(conseq)\n    return prunedH\n```\n\n下面的函数是用来合并子集的，比如我现在的频繁项集是{2,3,5},它的构造元素是{2},{3},{5}，所以需要将{2},{3},{5}两两合并然后再根据上面的calcConf函数计算置信度。代码如下：\n\n\n```\n#从最初的项集中生成更多的规则\ndef rulesFromConseq(freqSet, H, supportData, brl, minConf=0.7):\n    m = len(H[0])\n    if (len(freqSet) > (m + 1)): #进一步合并项集\n        Hmp1 = aprioriGen(H, m+1)#create Hm+1 new candidates\n        Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf)\n        if (len(Hmp1) > 1):    #need at least two sets to merge\n            rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf)\n```\n\n#### **3.3 测试**\n\n```\ndataSet = loadDataSet()\t\t\t \t#加载数据集\nL,suppoData = apriori(dataSet)\t\t#计算频繁项集\nrules = generateRules(L,suppoData,minConf=0.7) #抽取规则\n```\n\n\n得到的结果为：\n![这里写图片描述](http://img.blog.csdn.net/20150604094036589)\n\nL表示的是符合条件的频繁项集，rules表示最后抽取出来的符合条件的规则；还可以查看各个项集的支持度，如下所示。\n![这里写图片描述](http://img.blog.csdn.net/20150604094213762)\n\n\n### **Reference**\n\n[1]**《机器学习实战》**书籍第11章\n\n<br>\n\n------\n","source":"_posts/2015-06-04-Apriori.md","raw":"---\nlayout: post\ntitle: \"机器学习算法-Apriori关联分析\"\ndate: 2015-06-04 21:53:12\ntags: \n\t- Machine Learning\ncomments: true\nexcerpt: 引文： 学习一个算法，我们最关心的并不是算法本身，而是一个算法能够干什么，能应用到什么地方。很多的时候，我们都需要从大量数据中提取出有用的信息，从大规模数据中寻找物品间的隐含关系叫做关联分析(association analysis)或者关联规则学习(association rule learning)。比如在平时的购物中，那些商品一起捆绑购买销量会比较好，又比如购物商城中的那些推荐信息，都是根据用\ncategories: ML\n---\n\n**引文：** 学习一个算法，我们最关心的并不是算法本身，而是一个算法能够干什么，能应用到什么地方。很多的时候，我们都需要从大量数据中提取出有用的信息，从大规模数据中寻找物品间的隐含关系叫做关联分析(association analysis)或者关联规则学习(association rule learning)。比如在平时的购物中，那些商品一起捆绑购买销量会比较好，又比如购物商城中的那些推荐信息，都是根据用户平时的搜索或者是购买情况来生成的。如果是蛮力搜索的话代价太高了，所以Apriori就出现了，就是为了解决这类问题的。\n\n<!-- more -->\n\n**内容纲要**\n\n- 关联分析\n- Apriori算法理论\n- Apriori实现\n\t- 频繁项集生成\n\t- 关联规则生成\n\n- reference\n\n**Apriori算法**\n\n- 优点：易编码实现\n- 缺点：在大数据集上可能较慢\n- 适合数据类型：数值型或者标称型数据\n\n### **1 关联分析**\n\n说到关联分析，顾名思义的就可以联想到，所谓关联就是两个东西之间存在的某种联系。关联分析最有名的例子是“尿布和啤酒”，以前在美国西部的一家连锁店，店家发现男人们在周四购买尿布后还会购买啤酒。于是他便得出一个推理，尿布和啤酒存在某种关联。但是具体怎么来评判呢？\n\n那么，这里用的是**支持度**和**可信度**来评判!\n\n一个项集的支持度（support）被定义为数据集中包含该数据集的记录所占的比例。可信度或置信度（confidence）是正对一条关联规则来定义的，比如{尿布}->{啤酒}，这条规则的可信度定义为“支持度{尿布，啤酒}/支持度{尿布}”\n\n\n比如有规则X=>Y，它的**支持度**可以计算为包含XUY所有商品的交易量相对所有交易量的比例（也就是X和Y同时出现一次交易的概率）。**可信度**定义为包含XUY所有物品的交易量相对仅包含X的交易量的比值，也就是说可信度对应给定X时的条件概率。关联规则挖掘，其目的是自动发起这样的规则，同时计算这些规则的质量。\n\n计算公式如下：\n\n$$支持度=\\frac{交易量包含XUY}{交易量}$$\n\n$$可信度=\\frac{交易量包含XUY}{交易量包含X}$$\n\n支持度和可信度是用来量化关联分析是否成功的方法。关联分析的目的包括两个：发现频繁项集和发现关联规则。首先我们要找到频繁项集，然后根据频繁项集找出关联规则。下面使用apriori算法来发现频繁项集。\n\n### **2 Apriori理论**\n\n**算法的一般过程：**\n\n- 收集数据：使用任何方法\n- 准备数据：任意数据类型都可以，因为我们只保存集合\n- 分析数据：使用任何方法\n- 训练算法：使用Apriori算法来找到频繁项集\n- 测试算法：不需要测试过程\n- 使用算法：用于发现频繁项集以及物品之间的关联规则\n\n**使用Apriori算法，首先计算出单个元素的支持度，然后选出单个元素置信度大于我们要求的数值，比如0.5或是0.7等。然后增加单个元素组合的个数，只要组合项的支持度大于我们要求的数值就把它加到我们的频繁项集中，依次递归。**\n\n然后根据计算的支持度选出来的频繁项集来生成关联规则。\n\n### **3 Apriori实现**\n\n首先定义一些算法的辅助函数\n加载数据集的\n\n```\nfrom numpy import *\n\ndef loadDataSet():\n    list = [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]\n    return list\n```\n\n根据数据集构建集合C1，该集合是大小为1的所有候选集的集合。\n\n```\ndef createC1(dataSet):\n    C1 = [] #C1是大小为1的所有候选项集的集合\n    for transaction in dataSet:\n        for item in transaction:\n            if not [item] in C1:\n                C1.append([item])             \n    C1.sort()\n    return map(frozenset, C1)#use frozen set so we can use it as a key in a dict    \n```\n\n根据构建出来的频繁项集，选出满足我们需要的大于我们给定的支持度的项集\n\n```\n#D表示数据集，CK表示候选项集，minSupport表示最小的支持度，自己设定\ndef scanD(D, Ck, minSupport):\n    ssCnt = {}\n    for tid in D:\n        for can in Ck:\n            if can.issubset(tid):\n                if not ssCnt.has_key(can): ssCnt[can]=1\n                else: ssCnt[can] += 1\n    numItems = float(len(D))\n    retList = [] #存储满足最小支持度要求的项集\n    supportData = {} #每个项集的支持度字典\n    for key in ssCnt:  #计算所有项集的支持度\n        support = ssCnt[key]/numItems\n        if support >= minSupport:\n            retList.insert(0,key)\n        supportData[key] = support\n    return retList, supportData\n```\n\n#### **3.1 频繁项集**\n\n关于频繁项集的产生，我们单独的抽取出来\n首先需要一个生成合并项集的函数，将两个子集合并的函数\n\n```\n#LK是频繁项集列表，K表示接下来合并的项集中的单个想的个数{1,2,3}表示k=3\ndef aprioriGen(Lk, k): #creates Ck\n    retList = []\n    lenLk = len(Lk)\n    for i in range(lenLk):\n        for j in range(i+1, lenLk): \n            L1 = list(Lk[i])[:k-2]; L2 = list(Lk[j])[:k-2] #前k-2个项相同时，将两个集合合并\n            L1.sort(); L2.sort()\n            if L1==L2: #if first k-2 elements are equal\n                retList.append(Lk[i] | Lk[j]) #set union\n    return retList \n```\n\n\n接着定义生成频繁项集的函数\n\n```\n#只需要输入数据集和支持度即可\ndef apriori(dataSet, minSupport = 0.5):\n    C1 = createC1(dataSet)\n    D = map(set, dataSet)\n    L1, supportData = scanD(D, C1, minSupport)\n    L = [L1]\n    k = 2\n    while (len(L[k-2]) > 0):\n        Ck = aprioriGen(L[k-2], k)\n        Lk, supK = scanD(D, Ck, minSupport)#scan DB to get Lk\n        supportData.update(supK)\n        L.append(Lk)\n        k += 1\n    return L, supportData#返回频繁项集和每个项集的支持度值\n```\n\n\n#### **3.2 关联规则生成**\n\n通过频繁项集，我们可以得到相应的规则，但是具体规则怎么得出来的呢？下面给出一个规则生成函数，具体原理参考注释\n\n\n```\n#输入的参数分别为：频繁项集、支持度数据字典、自定义的最小支持度，返回的是可信度规则列表\ndef generateRules(L, supportData, minConf=0.7):  #支持度是通过scanD得到的字典\n    bigRuleList = []\n    for i in range(1, len(L)):#只去频繁项集中元素个数大于2的子集，如{1,2}{1,2,3}，不取{2}{3},etc...\n        for freqSet in L[i]:\n            H1 = [frozenset([item]) for item in freqSet]\n            if (i > 1):\n                rulesFromConseq(freqSet, H1, supportData, bigRuleList, minConf)\n            else:\n                calcConf(freqSet, H1, supportData, bigRuleList, minConf)\n    return bigRuleList         \n```\n\n下面定义一个用来计算置信度的函数，通过该函数抽取出符合我们要求的规则，如freqSet为{1,2}，H为{1}，{2}，可以计算出{1}-->{2}和{2}-->{1}的质心度，即下面的conf变量，然后用if语句判断是否符合我们的要求。代码如下：\n\n\n```\n#计算可信度，找到满足最小可信度的要求规则\ndef calcConf(freqSet, H, supportData, brl, minConf=0.7):\n    prunedH = [] #create new list to return\n    for conseq in H:\n        conf = supportData[freqSet]/supportData[freqSet-conseq] #calc confidence\n        if conf >= minConf: \n            print freqSet-conseq,'-->',conseq,'conf:',conf\n            brl.append((freqSet-conseq, conseq, conf))\n            prunedH.append(conseq)\n    return prunedH\n```\n\n下面的函数是用来合并子集的，比如我现在的频繁项集是{2,3,5},它的构造元素是{2},{3},{5}，所以需要将{2},{3},{5}两两合并然后再根据上面的calcConf函数计算置信度。代码如下：\n\n\n```\n#从最初的项集中生成更多的规则\ndef rulesFromConseq(freqSet, H, supportData, brl, minConf=0.7):\n    m = len(H[0])\n    if (len(freqSet) > (m + 1)): #进一步合并项集\n        Hmp1 = aprioriGen(H, m+1)#create Hm+1 new candidates\n        Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf)\n        if (len(Hmp1) > 1):    #need at least two sets to merge\n            rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf)\n```\n\n#### **3.3 测试**\n\n```\ndataSet = loadDataSet()\t\t\t \t#加载数据集\nL,suppoData = apriori(dataSet)\t\t#计算频繁项集\nrules = generateRules(L,suppoData,minConf=0.7) #抽取规则\n```\n\n\n得到的结果为：\n![这里写图片描述](http://img.blog.csdn.net/20150604094036589)\n\nL表示的是符合条件的频繁项集，rules表示最后抽取出来的符合条件的规则；还可以查看各个项集的支持度，如下所示。\n![这里写图片描述](http://img.blog.csdn.net/20150604094213762)\n\n\n### **Reference**\n\n[1]**《机器学习实战》**书籍第11章\n\n<br>\n\n------\n","slug":"2015-06-04-Apriori","published":1,"updated":"2015-11-19T07:50:44.432Z","photos":[],"link":"","_id":"cih8q8rrt002zr8ujp7rxbjo7"},{"layout":"post","title":"机器学习算法--K-means聚类","date":"2015-06-03T04:30:00.000Z","comments":1,"_content":"\n**引文：** k均值算法是一种聚类算法，所谓聚类，他是一种无监督学习，将相似的对象归到同一个蔟中。蔟内的对象越相似，聚类的效果越好。聚类和分类最大的不同在于，分类的目标事先已知，而聚类则不一样。因为其产生的结果和分类相同，而只是类别没有预先定义。\n\n<!-- more -->\n\n**算法的目的：** 使各个样本与所在类均值的**误差平方和达到最小**（这也是评价K-means算法最后聚类效果的评价标准）\n\n<center>**K-均值聚类**</center>\n\n- 优点：容易实现\n- 缺点：可能收敛到局部最小值，在大规模数据上收敛较慢\n- 适合数据类型：数值型数据\n\n### **伪代码**\n\n```python\n#创建k个点作为起始质心（经常随机选择）\n#当任意一个点的蔟分配结果发生变化时\n\t#对数据集中的每个数据点\n\t\t#对每个质心\n\t\t\t#计算质心到数据点之间的距离\n\t\t#将数据点分配到距其最近的蔟\n\t#对每个蔟，计算蔟中所有点的均值并将均值作为质心\n```\n\n### **代码实现**\n\n因为我们用到的是数值类型的数据，这里编写一个加载数据集的函数，返回值是一个矩阵形式。\n下面代码应写在一个py文件里，我这里写在kMeans.py文件中。\n\n文件的头部引入numpy\n```\nfrom numpy import *\n```\n**数据集加载代码**\n\n```\n# 加载数据集文件，没有返回类标号的函数\ndef loadDataSet(fileName):\n    dataMat = []\n    openfile = open(fileName)    \n    for line in openfile.readlines():\n        curLine = line.strip().split('\\t')\n        floatLine = map(float,curLine)\n        dataMat.append(floatLine)\n    return dataMat\n```\n\n因为在k均值算法中要计算点到质心的距离，所以这里将距离计算写成一个函数，计算欧几里得距离公式：\n\n$$d=\\sqrt{(x_2-x_1)^2+...+(z_2-z_1)^2}$$\n\n**函数代码如下：**\n\n```\n# 计算两个向量的欧氏距离\ndef distEclud(vecA,vecB):\n    return sqrt(sum(power(vecA-vecB,2)))\n```\n\n**接下来初始化k个蔟的质心函数centroid**\n\n\n```\n# 传入的数据时numpy的矩阵格式\ndef randCent(dataMat, k):\n    n = shape(dataMat)[1]\n    centroids = mat(zeros((k,n)))  \n    for j in range(n):\n        minJ = min(dataMat[:,j]) # 找出矩阵dataMat第j列最小值\n        rangeJ = float(max(dataMat[:,j]) - minJ) #计算第j列最大值和最小值的差\n        #赋予一个随机质心，它的值在整个数据集的边界之内\n        centroids[:,j] = minJ + rangeJ * random.rand(k,1) \n    return centroids #返回一个随机的质心矩阵\n```\n\n**K-means算法**\n\n```\n#k-均值算法\ndef kMeans(dataMat,k,distE = distEclud , createCent=randCent):\n    m = shape(dataMat)[0]    # 获得行数m\n    clusterAssment = mat(zeros((m,2))) # 初试化一个矩阵，用来记录簇索引和存储误差                               \n    centroids = createCent(dataMat,k) # 随机的得到一个质心矩阵蔟\n    clusterChanged = True\n    while clusterChanged:\n        clusterChanged = False\n        for i in range(m):    #对每个数据点寻找最近的质心\n            minDist = inf; minIndex = -1\n            for j in range(k): # 遍历质心蔟，寻找最近的质心    \n                distJ1 = distE(centroids[j,:],dataMat[i,:]) #计算数据点和质心的欧式距离\n                if distJ1 < minDist: \n                    minDist = distJ1; minIndex = j\n            if clusterAssment[i,0] != minIndex:\n                clusterChanged = True\n            clusterAssment[i,:] = minIndex,minDist**2\n        print centroids\n        for cent in range(k):    #更新质心的位置\n            ptsInClust = dataMat[nonzero(clusterAssment[:,0].A==cent)[0]]    \n            centroids[cent,:] = mean(ptsInClust, axis=0) \n    return centroids, clusterAssment\n```\n\n**测试：**\n\n```\ndataMat = mat(loadDataSet('testSet.txt'))\nkMeans(dataMat,4)\n```\n\n**输出结果：**\n\n===================\n\n[[-3.66087851  2.30869657]\n [ 3.24377288  3.04700412]\n [ 2.52577861 -3.12485493]\n [-2.79672694  3.19201596]]\n[[-3.78710372 -1.66790611]\n [ 2.6265299   3.10868015]\n [ 1.62908469 -2.92689085]\n [-2.18799937  3.01824781]]\n[[-3.53973889 -2.89384326]\n [ 2.6265299   3.10868015]\n [ 2.65077367 -2.79019029]\n [-2.46154315  2.78737555]]\n\n===================\n\n上面的结果给出了四个质心。可以看出，经过3次迭代之后K-均值算法收敛。质心会保存在第一个返回值中，第二个是每个点的簇分布情况。\n\n**附件：**\n\n上面测试的数据集为：\n\n<pre><code class=\"markdown\">\n1.658985\t4.285136\n-3.453687\t3.424321\n4.838138\t-1.151539\n-5.379713\t-3.362104\n0.972564\t2.924086\n-3.567919\t1.531611\n0.450614\t-3.302219\n-3.487105\t-1.724432\n2.668759\t1.594842\n-3.156485\t3.191137\n3.165506\t-3.999838\n-2.786837\t-3.099354\n4.208187\t2.984927\n-2.123337\t2.943366\n0.704199\t-0.479481\n-0.392370\t-3.963704\n2.831667\t1.574018\n-0.790153\t3.343144\n2.943496\t-3.357075\n-3.195883\t-2.283926\n2.336445\t2.875106\n-1.786345\t2.554248\n2.190101\t-1.906020\n-3.403367\t-2.778288\n1.778124\t3.880832\n-1.688346\t2.230267\n2.592976\t-2.054368\n-4.007257\t-3.207066\n2.257734\t3.387564\n-2.679011\t0.785119\n0.939512\t-4.023563\n-3.674424\t-2.261084\n2.046259\t2.735279\n-3.189470\t1.780269\n4.372646\t-0.822248\n-2.579316\t-3.497576\n1.889034\t5.190400\n-0.798747\t2.185588\n2.836520\t-2.658556\n-3.837877\t-3.253815\n2.096701\t3.886007\n-2.709034\t2.923887\n3.367037\t-3.184789\n-2.121479\t-4.232586\n2.329546\t3.179764\n-3.284816\t3.273099\n3.091414\t-3.815232\n-3.762093\t-2.432191\n3.542056\t2.778832\n-1.736822\t4.241041\n2.127073\t-2.983680\n-4.323818\t-3.938116\n3.792121\t5.135768\n-4.786473\t3.358547\n2.624081\t-3.260715\n-4.009299\t-2.978115\n2.493525\t1.963710\n-2.513661\t2.642162\n1.864375\t-3.176309\n-3.171184\t-3.572452\n2.894220\t2.489128\n-2.562539\t2.884438\n3.491078\t-3.947487\n-2.565729\t-2.012114\n3.332948\t3.983102\n-1.616805\t3.573188\n2.280615\t-2.559444\n-2.651229\t-3.103198\n2.321395\t3.154987\n-1.685703\t2.939697\n3.031012\t-3.620252\n-4.599622\t-2.185829\n4.196223\t1.126677\n-2.133863\t3.093686\n4.668892\t-2.562705\n-2.793241\t-2.149706\n2.884105\t3.043438\n-2.967647\t2.848696\n4.479332\t-1.764772\n-4.905566\t-2.911070\n\n</code></pre>\n\n---","source":"_posts/2015-06-03-K-means.md","raw":"---\nlayout: post\ntitle: \"机器学习算法--K-means聚类\"\ndate: 2015-06-03 12:30\ntags: \n\t- Machine Learning\ncomments: true\nexcerpt: 引文： k均值算法是一种聚类算法，所谓聚类，他是一种无监督学习，将相似的对象归到同一个蔟中。蔟内的对象越相似，聚类的效果越好。聚类和分类最大的不同在于，分类的目标事先已知，而聚类则不一样。因为其产生的结果和分类相同，而只是类别没有预先定义。算法的目的： 使各个样本与所在类均值的误差平方和达到最小（这也是评价K-means算法最后聚类效果的评价标准）K-均值聚类\ncategories: ML\n---\n\n**引文：** k均值算法是一种聚类算法，所谓聚类，他是一种无监督学习，将相似的对象归到同一个蔟中。蔟内的对象越相似，聚类的效果越好。聚类和分类最大的不同在于，分类的目标事先已知，而聚类则不一样。因为其产生的结果和分类相同，而只是类别没有预先定义。\n\n<!-- more -->\n\n**算法的目的：** 使各个样本与所在类均值的**误差平方和达到最小**（这也是评价K-means算法最后聚类效果的评价标准）\n\n<center>**K-均值聚类**</center>\n\n- 优点：容易实现\n- 缺点：可能收敛到局部最小值，在大规模数据上收敛较慢\n- 适合数据类型：数值型数据\n\n### **伪代码**\n\n```python\n#创建k个点作为起始质心（经常随机选择）\n#当任意一个点的蔟分配结果发生变化时\n\t#对数据集中的每个数据点\n\t\t#对每个质心\n\t\t\t#计算质心到数据点之间的距离\n\t\t#将数据点分配到距其最近的蔟\n\t#对每个蔟，计算蔟中所有点的均值并将均值作为质心\n```\n\n### **代码实现**\n\n因为我们用到的是数值类型的数据，这里编写一个加载数据集的函数，返回值是一个矩阵形式。\n下面代码应写在一个py文件里，我这里写在kMeans.py文件中。\n\n文件的头部引入numpy\n```\nfrom numpy import *\n```\n**数据集加载代码**\n\n```\n# 加载数据集文件，没有返回类标号的函数\ndef loadDataSet(fileName):\n    dataMat = []\n    openfile = open(fileName)    \n    for line in openfile.readlines():\n        curLine = line.strip().split('\\t')\n        floatLine = map(float,curLine)\n        dataMat.append(floatLine)\n    return dataMat\n```\n\n因为在k均值算法中要计算点到质心的距离，所以这里将距离计算写成一个函数，计算欧几里得距离公式：\n\n$$d=\\sqrt{(x_2-x_1)^2+...+(z_2-z_1)^2}$$\n\n**函数代码如下：**\n\n```\n# 计算两个向量的欧氏距离\ndef distEclud(vecA,vecB):\n    return sqrt(sum(power(vecA-vecB,2)))\n```\n\n**接下来初始化k个蔟的质心函数centroid**\n\n\n```\n# 传入的数据时numpy的矩阵格式\ndef randCent(dataMat, k):\n    n = shape(dataMat)[1]\n    centroids = mat(zeros((k,n)))  \n    for j in range(n):\n        minJ = min(dataMat[:,j]) # 找出矩阵dataMat第j列最小值\n        rangeJ = float(max(dataMat[:,j]) - minJ) #计算第j列最大值和最小值的差\n        #赋予一个随机质心，它的值在整个数据集的边界之内\n        centroids[:,j] = minJ + rangeJ * random.rand(k,1) \n    return centroids #返回一个随机的质心矩阵\n```\n\n**K-means算法**\n\n```\n#k-均值算法\ndef kMeans(dataMat,k,distE = distEclud , createCent=randCent):\n    m = shape(dataMat)[0]    # 获得行数m\n    clusterAssment = mat(zeros((m,2))) # 初试化一个矩阵，用来记录簇索引和存储误差                               \n    centroids = createCent(dataMat,k) # 随机的得到一个质心矩阵蔟\n    clusterChanged = True\n    while clusterChanged:\n        clusterChanged = False\n        for i in range(m):    #对每个数据点寻找最近的质心\n            minDist = inf; minIndex = -1\n            for j in range(k): # 遍历质心蔟，寻找最近的质心    \n                distJ1 = distE(centroids[j,:],dataMat[i,:]) #计算数据点和质心的欧式距离\n                if distJ1 < minDist: \n                    minDist = distJ1; minIndex = j\n            if clusterAssment[i,0] != minIndex:\n                clusterChanged = True\n            clusterAssment[i,:] = minIndex,minDist**2\n        print centroids\n        for cent in range(k):    #更新质心的位置\n            ptsInClust = dataMat[nonzero(clusterAssment[:,0].A==cent)[0]]    \n            centroids[cent,:] = mean(ptsInClust, axis=0) \n    return centroids, clusterAssment\n```\n\n**测试：**\n\n```\ndataMat = mat(loadDataSet('testSet.txt'))\nkMeans(dataMat,4)\n```\n\n**输出结果：**\n\n===================\n\n[[-3.66087851  2.30869657]\n [ 3.24377288  3.04700412]\n [ 2.52577861 -3.12485493]\n [-2.79672694  3.19201596]]\n[[-3.78710372 -1.66790611]\n [ 2.6265299   3.10868015]\n [ 1.62908469 -2.92689085]\n [-2.18799937  3.01824781]]\n[[-3.53973889 -2.89384326]\n [ 2.6265299   3.10868015]\n [ 2.65077367 -2.79019029]\n [-2.46154315  2.78737555]]\n\n===================\n\n上面的结果给出了四个质心。可以看出，经过3次迭代之后K-均值算法收敛。质心会保存在第一个返回值中，第二个是每个点的簇分布情况。\n\n**附件：**\n\n上面测试的数据集为：\n\n<pre><code class=\"markdown\">\n1.658985\t4.285136\n-3.453687\t3.424321\n4.838138\t-1.151539\n-5.379713\t-3.362104\n0.972564\t2.924086\n-3.567919\t1.531611\n0.450614\t-3.302219\n-3.487105\t-1.724432\n2.668759\t1.594842\n-3.156485\t3.191137\n3.165506\t-3.999838\n-2.786837\t-3.099354\n4.208187\t2.984927\n-2.123337\t2.943366\n0.704199\t-0.479481\n-0.392370\t-3.963704\n2.831667\t1.574018\n-0.790153\t3.343144\n2.943496\t-3.357075\n-3.195883\t-2.283926\n2.336445\t2.875106\n-1.786345\t2.554248\n2.190101\t-1.906020\n-3.403367\t-2.778288\n1.778124\t3.880832\n-1.688346\t2.230267\n2.592976\t-2.054368\n-4.007257\t-3.207066\n2.257734\t3.387564\n-2.679011\t0.785119\n0.939512\t-4.023563\n-3.674424\t-2.261084\n2.046259\t2.735279\n-3.189470\t1.780269\n4.372646\t-0.822248\n-2.579316\t-3.497576\n1.889034\t5.190400\n-0.798747\t2.185588\n2.836520\t-2.658556\n-3.837877\t-3.253815\n2.096701\t3.886007\n-2.709034\t2.923887\n3.367037\t-3.184789\n-2.121479\t-4.232586\n2.329546\t3.179764\n-3.284816\t3.273099\n3.091414\t-3.815232\n-3.762093\t-2.432191\n3.542056\t2.778832\n-1.736822\t4.241041\n2.127073\t-2.983680\n-4.323818\t-3.938116\n3.792121\t5.135768\n-4.786473\t3.358547\n2.624081\t-3.260715\n-4.009299\t-2.978115\n2.493525\t1.963710\n-2.513661\t2.642162\n1.864375\t-3.176309\n-3.171184\t-3.572452\n2.894220\t2.489128\n-2.562539\t2.884438\n3.491078\t-3.947487\n-2.565729\t-2.012114\n3.332948\t3.983102\n-1.616805\t3.573188\n2.280615\t-2.559444\n-2.651229\t-3.103198\n2.321395\t3.154987\n-1.685703\t2.939697\n3.031012\t-3.620252\n-4.599622\t-2.185829\n4.196223\t1.126677\n-2.133863\t3.093686\n4.668892\t-2.562705\n-2.793241\t-2.149706\n2.884105\t3.043438\n-2.967647\t2.848696\n4.479332\t-1.764772\n-4.905566\t-2.911070\n\n</code></pre>\n\n---","slug":"2015-06-03-K-means","published":1,"updated":"2015-11-19T07:50:44.431Z","photos":[],"link":"","_id":"cih8q8rs00032r8ujzif45lo8"},{"layout":"post","title":"sklearn训练模型的保存与恢复（Python）","date":"2015-05-31T12:52:00.000Z","_content":"\n\n## 描述\n\n在做模型训练的时候，尤其是在训练集上做交叉验证，通常想要将模型保存下来，然后放到独立的测试集上测试，下面介绍的是Python中训练模型的保存和再使用。\n\nscikit-learn已经有了模型持久化的操作，导入joblib即可\n\n```\nfrom sklearn.externals import joblib\n```\n<!-- more -->\n\n---\n\n### **模型保存**\n\n```python\n>>> os.chdir(\"workspace/model_save\")\n>>> from sklearn import svm\n>>> X = [[0, 0], [1, 1]]\n>>> y = [0, 1]\n>>> clf = svm.SVC()\n>>> clf.fit(X, y)  \n>>> clf.fit(train_X,train_y)\n>>> joblib.dump(clf, \"train_model.m\")\n```\n\n通过joblib的dump可以将模型保存到本地，clf是训练的分类器\n\n### **模型从本地调回**\n\n```python\n>>> clf = joblib.load(\"train_model.m\")\n```\n\n通过joblib的load方法，加载保存的模型。\n\n然后就可以在测试集上测试了\n\n```\nclf.predit(test_X，test_y)\n```\n\n\n\n---\n\n<br>\n\n\n\n","source":"_posts/2015-05-31 scikit-learn training model's save and reused.md","raw":"---\nlayout: post\ntitle: \"sklearn训练模型的保存与恢复（Python）\"\ndate: 2015-05-31 20:52\ncategories: Python\ntag: \n\t- scikit-learn\n\t- Python\n---\n\n\n## 描述\n\n在做模型训练的时候，尤其是在训练集上做交叉验证，通常想要将模型保存下来，然后放到独立的测试集上测试，下面介绍的是Python中训练模型的保存和再使用。\n\nscikit-learn已经有了模型持久化的操作，导入joblib即可\n\n```\nfrom sklearn.externals import joblib\n```\n<!-- more -->\n\n---\n\n### **模型保存**\n\n```python\n>>> os.chdir(\"workspace/model_save\")\n>>> from sklearn import svm\n>>> X = [[0, 0], [1, 1]]\n>>> y = [0, 1]\n>>> clf = svm.SVC()\n>>> clf.fit(X, y)  \n>>> clf.fit(train_X,train_y)\n>>> joblib.dump(clf, \"train_model.m\")\n```\n\n通过joblib的dump可以将模型保存到本地，clf是训练的分类器\n\n### **模型从本地调回**\n\n```python\n>>> clf = joblib.load(\"train_model.m\")\n```\n\n通过joblib的load方法，加载保存的模型。\n\n然后就可以在测试集上测试了\n\n```\nclf.predit(test_X，test_y)\n```\n\n\n\n---\n\n<br>\n\n\n\n","slug":"2015-05-31 scikit-learn training model's save and reused","published":1,"updated":"2015-11-19T07:50:44.431Z","comments":1,"photos":[],"link":"","_id":"cih8q8rs40035r8uj0kkapms0"},{"layout":"post","title":"机器学习算法-朴素贝叶斯Python实现","date":"2015-05-28T04:59:00.000Z","comments":1,"_content":"\n**引文：**前面提到的K最近邻算法和决策树算法，数据实例最终被明确的划分到某个分类中，下面介绍一种不能完全确定数据实例应该划分到哪个类别，或者说只能给数据实例属于给定分类的概率。\n\n<!-- more -->\n\n### **基于贝叶斯决策理论的分类方法之朴素贝叶斯**\n\n- 优点：在数据较少的情况下仍然有效，可以处理多类别问题\n- 缺点：对于输入数据的准备方式较为敏感 \n- 适用数据类型：标称型数据。\n\n### **朴素贝叶斯的一般过程**\n\n- 收集数据：可以使用任何方式\n- 准备数据：需要数据型或是布尔型数据\n- 分类数据：有大量特征时，绘制特征作用不大，此时使用直方图效果更好\n- 训练算法：计算不同的独立特征的条件概率\n- 测试算法：计算错误率\n- 使用算法：文档分类\n\n### **原理**\n\n主要是运用**贝叶斯定理**\n\n$$ P(H|X) = \\dfrac{P(X|H) p(H)}{P(X)} $$\n\n### **算法实现**\n\n下面做一个简单的留言板分类，自动判别留言类别：侮辱类和非侮辱类，分别使用1和0表示。下面来做一下这个实验。以下函数全部写在一个叫bayes.py文件中，后面的实验室通过导入bayes.py，调用里面的函数来做的。\n\n导入numpy包\n\n```python\nfrom numpy import *\n```\n\n#### **1.加载数据集**\n\n```python\ndef loadDataSet():\n    postingList=[['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],\n                 ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],\n                 ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],\n                 ['stop', 'posting', 'stupid', 'worthless', 'garbage'],\n                 ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],\n                 ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]\n    classVec = [0,1,0,1,0,1]    #1 is abusive, 0 not\n    return postingList,classVec      \n```\n\n该函数返回的是**词条切分集合**和**类标签**。\n\n####**2.根据样本创建一个词库**\n\n下面的函数是根据上面给出来的样本数据所创建出来的一个词库。\n\n```python\ndef createVocabList(dataSet):\n    vocabSet = set([])  #create empty set\n    for document in dataSet:\n        vocabSet = vocabSet | set(document) #union of the two sets\n    return list(vocabSet)\n```\n\n#### **3.统计每个样本在词库中的出现情况**\n\n下面的函数功能是把单个样本映射到词库中去，统计单个样本在词库中的出现情况，1表示出现过，0表示没有出现，函数如下：\n\n```\ndef setOfWords2Vec(vocabList, inputSet):\n    returnVec = [0]*len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] = 1\n        else: print \"the word: %s is not in my Vocabulary!\" % word\n    return returnVec\n```\n\n#### **4.计算条件概率和类标签概率**\n\n```\ndef trainNB0(trainMatrix,trainCategory):\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    pAbusive = sum(trainCategory)/float(numTrainDocs) #计算某个类发生的概率\n    p0Num = ones(numWords); p1Num = ones(numWords) #初始样本个数为1，防止条件概率为0，影响结果       \n    p0Denom = 2.0; p1Denom = 2.0  #作用同上                      \n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Num += trainMatrix[i]\n            p1Denom += sum(trainMatrix[i])\n        else:\n            p0Num += trainMatrix[i]\n            p0Denom += sum(trainMatrix[i])\n    p1Vect = log(p1Num/p1Denom)         #计算类标签为1时的其它属性发生的条件概率\n    p0Vect = log(p0Num/p0Denom)         #计算标签为0时的其它属性发生的条件概率\n    return p0Vect,p1Vect,pAbusive       #返回条件概率和类标签为1的概率\n```\n\n说明：\n\n#### **5.训练贝叶斯分类算法**\n\n该算法包含四个输入，vec2Classify表示待分类的样本在词库中的映射集合，p0Vec表示条件概率$P(w_i|c=0)$，p1Vec表示条件概率$P(w_i|c=1)$，pClass1表示类标签为1时的概率$P(c=1)$。\n\n```\ndef classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):\n    p1 = sum(vec2Classify * p1Vec) + log(pClass1)    #element-wise mult\n    p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1)\n    if p1 > p0:\n        return 1\n    else: \n        return 0\n```\n\n其中p1和p0表示的是\n\n$$lnp(w_1|c=1)p(w_2|c=1)...p(w_n|c=1)*p(c=1)$$\n\n和\n\n$$lnp(w_1|c=0)p(w_2|c=0)...p(w_n|c=0)*p(c=0)$$\n\n取对数是因为防止p(w_1|c=1)p(w_2|c=1)p(w_3|c=1)...p(w_n|c=1)多个小于1的数相乘结果值下溢。\n\n#### **6.文档词袋模型,修改函数setOfWords2Vec**\n\n词袋模型主要修改上面的第三个步骤，因为有的词可能出现多次，所以在单个样本映射到词库的时候需要多次统计。\n\n```\ndef bagOfWords2VecMN(vocabList, inputSet):\n    returnVec = [0]*len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] += 1\n    return returnVec\n```\n\n\n#### **7.测试函数**\n\n下面给出一个测试函数，直接调用该测试函数就可以实现简单的分类，测试结果看下个部分。\n\n```\ndef testingNB():\n\t#step1：加载数据集和类标号\n    listOPosts,listClasses = loadDataSet()\n    #step2：创建词库\n    myVocabList = createVocabList(listOPosts)\n    # step3：计算每个样本在词库中的出现情况\n    trainMat=[]\n    for postinDoc in listOPosts:\n        trainMat.append(setOfWords2Vec(myVocabList, postinDoc))\n    #step4：调用第四步函数，计算条件概率\n    p0V,p1V,pAb = trainNB0(array(trainMat),array(listClasses))\n    # step5\n    # 测试1 \n    testEntry = ['love', 'my', 'dalmation']\n    thisDoc = array(setOfWords2Vec(myVocabList, testEntry))\n    print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb)\n    # 测试2\n    testEntry = ['stupid', 'garbage']\n    thisDoc = array(setOfWords2Vec(myVocabList, testEntry))\n    print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb)\n```\n\n#### **8.实验**\n\n首先导入库，然后导入bayes.py文件\n\n```\nimport os\nos.chdir(r\"E:\\3-CSU\\Academic\\Machine Leaning\\机器学习实战\\src\\machinelearninginaction\\Ch04\")\nimport bayes\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20150528122404620)\n\n可以看出，贝叶斯算法将['love', 'my', 'dalmation']分为“无侮辱”一类，将['stupid', 'garbage']分为“侮辱”性质的一类。\n\n\n\n### **Reference**\n\n**[1]《Machine Learning in Action 》机器学习实战**\n\n\n\n------\n\n","source":"_posts/2015-05-28-NB.md","raw":"---\nlayout: post\ntitle: \"机器学习算法-朴素贝叶斯Python实现\"\ndate: 2015-05-28 12:59\ntags: \n\t- Machine Learning\n\t- Python\ncomments: true\ncategories: ML\n---\n\n**引文：**前面提到的K最近邻算法和决策树算法，数据实例最终被明确的划分到某个分类中，下面介绍一种不能完全确定数据实例应该划分到哪个类别，或者说只能给数据实例属于给定分类的概率。\n\n<!-- more -->\n\n### **基于贝叶斯决策理论的分类方法之朴素贝叶斯**\n\n- 优点：在数据较少的情况下仍然有效，可以处理多类别问题\n- 缺点：对于输入数据的准备方式较为敏感 \n- 适用数据类型：标称型数据。\n\n### **朴素贝叶斯的一般过程**\n\n- 收集数据：可以使用任何方式\n- 准备数据：需要数据型或是布尔型数据\n- 分类数据：有大量特征时，绘制特征作用不大，此时使用直方图效果更好\n- 训练算法：计算不同的独立特征的条件概率\n- 测试算法：计算错误率\n- 使用算法：文档分类\n\n### **原理**\n\n主要是运用**贝叶斯定理**\n\n$$ P(H|X) = \\dfrac{P(X|H) p(H)}{P(X)} $$\n\n### **算法实现**\n\n下面做一个简单的留言板分类，自动判别留言类别：侮辱类和非侮辱类，分别使用1和0表示。下面来做一下这个实验。以下函数全部写在一个叫bayes.py文件中，后面的实验室通过导入bayes.py，调用里面的函数来做的。\n\n导入numpy包\n\n```python\nfrom numpy import *\n```\n\n#### **1.加载数据集**\n\n```python\ndef loadDataSet():\n    postingList=[['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],\n                 ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],\n                 ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],\n                 ['stop', 'posting', 'stupid', 'worthless', 'garbage'],\n                 ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],\n                 ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]\n    classVec = [0,1,0,1,0,1]    #1 is abusive, 0 not\n    return postingList,classVec      \n```\n\n该函数返回的是**词条切分集合**和**类标签**。\n\n####**2.根据样本创建一个词库**\n\n下面的函数是根据上面给出来的样本数据所创建出来的一个词库。\n\n```python\ndef createVocabList(dataSet):\n    vocabSet = set([])  #create empty set\n    for document in dataSet:\n        vocabSet = vocabSet | set(document) #union of the two sets\n    return list(vocabSet)\n```\n\n#### **3.统计每个样本在词库中的出现情况**\n\n下面的函数功能是把单个样本映射到词库中去，统计单个样本在词库中的出现情况，1表示出现过，0表示没有出现，函数如下：\n\n```\ndef setOfWords2Vec(vocabList, inputSet):\n    returnVec = [0]*len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] = 1\n        else: print \"the word: %s is not in my Vocabulary!\" % word\n    return returnVec\n```\n\n#### **4.计算条件概率和类标签概率**\n\n```\ndef trainNB0(trainMatrix,trainCategory):\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    pAbusive = sum(trainCategory)/float(numTrainDocs) #计算某个类发生的概率\n    p0Num = ones(numWords); p1Num = ones(numWords) #初始样本个数为1，防止条件概率为0，影响结果       \n    p0Denom = 2.0; p1Denom = 2.0  #作用同上                      \n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Num += trainMatrix[i]\n            p1Denom += sum(trainMatrix[i])\n        else:\n            p0Num += trainMatrix[i]\n            p0Denom += sum(trainMatrix[i])\n    p1Vect = log(p1Num/p1Denom)         #计算类标签为1时的其它属性发生的条件概率\n    p0Vect = log(p0Num/p0Denom)         #计算标签为0时的其它属性发生的条件概率\n    return p0Vect,p1Vect,pAbusive       #返回条件概率和类标签为1的概率\n```\n\n说明：\n\n#### **5.训练贝叶斯分类算法**\n\n该算法包含四个输入，vec2Classify表示待分类的样本在词库中的映射集合，p0Vec表示条件概率$P(w_i|c=0)$，p1Vec表示条件概率$P(w_i|c=1)$，pClass1表示类标签为1时的概率$P(c=1)$。\n\n```\ndef classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):\n    p1 = sum(vec2Classify * p1Vec) + log(pClass1)    #element-wise mult\n    p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1)\n    if p1 > p0:\n        return 1\n    else: \n        return 0\n```\n\n其中p1和p0表示的是\n\n$$lnp(w_1|c=1)p(w_2|c=1)...p(w_n|c=1)*p(c=1)$$\n\n和\n\n$$lnp(w_1|c=0)p(w_2|c=0)...p(w_n|c=0)*p(c=0)$$\n\n取对数是因为防止p(w_1|c=1)p(w_2|c=1)p(w_3|c=1)...p(w_n|c=1)多个小于1的数相乘结果值下溢。\n\n#### **6.文档词袋模型,修改函数setOfWords2Vec**\n\n词袋模型主要修改上面的第三个步骤，因为有的词可能出现多次，所以在单个样本映射到词库的时候需要多次统计。\n\n```\ndef bagOfWords2VecMN(vocabList, inputSet):\n    returnVec = [0]*len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] += 1\n    return returnVec\n```\n\n\n#### **7.测试函数**\n\n下面给出一个测试函数，直接调用该测试函数就可以实现简单的分类，测试结果看下个部分。\n\n```\ndef testingNB():\n\t#step1：加载数据集和类标号\n    listOPosts,listClasses = loadDataSet()\n    #step2：创建词库\n    myVocabList = createVocabList(listOPosts)\n    # step3：计算每个样本在词库中的出现情况\n    trainMat=[]\n    for postinDoc in listOPosts:\n        trainMat.append(setOfWords2Vec(myVocabList, postinDoc))\n    #step4：调用第四步函数，计算条件概率\n    p0V,p1V,pAb = trainNB0(array(trainMat),array(listClasses))\n    # step5\n    # 测试1 \n    testEntry = ['love', 'my', 'dalmation']\n    thisDoc = array(setOfWords2Vec(myVocabList, testEntry))\n    print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb)\n    # 测试2\n    testEntry = ['stupid', 'garbage']\n    thisDoc = array(setOfWords2Vec(myVocabList, testEntry))\n    print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb)\n```\n\n#### **8.实验**\n\n首先导入库，然后导入bayes.py文件\n\n```\nimport os\nos.chdir(r\"E:\\3-CSU\\Academic\\Machine Leaning\\机器学习实战\\src\\machinelearninginaction\\Ch04\")\nimport bayes\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20150528122404620)\n\n可以看出，贝叶斯算法将['love', 'my', 'dalmation']分为“无侮辱”一类，将['stupid', 'garbage']分为“侮辱”性质的一类。\n\n\n\n### **Reference**\n\n**[1]《Machine Learning in Action 》机器学习实战**\n\n\n\n------\n\n","slug":"2015-05-28-NB","published":1,"updated":"2015-11-19T07:50:44.430Z","photos":[],"link":"","_id":"cih8q8rsf003ar8ujnfk3mcvp"},{"layout":"post","title":"机器学习算法-K最近邻从原理到实现","date":"2015-05-21T12:34:00.000Z","comments":1,"_content":"\n**引文**：决策树和基于规则的分类器都是**积极学习方法**（eager learner）的例子，因为一旦训练数据可用，他们就开始学习从输入属性到类标号的映射模型。一个相反的策略是推迟对训练数据的建模，直到需要分类测试样例时再进行。采用这种策略的技术被称为**消极学习法**（lazy learner）。**最近邻分类器**就是这样的一种方法。\n\n<!-- more -->\n\n### **1.K最近邻分类器原理**\n\n首先给出一张图，根据这张图来理解最近邻分类器，如下：\n\n<center>![这里写图片描述](http://img.blog.csdn.net/20150521201557111)\n</center>\n\n根据上图所示，有两类不同的样本数据，分别用**蓝色的小正方形**和**红色的小三角形**表示，而图正中间的那个**绿色的圆**所标示的数据则是待分类的数据。也就是说，现在， 我们不知道中间那个绿色的数据是从属于哪一类（蓝色小正方形or红色小三角形），下面，我们就要解决这个问题：给这个绿色的圆分类。\n\n　　我们常说，物以类聚，人以群分，判别一个人是一个什么样品质特征的人，常常可以从他or她身边的朋友入手，所谓观其友，而识其人。我们不是要判别上图中那个绿色的圆是属于哪一类数据么，好说，从它的邻居下手。但一次性看多少个邻居呢？从上图中，你还能看到：\n\n- 如果K=3，绿色圆点的最近的3个邻居是2个红色小三角形和1个蓝色小正方形，少数从属于多数，基于统计的方法，判定绿色的这个待分类点属于红色的三角形一类。\n- 如果K=5，绿色圆点的最近的5个邻居是2个红色三角形和3个蓝色的正方形，还是少数从属于多数，基于统计的方法，判定绿色的这个待分类点属于蓝色的正方形一类。\n\n于此我们看到，当无法判定当前待分类点是从属于已知分类中的哪一类时，我们可以依据统计学的理论看它所处的位置特征，衡量它周围邻居的权重，而把它归为(或分配)到权重更大的那一类。这就是K近邻算法的核心思想。\n\nKNN算法中，所选择的邻居都是已经正确分类的对象。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。\n\nKNN 算法本身简单有效，它是一种 lazy-learning 算法，分类器不需要使用训练集进行训练，训练时间复杂度为0。KNN 分类的计算复杂度和训练集中的文档数目成正比，也就是说，如果训练集中文档总数为 n，那么 KNN 的分类时间复杂度为O(n)。\n\n前面的例子中强调了选择合适的K值的重要性。如果太小，则最近邻分类器容易受到训练数据的噪声而产生的过分拟合的影响；相反，如果K太大，最近分类器可能会误会分类测试样例，因为最近邻列表中可能包含远离其近邻的数据点。（如下图所示）\n\n<center>![这里写图片描述](http://img.blog.csdn.net/20150521203027253) \n\n**K较大时的最近邻分类**\n\n</center>\n\n\n可见，K值的选取还是非常关键。\n\n--------------\n\n\n### **2.算法**\n\n算法步骤如下所示：\n\n<center>![这里写图片描述](http://img.blog.csdn.net/20150521203212596)</center>\n\n对每个测试样例$z = (x',y')$，算法计算它和所有训练样例$（x,y）属于D$之间的距离（或相似度），以确定其最近邻列表$D_z$。如果训练样例的数目很大，那么这种计算的开销就会很大。不过，可以使索引技术降低为测试样例找最近邻是的计算量。\n\n一旦得到最近邻列表，测试样例就可以根据最近邻的多数类进行分类，使用多数表决方法。\n\n\n--------------\n\n### **3.K最邻近算法实现（Python）**\nKNN.py\n\n```python\nfrom numpy import *\nimport operator\n\nclass KNN:\n    def createDataset(self):\n        group = array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])\n        labels = ['A','A','B','B']\n        return group,labels\n\n    def KnnClassify(self,testX,trainX,labels,K):\n        [N,M]=trainX.shape\n    \n    #calculate the distance between testX and other training samples\n        difference = tile(testX,(N,1)) - trainX # tile for array and repeat for matrix in Python, == repmat in Matlab\n        difference = difference ** 2 # take pow(difference,2)\n        distance = difference.sum(1) # take the sum of difference from all dimensions\n        distance = distance ** 0.5\n        sortdiffidx = distance.argsort()\n    \n    # find the k nearest neighbours\n        vote = {} #create the dictionary\n        for i in range(K):\n            ith_label = labels[sortdiffidx[i]];\n            vote[ith_label] = vote.get(ith_label,0)+1 #get(ith_label,0) : if dictionary 'vote' exist key 'ith_label', return vote[ith_label]; else return 0\n        sortedvote = sorted(vote.iteritems(),key = lambda x:x[1], reverse = True)\n        # 'key = lambda x: x[1]' can be substituted by operator.itemgetter(1)\n        return sortedvote[0][0]\n\nk = KNN() #create KNN object\ngroup,labels = k.createDataset()\ncls = k.KnnClassify([0,0],group,labels,3)\nprint cls\n\n```\n-------------------\n运行：\n1. 在Python Shell 中可以运行KNN.py\n\n```python\n>>>import os\n>>>os.chdir(\"/home/liudiwei/code/data_miningKNN/\")\n>>>execfile(\"KNN.py\")\n```\n输出:B\n（B表示类别）\n\n2.或者terminal中直接运行\n\n```python\n$ python KNN.py\n```\n\n3.也可以不在KNN.py中写输出，而选择在Shell中获得结果，i.e.,\n\n```python\n>>>import KNN\n>>> KNN.k.KnnClassify([0,0],KNN.group,KNN.labels,3)\n```\n\n### **References**\n\n【1】Introduction to Data Mining <a href=\"http://vdisk.weibo.com/s/akTUdytgliZM8\">数据挖掘导论</a>\n【2】<a href=\"http://blog.csdn.net/abcjennifer/article/details/19757987\">Rachel Zhang-K近邻分类算法实现 in Python</a>\n\n\n-----\n\n附件（两张自己的计算过程图）：\n<center>![这里写图片描述](http://img.blog.csdn.net/20150524192410343)\n**图1 KNN算法核心部分**\n</center>\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150524192640924)\n**图2 简易计算过程**\n</center>\n说明：上述图片仅供参考，看不懂就自己测试一组数据如[0,1]慢慢推导一下吧\n\n-------\n\n<center>**本栏目机器学习算法持续更新中……**</center>","source":"_posts/2015-05-21-KNN.md","raw":"---\nlayout: post\ntitle: \"机器学习算法-K最近邻从原理到实现\"\ndate: 2015-05-21 20:34\ntags: \n\t- Machine Learning\ncomments: true\ncategories: ML\n---\n\n**引文**：决策树和基于规则的分类器都是**积极学习方法**（eager learner）的例子，因为一旦训练数据可用，他们就开始学习从输入属性到类标号的映射模型。一个相反的策略是推迟对训练数据的建模，直到需要分类测试样例时再进行。采用这种策略的技术被称为**消极学习法**（lazy learner）。**最近邻分类器**就是这样的一种方法。\n\n<!-- more -->\n\n### **1.K最近邻分类器原理**\n\n首先给出一张图，根据这张图来理解最近邻分类器，如下：\n\n<center>![这里写图片描述](http://img.blog.csdn.net/20150521201557111)\n</center>\n\n根据上图所示，有两类不同的样本数据，分别用**蓝色的小正方形**和**红色的小三角形**表示，而图正中间的那个**绿色的圆**所标示的数据则是待分类的数据。也就是说，现在， 我们不知道中间那个绿色的数据是从属于哪一类（蓝色小正方形or红色小三角形），下面，我们就要解决这个问题：给这个绿色的圆分类。\n\n　　我们常说，物以类聚，人以群分，判别一个人是一个什么样品质特征的人，常常可以从他or她身边的朋友入手，所谓观其友，而识其人。我们不是要判别上图中那个绿色的圆是属于哪一类数据么，好说，从它的邻居下手。但一次性看多少个邻居呢？从上图中，你还能看到：\n\n- 如果K=3，绿色圆点的最近的3个邻居是2个红色小三角形和1个蓝色小正方形，少数从属于多数，基于统计的方法，判定绿色的这个待分类点属于红色的三角形一类。\n- 如果K=5，绿色圆点的最近的5个邻居是2个红色三角形和3个蓝色的正方形，还是少数从属于多数，基于统计的方法，判定绿色的这个待分类点属于蓝色的正方形一类。\n\n于此我们看到，当无法判定当前待分类点是从属于已知分类中的哪一类时，我们可以依据统计学的理论看它所处的位置特征，衡量它周围邻居的权重，而把它归为(或分配)到权重更大的那一类。这就是K近邻算法的核心思想。\n\nKNN算法中，所选择的邻居都是已经正确分类的对象。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。\n\nKNN 算法本身简单有效，它是一种 lazy-learning 算法，分类器不需要使用训练集进行训练，训练时间复杂度为0。KNN 分类的计算复杂度和训练集中的文档数目成正比，也就是说，如果训练集中文档总数为 n，那么 KNN 的分类时间复杂度为O(n)。\n\n前面的例子中强调了选择合适的K值的重要性。如果太小，则最近邻分类器容易受到训练数据的噪声而产生的过分拟合的影响；相反，如果K太大，最近分类器可能会误会分类测试样例，因为最近邻列表中可能包含远离其近邻的数据点。（如下图所示）\n\n<center>![这里写图片描述](http://img.blog.csdn.net/20150521203027253) \n\n**K较大时的最近邻分类**\n\n</center>\n\n\n可见，K值的选取还是非常关键。\n\n--------------\n\n\n### **2.算法**\n\n算法步骤如下所示：\n\n<center>![这里写图片描述](http://img.blog.csdn.net/20150521203212596)</center>\n\n对每个测试样例$z = (x',y')$，算法计算它和所有训练样例$（x,y）属于D$之间的距离（或相似度），以确定其最近邻列表$D_z$。如果训练样例的数目很大，那么这种计算的开销就会很大。不过，可以使索引技术降低为测试样例找最近邻是的计算量。\n\n一旦得到最近邻列表，测试样例就可以根据最近邻的多数类进行分类，使用多数表决方法。\n\n\n--------------\n\n### **3.K最邻近算法实现（Python）**\nKNN.py\n\n```python\nfrom numpy import *\nimport operator\n\nclass KNN:\n    def createDataset(self):\n        group = array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])\n        labels = ['A','A','B','B']\n        return group,labels\n\n    def KnnClassify(self,testX,trainX,labels,K):\n        [N,M]=trainX.shape\n    \n    #calculate the distance between testX and other training samples\n        difference = tile(testX,(N,1)) - trainX # tile for array and repeat for matrix in Python, == repmat in Matlab\n        difference = difference ** 2 # take pow(difference,2)\n        distance = difference.sum(1) # take the sum of difference from all dimensions\n        distance = distance ** 0.5\n        sortdiffidx = distance.argsort()\n    \n    # find the k nearest neighbours\n        vote = {} #create the dictionary\n        for i in range(K):\n            ith_label = labels[sortdiffidx[i]];\n            vote[ith_label] = vote.get(ith_label,0)+1 #get(ith_label,0) : if dictionary 'vote' exist key 'ith_label', return vote[ith_label]; else return 0\n        sortedvote = sorted(vote.iteritems(),key = lambda x:x[1], reverse = True)\n        # 'key = lambda x: x[1]' can be substituted by operator.itemgetter(1)\n        return sortedvote[0][0]\n\nk = KNN() #create KNN object\ngroup,labels = k.createDataset()\ncls = k.KnnClassify([0,0],group,labels,3)\nprint cls\n\n```\n-------------------\n运行：\n1. 在Python Shell 中可以运行KNN.py\n\n```python\n>>>import os\n>>>os.chdir(\"/home/liudiwei/code/data_miningKNN/\")\n>>>execfile(\"KNN.py\")\n```\n输出:B\n（B表示类别）\n\n2.或者terminal中直接运行\n\n```python\n$ python KNN.py\n```\n\n3.也可以不在KNN.py中写输出，而选择在Shell中获得结果，i.e.,\n\n```python\n>>>import KNN\n>>> KNN.k.KnnClassify([0,0],KNN.group,KNN.labels,3)\n```\n\n### **References**\n\n【1】Introduction to Data Mining <a href=\"http://vdisk.weibo.com/s/akTUdytgliZM8\">数据挖掘导论</a>\n【2】<a href=\"http://blog.csdn.net/abcjennifer/article/details/19757987\">Rachel Zhang-K近邻分类算法实现 in Python</a>\n\n\n-----\n\n附件（两张自己的计算过程图）：\n<center>![这里写图片描述](http://img.blog.csdn.net/20150524192410343)\n**图1 KNN算法核心部分**\n</center>\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150524192640924)\n**图2 简易计算过程**\n</center>\n说明：上述图片仅供参考，看不懂就自己测试一组数据如[0,1]慢慢推导一下吧\n\n-------\n\n<center>**本栏目机器学习算法持续更新中……**</center>","slug":"2015-05-21-KNN","published":1,"updated":"2015-11-19T07:50:44.430Z","photos":[],"link":"","_id":"cih8q8rsq003er8ujgm9693tp"},{"layout":"post","title":"机器学习算法-决策树理论","date":"2015-05-08T13:53:12.000Z","comments":1,"_content":"\n**用较少的东西，同样可以做好的事情。越是小的决策树，越优于大的决策树。**\n\n## **引文**\n\n数据分类是一个两阶段过程，包括学习阶段（构建分类模型）和分类阶段（使用模型预测给定数据的类标号）。决策树分类算法是监督学习的一种，即Supervised learning。\n\n - 分类过程的第一阶段也可以看做学习一个映射或函数y=f(x),它可以预测给定元组X的类标号y。\n - 在第二阶段，使用模型进行分类。首先评估分类器的预测准确率。这个过程要尽量的减少**过拟合**。（为什么是尽量减少而不是避免呢，因为过拟合一般是避免不了的，再好的模型也会有过拟合的情况）。\n\n<!-- more -->\n\n## **1 决策树归纳**\n\n 决策树归纳是从有类标号的训练元组中学习决策树。常用的决策树算法有ID3，C4.5和CART。它们都是采用贪心（即非回溯的）方法，其中决策树自顶向下递归的分治方法构造。其中划分属性的方法各不相同，ID3使用的是**信息增益**，C4.5使用的是**信息增益率**，而CART使用的是**Gini基尼指数**。下面来简单介绍下决策树的理论知识。内容包含**熵**、**信息增益**、**信息增益率**以及**Gini指数**的计算公式。\n \n## **2 基本原理**\n\n\n### **2.1 算法优点**\n\n 决策树算法的优点如下：  \n（1）分类精度高；  \n（2）成的模式简单；  \n（3）对噪声数据有很好的健壮性。  \n因而是目前应用最为广泛的归纳推理算法之一，在数据挖掘中受到研究者的广泛关注。\n  \n### **2.2 算法一般流程**\n\n（1）收集数据：任意方法和途径。  \n（2）准备数据：书构造算法只适用于标称型数据，因此数据必须离散化。  \n（3）分析数据：构造树完成后，检查图形是否符合预测。  \n（4）训练算法：决策树的数据构造。  \n（5）测试算法：一般将决策树用于分类，可以用错误率衡量，而错误率使用经验率计算。  \n（6）使用算法：决策树可以用于任何监督学习算法。  \n\n### **2.3 实例**\n\n**信息增益和熵（克劳德.香农提出）**\n\n#### **1.使用信息增益进行决策树归纳**\n\n**信息增益度量属性选择**\n\n熵被用来衡量一个随机变量出现的期望值。熵越大，一个变量的不确定性就越大（也就是可取的值很多），把它搞清楚所需要的信息量也就越大，熵是整个系统的平均消息量。 信息熵是信息论中用于度量信息量的一个概念。一个系统越是有序，信息熵就越低；反之，一个系统越是混乱，信息熵就越高。所以，信息熵也可以说是系统有序化程度的一个度量。\n\n**熵（Entropy）的计算公式**\n\n熵定义为**信息的期望值**。先看看信息的定义：\n\n$$l(x_i)=-log_2p(x_i)$$\n\n其中，$p(x_i)$是选择该分类的概率。\n\n对$D$中的元组所有分类所有可能值的信息期望，即熵，计算公式如下：\n\n$$Entropy=H(D)=E(I(D))=-\\sum_i^{n}p_ilog_2(p_i)，p_i是D中任意元组属于类C_i非零概率。$$\n\n熵越大，说明系统越混乱，携带的信息就越少。熵越小，说明系统越有序，携带的信息就越多。信息的作用就是在于消除不确定性。\n\nID3划分特征使用的就是信息增益IG.\n\n一个属性的信息增益越大，表明属性对样本的熵减少的能力就更强，该属性使得数据所属类别的不确定性变为确定性的能力越强。\n\n注：**需要的期望信息越小，分区的纯度越高。**\n\n**信息增益计算**\n\n首先计算特征A对数据集D的经验**条件熵**$H(D|A)$,在数学上就是条件概率分布（Condition Probability）.\n\n$$H(D|A)=\\sum_j\\dfrac{|D_j|}{|D|}\\times H(D_j)，项\\dfrac{|D_i|}{|D|}充当第j个分区的权重$$\n\n引入条件熵，在信息论中主要是为了消除结果的不确定性。\n然后计算信息增益\n\n$$Gain(A) = H(D) - H(D|A)$$\n\n其中，$Gain(A)$即为所求的信息增益。\n\n\n下面来应用一个实例，**训练元组数据D**\n\n![这里写图片描述](http://img.blog.csdn.net/20150513110022176)\n\n在这里\n\n$$H(D)=-\\dfrac{9}{14}log_2\\dfrac{9}{14}-\\dfrac{5}{14}log_{2}\\frac{5}{14}=0.940位$$\n\n$$H(D|age)=\\dfrac{5}{14}\\times(-\\dfrac{2}{5}log_2\\dfrac{2}{5}-\\dfrac{3}{5}log_2 \\dfrac{3}{5})+\\dfrac{4}{14}\\times(-\\dfrac{4}{4}log_2\\dfrac{0}{4}-\\dfrac{0}{4}log_2 \\dfrac{0}{4})+\\dfrac{5}{14}\\times(-\\dfrac{3}{5}log_2\\dfrac{3}{5}-\\dfrac{2}{5}log_2 \\dfrac{2}{5})=0.694位$$\n\n根据计算出来的条件熵，计算按$age$划分的信息增益，计算方法如下：\n\n$$Gain(age)=H(D)-H(D|age)=0.940-0.964=0.246位$$\n\n类似的可以计算出其它属性的信息增益：\n\n$$ Gain(income)=0.029位，\nGain(student)=0.151位，Gain(credit\\_rating)=0.048位 $$\n\n由于$age$在属性中具有最高的信息增益，所以它被选作分裂特征。下面再进行递归计算信息增益，在此就不展示了。\n\nID3采用的就是就是IG，算法步骤如下：\n\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150921091028096)\n![这里写图片描述](http://img.blog.csdn.net/20150921091053471)\n</center>\n\n#### **2.使用增益率计算**\n\n**ID3使用的是信息增益，C4.5使用的是信息增益率。**\n\nC4.5算法继承了ID3算法的优点，并在以下几方面对ID3算法进行了改进：  \n1) 用信息增益率来选择属性，克服了用信息增益选择属性时偏向选择取值多的属性的不足；  \n2) 在树构造过程中进行剪枝；  \n3) 能够完成对连续属性的离散化处理；  \n4) 能够对不完整数据进行处理。  \n\nC4.5算法有如下优点：产生的分类规则易于理解，准确率较高。其缺点是：在构造树的过程中，需要对数据集进行多次的顺序扫描和排序，因而导致算法的低效。此外，C4.5只适合于能够驻留于内存的数据集，当训练集大得无法在内存容纳时程序无法运行。\n\n另外，无论是ID3还是C4.5最好在小数据集上使用，决策树分类一般只试用于小数据。当属性取值很多时最好选择C4.5算法，ID3得出的效果会非常差。\n\n**分裂信息计算公式：**\n\n$$Split\\_H(D|A)=-∑\\dfrac{|D_j|}{|D|}\\times log_2(\\dfrac{|D_j|}{|D|})$$\n\n增益率定义为：\n\n$$Gain\\_Rate(A)=\\dfrac{Gain(A)}{Split\\_H(D|A)}$$\n\n选择具有最大增益率的特征作为分裂特征。\n\n#### **3.基尼指数Gini index**\n\n基尼指数在CART中使用，Gini index度量的是数据分区或训练元组集D的不纯度。计算方式如下：\n\n$$Gini(D)=1-\\sum p^{2}_i，其中，p_i是D中元组数以C_i类的概率，对m个类计算和。$$\n\n\n## **3.学习推介**\n\nAndrew W. Moore PPT [DTree](http://www.autonlab.org/tutorials/dtree18.pdf)  \n决策树Python实现，单独成文，网址：[决策树实现](http://blog.csdn.net/dream_angel_z/article/details/45965463)  \nWikipedia维基百科-[Decision Tree决策树](https://en.wikipedia.org/wiki/Decision_tree)\n\n最后，附一张决策树的优点和缺点图：\n\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150921094738621)\n</center>\n\n\n## **4.Reference**\n\n[1]数据挖掘概念与技术 Third Edition,韩家伟.  \n[2]机器学习实战 ,Peter Harrington.  \n\n------\n<br>\n","source":"_posts/2015-05-08-decision tree.md","raw":"---\nlayout: post\ntitle: \"机器学习算法-决策树理论\"\ndate: 2015-05-08 21:53:12\ntags: \n\t- Machine Learning\ncomments: true\ncategories: ML\n---\n\n**用较少的东西，同样可以做好的事情。越是小的决策树，越优于大的决策树。**\n\n## **引文**\n\n数据分类是一个两阶段过程，包括学习阶段（构建分类模型）和分类阶段（使用模型预测给定数据的类标号）。决策树分类算法是监督学习的一种，即Supervised learning。\n\n - 分类过程的第一阶段也可以看做学习一个映射或函数y=f(x),它可以预测给定元组X的类标号y。\n - 在第二阶段，使用模型进行分类。首先评估分类器的预测准确率。这个过程要尽量的减少**过拟合**。（为什么是尽量减少而不是避免呢，因为过拟合一般是避免不了的，再好的模型也会有过拟合的情况）。\n\n<!-- more -->\n\n## **1 决策树归纳**\n\n 决策树归纳是从有类标号的训练元组中学习决策树。常用的决策树算法有ID3，C4.5和CART。它们都是采用贪心（即非回溯的）方法，其中决策树自顶向下递归的分治方法构造。其中划分属性的方法各不相同，ID3使用的是**信息增益**，C4.5使用的是**信息增益率**，而CART使用的是**Gini基尼指数**。下面来简单介绍下决策树的理论知识。内容包含**熵**、**信息增益**、**信息增益率**以及**Gini指数**的计算公式。\n \n## **2 基本原理**\n\n\n### **2.1 算法优点**\n\n 决策树算法的优点如下：  \n（1）分类精度高；  \n（2）成的模式简单；  \n（3）对噪声数据有很好的健壮性。  \n因而是目前应用最为广泛的归纳推理算法之一，在数据挖掘中受到研究者的广泛关注。\n  \n### **2.2 算法一般流程**\n\n（1）收集数据：任意方法和途径。  \n（2）准备数据：书构造算法只适用于标称型数据，因此数据必须离散化。  \n（3）分析数据：构造树完成后，检查图形是否符合预测。  \n（4）训练算法：决策树的数据构造。  \n（5）测试算法：一般将决策树用于分类，可以用错误率衡量，而错误率使用经验率计算。  \n（6）使用算法：决策树可以用于任何监督学习算法。  \n\n### **2.3 实例**\n\n**信息增益和熵（克劳德.香农提出）**\n\n#### **1.使用信息增益进行决策树归纳**\n\n**信息增益度量属性选择**\n\n熵被用来衡量一个随机变量出现的期望值。熵越大，一个变量的不确定性就越大（也就是可取的值很多），把它搞清楚所需要的信息量也就越大，熵是整个系统的平均消息量。 信息熵是信息论中用于度量信息量的一个概念。一个系统越是有序，信息熵就越低；反之，一个系统越是混乱，信息熵就越高。所以，信息熵也可以说是系统有序化程度的一个度量。\n\n**熵（Entropy）的计算公式**\n\n熵定义为**信息的期望值**。先看看信息的定义：\n\n$$l(x_i)=-log_2p(x_i)$$\n\n其中，$p(x_i)$是选择该分类的概率。\n\n对$D$中的元组所有分类所有可能值的信息期望，即熵，计算公式如下：\n\n$$Entropy=H(D)=E(I(D))=-\\sum_i^{n}p_ilog_2(p_i)，p_i是D中任意元组属于类C_i非零概率。$$\n\n熵越大，说明系统越混乱，携带的信息就越少。熵越小，说明系统越有序，携带的信息就越多。信息的作用就是在于消除不确定性。\n\nID3划分特征使用的就是信息增益IG.\n\n一个属性的信息增益越大，表明属性对样本的熵减少的能力就更强，该属性使得数据所属类别的不确定性变为确定性的能力越强。\n\n注：**需要的期望信息越小，分区的纯度越高。**\n\n**信息增益计算**\n\n首先计算特征A对数据集D的经验**条件熵**$H(D|A)$,在数学上就是条件概率分布（Condition Probability）.\n\n$$H(D|A)=\\sum_j\\dfrac{|D_j|}{|D|}\\times H(D_j)，项\\dfrac{|D_i|}{|D|}充当第j个分区的权重$$\n\n引入条件熵，在信息论中主要是为了消除结果的不确定性。\n然后计算信息增益\n\n$$Gain(A) = H(D) - H(D|A)$$\n\n其中，$Gain(A)$即为所求的信息增益。\n\n\n下面来应用一个实例，**训练元组数据D**\n\n![这里写图片描述](http://img.blog.csdn.net/20150513110022176)\n\n在这里\n\n$$H(D)=-\\dfrac{9}{14}log_2\\dfrac{9}{14}-\\dfrac{5}{14}log_{2}\\frac{5}{14}=0.940位$$\n\n$$H(D|age)=\\dfrac{5}{14}\\times(-\\dfrac{2}{5}log_2\\dfrac{2}{5}-\\dfrac{3}{5}log_2 \\dfrac{3}{5})+\\dfrac{4}{14}\\times(-\\dfrac{4}{4}log_2\\dfrac{0}{4}-\\dfrac{0}{4}log_2 \\dfrac{0}{4})+\\dfrac{5}{14}\\times(-\\dfrac{3}{5}log_2\\dfrac{3}{5}-\\dfrac{2}{5}log_2 \\dfrac{2}{5})=0.694位$$\n\n根据计算出来的条件熵，计算按$age$划分的信息增益，计算方法如下：\n\n$$Gain(age)=H(D)-H(D|age)=0.940-0.964=0.246位$$\n\n类似的可以计算出其它属性的信息增益：\n\n$$ Gain(income)=0.029位，\nGain(student)=0.151位，Gain(credit\\_rating)=0.048位 $$\n\n由于$age$在属性中具有最高的信息增益，所以它被选作分裂特征。下面再进行递归计算信息增益，在此就不展示了。\n\nID3采用的就是就是IG，算法步骤如下：\n\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150921091028096)\n![这里写图片描述](http://img.blog.csdn.net/20150921091053471)\n</center>\n\n#### **2.使用增益率计算**\n\n**ID3使用的是信息增益，C4.5使用的是信息增益率。**\n\nC4.5算法继承了ID3算法的优点，并在以下几方面对ID3算法进行了改进：  \n1) 用信息增益率来选择属性，克服了用信息增益选择属性时偏向选择取值多的属性的不足；  \n2) 在树构造过程中进行剪枝；  \n3) 能够完成对连续属性的离散化处理；  \n4) 能够对不完整数据进行处理。  \n\nC4.5算法有如下优点：产生的分类规则易于理解，准确率较高。其缺点是：在构造树的过程中，需要对数据集进行多次的顺序扫描和排序，因而导致算法的低效。此外，C4.5只适合于能够驻留于内存的数据集，当训练集大得无法在内存容纳时程序无法运行。\n\n另外，无论是ID3还是C4.5最好在小数据集上使用，决策树分类一般只试用于小数据。当属性取值很多时最好选择C4.5算法，ID3得出的效果会非常差。\n\n**分裂信息计算公式：**\n\n$$Split\\_H(D|A)=-∑\\dfrac{|D_j|}{|D|}\\times log_2(\\dfrac{|D_j|}{|D|})$$\n\n增益率定义为：\n\n$$Gain\\_Rate(A)=\\dfrac{Gain(A)}{Split\\_H(D|A)}$$\n\n选择具有最大增益率的特征作为分裂特征。\n\n#### **3.基尼指数Gini index**\n\n基尼指数在CART中使用，Gini index度量的是数据分区或训练元组集D的不纯度。计算方式如下：\n\n$$Gini(D)=1-\\sum p^{2}_i，其中，p_i是D中元组数以C_i类的概率，对m个类计算和。$$\n\n\n## **3.学习推介**\n\nAndrew W. Moore PPT [DTree](http://www.autonlab.org/tutorials/dtree18.pdf)  \n决策树Python实现，单独成文，网址：[决策树实现](http://blog.csdn.net/dream_angel_z/article/details/45965463)  \nWikipedia维基百科-[Decision Tree决策树](https://en.wikipedia.org/wiki/Decision_tree)\n\n最后，附一张决策树的优点和缺点图：\n\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20150921094738621)\n</center>\n\n\n## **4.Reference**\n\n[1]数据挖掘概念与技术 Third Edition,韩家伟.  \n[2]机器学习实战 ,Peter Harrington.  \n\n------\n<br>\n","slug":"2015-05-08-decision tree","published":1,"updated":"2015-11-20T03:30:47.298Z","photos":[],"link":"","_id":"cih8q8rst003hr8ujdmzto2pa"},{"layout":"post","title":"Git小结-同步一个fork","date":"2015-04-15T05:14:54.000Z","_content":"\n\n## 如何使用搜索引擎\n\n其实这个问题并不难，我又被坑了。百度搜的东西不靠谱啊，以后这种问题一定要用**英文**在 [Google](http://www.google.com) 或者 [Bing](http://cn.bing.com/) 上搜索，这样才能搜到原汁原味的答案。就当是一个教训吧。   \n\n搜索 fork sync，就可以看到 GitHub 自己的帮助文档 [Syncing a fork](https://help.github.com/articles/syncing-a-fork/) 点进去看这篇的时候，注意到有一个 Tip: Before you can sync your fork with an upstream repository, you must [configure a remote that points to the upstream repository](https://help.github.com/articles/configuring-a-remote-for-a-fork/) in Git.    \n根据这两篇文章，问题迎刃而解！ \n  \n<!-- more -->\n\n---\n\n## 具体方法\n\n---\n\n### Configuring a remote for a fork\n\n* 给 fork 配置一个 remote   \n\n* 主要使用 `git remote -v` 查看远程状态。   \n\n\n<pre><code>git remote -v\n# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n</code></pre>\n\n* 添加一个将被同步给 fork 远程的上游仓库      \n\n\n<pre><code>git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git\n</code></pre>\n\n\n* 再次查看状态确认是否配置成功。   \n\n<pre><code>git remote -v\n# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)\n# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)\n</code></pre>\n\n---\n\n### Syncing a fork\n\n* 从上游仓库 fetch 分支和提交点，传送到本地，并会被存储在一个本地分支 upstream/master   \n`git fetch upstream`    \n\n<pre><code>git fetch upstream\n# remote: Counting objects: 75, done.\n# remote: Compressing objects: 100% (53/53), done.\n# remote: Total 62 (delta 27), reused 44 (delta 9)\n# Unpacking objects: 100% (62/62), done.\n# From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY\n#  * [new branch]      master     -> upstream/master\n</code></pre>\n\n* 切换到本地主分支(如果不在的话)    \n`git checkout master`    \n\n<pre><code>git checkout master\n# Switched to branch 'master'\n</code></pre>\n\n* 把 upstream/master 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。    \n`git merge upstream/master`      \n\n<pre><code>git merge upstream/master\n# Updating a422352..5fdff0f\n# Fast-forward\n#  README                    |    9 -------\n#  README.md                 |    7 ++++++\n#  2 files changed, 7 insertions(+), 9 deletions(-)\n#  delete mode 100644 README\n#  create mode 100644 README.md\n</code></pre>\n\n* 如果想更新到 GitHub 的 fork 上，直接 `git push origin master` 就好了。\n\n---","source":"_posts/2015-04-12-Syncing-a-fork.md","raw":"---\nlayout: post\ntitle:  \"Git小结-同步一个fork\"\ndate:   2015-04-15 13:14:54\ncategories: GitHub\ntags: GitHub\n---\n\n\n## 如何使用搜索引擎\n\n其实这个问题并不难，我又被坑了。百度搜的东西不靠谱啊，以后这种问题一定要用**英文**在 [Google](http://www.google.com) 或者 [Bing](http://cn.bing.com/) 上搜索，这样才能搜到原汁原味的答案。就当是一个教训吧。   \n\n搜索 fork sync，就可以看到 GitHub 自己的帮助文档 [Syncing a fork](https://help.github.com/articles/syncing-a-fork/) 点进去看这篇的时候，注意到有一个 Tip: Before you can sync your fork with an upstream repository, you must [configure a remote that points to the upstream repository](https://help.github.com/articles/configuring-a-remote-for-a-fork/) in Git.    \n根据这两篇文章，问题迎刃而解！ \n  \n<!-- more -->\n\n---\n\n## 具体方法\n\n---\n\n### Configuring a remote for a fork\n\n* 给 fork 配置一个 remote   \n\n* 主要使用 `git remote -v` 查看远程状态。   \n\n\n<pre><code>git remote -v\n# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n</code></pre>\n\n* 添加一个将被同步给 fork 远程的上游仓库      \n\n\n<pre><code>git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git\n</code></pre>\n\n\n* 再次查看状态确认是否配置成功。   \n\n<pre><code>git remote -v\n# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)\n# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)\n</code></pre>\n\n---\n\n### Syncing a fork\n\n* 从上游仓库 fetch 分支和提交点，传送到本地，并会被存储在一个本地分支 upstream/master   \n`git fetch upstream`    \n\n<pre><code>git fetch upstream\n# remote: Counting objects: 75, done.\n# remote: Compressing objects: 100% (53/53), done.\n# remote: Total 62 (delta 27), reused 44 (delta 9)\n# Unpacking objects: 100% (62/62), done.\n# From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY\n#  * [new branch]      master     -> upstream/master\n</code></pre>\n\n* 切换到本地主分支(如果不在的话)    \n`git checkout master`    \n\n<pre><code>git checkout master\n# Switched to branch 'master'\n</code></pre>\n\n* 把 upstream/master 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。    \n`git merge upstream/master`      \n\n<pre><code>git merge upstream/master\n# Updating a422352..5fdff0f\n# Fast-forward\n#  README                    |    9 -------\n#  README.md                 |    7 ++++++\n#  2 files changed, 7 insertions(+), 9 deletions(-)\n#  delete mode 100644 README\n#  create mode 100644 README.md\n</code></pre>\n\n* 如果想更新到 GitHub 的 fork 上，直接 `git push origin master` 就好了。\n\n---","slug":"2015-04-12-Syncing-a-fork","published":1,"updated":"2015-11-19T07:50:44.429Z","comments":1,"photos":[],"link":"","_id":"cih8q8rsx003kr8ujmpb0kbye"},{"layout":"post","title":"代码校验工具 SublimeLinter 的安装与使用","date":"2015-03-26T07:14:54.000Z","_content":"\n## 序   \n\n本文我将讲述一下 SublimeLinter 的安装过程。   \n其组件 jshint 的安装与使用。   \n其组件 csslint 的安装与使用。   \n我将基于 [Sublime Text 3](http://sublimetext.com/3) 来安装。   \n使用 Sublime Text 2 的用户阅读本文是没有帮助的。   \n\nSublimeLinter 是 Sublime 的插件，它的作用是检查代码语法是否有错误，并提示。习惯了 IDE 下写代码的人一定需要一款在 Sublime 上类似的语法检查工具。下面我们开始。   \n\n<!-- more -->\n\n---\n\n## 安装 SublimeLinter   \n\n如同其他插件一样使用 Package Control 来安装。   \n\n1. 按下 `Ctrl+Shift+p` 进入 Command Palette   \n2. 输入`install`进入 Package Control: Install Package   \n3. 输入`SublimeLinter`。进行安装.   \n\n![SublimeLinter](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-sublimeLinter.jpg)   \n\n安装完成后可以看到这样一段话：   \n\n<pre><code class=\"markdown\">Welcome to SublimeLinter, a linter framework for Sublime Text 3.\n \n                  * * * IMPORTANT! * * *\n\n         SublimeLinter 3 is NOT a drop-in replacement for\n        earlier versions.\n\n         Linters *NOT* included with SublimeLinter 3, \n         they must be installed separately.\n \n         The settings are different.\n \n                 * * * READ THE DOCS! * * *\n \n Otherwise you will never know how to install linters, nor will\n you know about all of the great new features in SublimeLinter 3.\n \n For complete documentation on how to install and use SublimeLinter,\n please see:\n \n http://www.sublimelinter.com</code></pre>   \n\n可以看到具体的 Linters 组件**不**被包含在 SublimeLinter 3 中，所以我们要额外独立安装组件。   \n可以针对不同的语言安装不同的组件。   \n\n---\n\n## JavaScript 语法检查   \n\nSublimeLinter-jshint 是基于 nodeJS 下的 jshint 的插件，实际上 SublimeLinter-jshint 调用了 nodeJS 中 jshint 的接口来进行语法检查的。   \n\n---\n\n### 安装 SublimeLinter-jshint\n\n为了让 JavaScript 代码有语法检查，我们安装 SublimeLinter-jshint   \n同样的方法，我们安装 SublimeLinter-jshint    \n\n1. 按下 `Ctrl+Shift+p` 进入 Command Palette   \n2. 输入`install`进入 Package Control: Install Package   \n3. 输入`SublimeLinter-jshint`。进行安装.   \n\n如下图   \n\n![SublimeLinter-jshint](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint.jpg)   \n\n安装完成后我们可以看到下面的一段话   \n\n<pre><code class=\"markdown\">SublimeLinter-jshint\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to jshint.\n  \n  ** IMPORTANT! **\n  \n  Before this plugin will activate, you *must*\n  follow the installation instructions here:\n  \n  https://github.com/SublimeLinter/SublimeLinter-jshint\n</code></pre>\n\n---\n\n### 安装 nodeJS 和 jshint\n\n在插件开始工作之前，我们必须再看一下上述插件的[安装说明](https://github.com/SublimeLinter/SublimeLinter-jshint)   \n通过 [SublimeLinter-jshint 的说明](https://github.com/SublimeLinter/SublimeLinter-jshint) 我们可以看到，这个组件依赖于 nodeJS 下的 jshint，所以我们安装 nodeJS 环境和 nodeJS 下的 jshint。   \n\n1. 安装 [Node.js](https://nodejs.org/)   \n2. 通过 npm 安装`jshint`   \n\n在命令行下输入如下代码，完成安装   \n\n\tnpm install -g jshint\n\n安装完成后命令行中出现如下的信息   \n\n\tC:\\Users\\Administrator\\AppData\\Roaming\\npm\\jshint -> C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\jshint\\bin\\jshint\n\tjshint@2.6.3 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\jshint\n\t├── strip-json-comments@1.0.2\n\t├── underscore@1.6.0\n\t├── exit@0.1.2\n\t├── shelljs@0.3.0\n\t├── console-browserify@1.1.0 (date-now@0.1.4)\n\t├── htmlparser2@3.8.2 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.13, domutils@1.5.1)\n\t├── minimatch@1.0.0 (sigmund@1.0.0, lru-cache@2.5.0)\n\t└── cli@0.6.6 (glob@3.2.11)\n\n可以查看 jshint 版本，已确认安装完成。  \n\n\tC:\\Users\\Administrator>jshint -v\n\tjshint v2.6.3\n\n现在，恭喜你，我们使用 Sublime 编辑 JavaScript 文件，就会有语法检查了！   \n\n在编辑过程中，会有如下提示   \n\n![SublimeLinter-jshint-test](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test.jpg)\n\n点击提示点后，Sublime 状态栏也会有相应的说明   \n\n![SublimeLinter-jshint-test2](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test2.jpg)\n\n---\n\n## css 语法检查 \n\n与 jshint 同理，SublimeLinter-csslint 也是基于 nodeJS 下的 csslint 的插件，实际上 SublimeLinter-csslint 调用了 nodeJS 中 csslint 的接口来进行语法检查的。   \n\n---\n\n### 安装 SublimeLinter-csslint   \n\n同样的方法。   \n\n1. 按下 `Ctrl+Shift+p` 进入 Command Palette   \n2. 输入`install`进入 Package Control: Install Package   \n3. 输入`SublimeLinter-csslint`。进行安装.   \n\n如下图   \n\n![SublimeLinter-csslint](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint.jpg)   \n\n安装完成后我们可以看到下面的一段话   \n\n\tSublimeLinter-csslint\n\t-------------------------------\n\tThis linter plugin for SublimeLinter provides an interface to csslint.\n\n\t** IMPORTANT! **\n\n\tBefore this plugin will activate, you *must*\n\tfollow the installation instructions here:\n\n\thttps://github.com/SublimeLinter/SublimeLinter-csslint\n\n在使用插件之前，必须遵循上述网址中的[安装说明](https://github.com/SublimeLinter/SublimeLinter-csslint)   \n\n---\n\n### 在 nodeJS 下安装 csslint   \n\n进入上述的 GitHub 地址，csslint 的说明页。我们知道了和 jshint 一样，csslint 也是基于 nodeJS 下的 csslint 来使用的。   \n\n这里安装 nodeJS 过程省略。   \n只需用 npm 安装 csslint 即可。   \n\n在命令行中输入     \n\n\tnpm install -g csslint   \n\n安装完成后命令行中出现如下的信息     \n\n\tC:\\Users\\Administrator\\AppData\\Roaming\\npm\\csslint -> C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\csslint\\cli.js\n\tcsslint@0.10.0 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\csslint\n\t└── parserlib@0.2.5\n\n可以查看 csslint 版本，已确认安装完成。   \n\n\tC:\\Users\\Administrator>csslint --version\n\tv0.10.0\n\n现在，恭喜你，我们使用 Sublime 编辑 css 文件，就会有语法检查了！     \n\n在编辑过程中，会有如下提示   \n\n![SublimeLinter-csslint-test](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test.jpg)\n\n点击提示点后，Sublime 状态栏也会有相应的说明   \n\n![SublimeLinter-csslint-test2](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test2.jpg)\n\n---","source":"_posts/2015-03-26-sublimeLinter.md","raw":"---\nlayout: post\ntitle:  \"代码校验工具 SublimeLinter 的安装与使用\"\ndate:   2015-03-26 15:14:54\ntags: \n\t- SublimeLinter\ncategories: 工具\n---\n\n## 序   \n\n本文我将讲述一下 SublimeLinter 的安装过程。   \n其组件 jshint 的安装与使用。   \n其组件 csslint 的安装与使用。   \n我将基于 [Sublime Text 3](http://sublimetext.com/3) 来安装。   \n使用 Sublime Text 2 的用户阅读本文是没有帮助的。   \n\nSublimeLinter 是 Sublime 的插件，它的作用是检查代码语法是否有错误，并提示。习惯了 IDE 下写代码的人一定需要一款在 Sublime 上类似的语法检查工具。下面我们开始。   \n\n<!-- more -->\n\n---\n\n## 安装 SublimeLinter   \n\n如同其他插件一样使用 Package Control 来安装。   \n\n1. 按下 `Ctrl+Shift+p` 进入 Command Palette   \n2. 输入`install`进入 Package Control: Install Package   \n3. 输入`SublimeLinter`。进行安装.   \n\n![SublimeLinter](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-sublimeLinter.jpg)   \n\n安装完成后可以看到这样一段话：   \n\n<pre><code class=\"markdown\">Welcome to SublimeLinter, a linter framework for Sublime Text 3.\n \n                  * * * IMPORTANT! * * *\n\n         SublimeLinter 3 is NOT a drop-in replacement for\n        earlier versions.\n\n         Linters *NOT* included with SublimeLinter 3, \n         they must be installed separately.\n \n         The settings are different.\n \n                 * * * READ THE DOCS! * * *\n \n Otherwise you will never know how to install linters, nor will\n you know about all of the great new features in SublimeLinter 3.\n \n For complete documentation on how to install and use SublimeLinter,\n please see:\n \n http://www.sublimelinter.com</code></pre>   \n\n可以看到具体的 Linters 组件**不**被包含在 SublimeLinter 3 中，所以我们要额外独立安装组件。   \n可以针对不同的语言安装不同的组件。   \n\n---\n\n## JavaScript 语法检查   \n\nSublimeLinter-jshint 是基于 nodeJS 下的 jshint 的插件，实际上 SublimeLinter-jshint 调用了 nodeJS 中 jshint 的接口来进行语法检查的。   \n\n---\n\n### 安装 SublimeLinter-jshint\n\n为了让 JavaScript 代码有语法检查，我们安装 SublimeLinter-jshint   \n同样的方法，我们安装 SublimeLinter-jshint    \n\n1. 按下 `Ctrl+Shift+p` 进入 Command Palette   \n2. 输入`install`进入 Package Control: Install Package   \n3. 输入`SublimeLinter-jshint`。进行安装.   \n\n如下图   \n\n![SublimeLinter-jshint](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint.jpg)   \n\n安装完成后我们可以看到下面的一段话   \n\n<pre><code class=\"markdown\">SublimeLinter-jshint\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to jshint.\n  \n  ** IMPORTANT! **\n  \n  Before this plugin will activate, you *must*\n  follow the installation instructions here:\n  \n  https://github.com/SublimeLinter/SublimeLinter-jshint\n</code></pre>\n\n---\n\n### 安装 nodeJS 和 jshint\n\n在插件开始工作之前，我们必须再看一下上述插件的[安装说明](https://github.com/SublimeLinter/SublimeLinter-jshint)   \n通过 [SublimeLinter-jshint 的说明](https://github.com/SublimeLinter/SublimeLinter-jshint) 我们可以看到，这个组件依赖于 nodeJS 下的 jshint，所以我们安装 nodeJS 环境和 nodeJS 下的 jshint。   \n\n1. 安装 [Node.js](https://nodejs.org/)   \n2. 通过 npm 安装`jshint`   \n\n在命令行下输入如下代码，完成安装   \n\n\tnpm install -g jshint\n\n安装完成后命令行中出现如下的信息   \n\n\tC:\\Users\\Administrator\\AppData\\Roaming\\npm\\jshint -> C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\jshint\\bin\\jshint\n\tjshint@2.6.3 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\jshint\n\t├── strip-json-comments@1.0.2\n\t├── underscore@1.6.0\n\t├── exit@0.1.2\n\t├── shelljs@0.3.0\n\t├── console-browserify@1.1.0 (date-now@0.1.4)\n\t├── htmlparser2@3.8.2 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.13, domutils@1.5.1)\n\t├── minimatch@1.0.0 (sigmund@1.0.0, lru-cache@2.5.0)\n\t└── cli@0.6.6 (glob@3.2.11)\n\n可以查看 jshint 版本，已确认安装完成。  \n\n\tC:\\Users\\Administrator>jshint -v\n\tjshint v2.6.3\n\n现在，恭喜你，我们使用 Sublime 编辑 JavaScript 文件，就会有语法检查了！   \n\n在编辑过程中，会有如下提示   \n\n![SublimeLinter-jshint-test](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test.jpg)\n\n点击提示点后，Sublime 状态栏也会有相应的说明   \n\n![SublimeLinter-jshint-test2](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test2.jpg)\n\n---\n\n## css 语法检查 \n\n与 jshint 同理，SublimeLinter-csslint 也是基于 nodeJS 下的 csslint 的插件，实际上 SublimeLinter-csslint 调用了 nodeJS 中 csslint 的接口来进行语法检查的。   \n\n---\n\n### 安装 SublimeLinter-csslint   \n\n同样的方法。   \n\n1. 按下 `Ctrl+Shift+p` 进入 Command Palette   \n2. 输入`install`进入 Package Control: Install Package   \n3. 输入`SublimeLinter-csslint`。进行安装.   \n\n如下图   \n\n![SublimeLinter-csslint](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint.jpg)   \n\n安装完成后我们可以看到下面的一段话   \n\n\tSublimeLinter-csslint\n\t-------------------------------\n\tThis linter plugin for SublimeLinter provides an interface to csslint.\n\n\t** IMPORTANT! **\n\n\tBefore this plugin will activate, you *must*\n\tfollow the installation instructions here:\n\n\thttps://github.com/SublimeLinter/SublimeLinter-csslint\n\n在使用插件之前，必须遵循上述网址中的[安装说明](https://github.com/SublimeLinter/SublimeLinter-csslint)   \n\n---\n\n### 在 nodeJS 下安装 csslint   \n\n进入上述的 GitHub 地址，csslint 的说明页。我们知道了和 jshint 一样，csslint 也是基于 nodeJS 下的 csslint 来使用的。   \n\n这里安装 nodeJS 过程省略。   \n只需用 npm 安装 csslint 即可。   \n\n在命令行中输入     \n\n\tnpm install -g csslint   \n\n安装完成后命令行中出现如下的信息     \n\n\tC:\\Users\\Administrator\\AppData\\Roaming\\npm\\csslint -> C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\csslint\\cli.js\n\tcsslint@0.10.0 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\csslint\n\t└── parserlib@0.2.5\n\n可以查看 csslint 版本，已确认安装完成。   \n\n\tC:\\Users\\Administrator>csslint --version\n\tv0.10.0\n\n现在，恭喜你，我们使用 Sublime 编辑 css 文件，就会有语法检查了！     \n\n在编辑过程中，会有如下提示   \n\n![SublimeLinter-csslint-test](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test.jpg)\n\n点击提示点后，Sublime 状态栏也会有相应的说明   \n\n![SublimeLinter-csslint-test2](http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test2.jpg)\n\n---","slug":"2015-03-26-sublimeLinter","published":1,"updated":"2015-11-19T07:50:44.427Z","comments":1,"photos":[],"link":"","_id":"cih8q8rt4003nr8ujqbofyxog"},{"layout":"post","date":"2014-12-21T03:24:00.000Z","title":"插入排序-简单插入排序&希尔排序","comment":true,"_content":"\n**注：代码均使用C++编写.**\n\n首先介绍一个常用排序算法的时间复杂度和空间复杂度的表格：\n\n![](/assets/articleImg/2014-12-21-performances-of-sort-algs.png)\n\n<!--more-->\n\n对于插入排序，本文简单介绍两种：简单插入排序和希尔排序。同时，会附上实现源码。\n\n## 1.知识点小记\n\n- 使用`sizeof(nums)/sizeof(nums[0])`获得数组的长度；\n\n- 数组作为参数有两种方法，一种是以数组名本身，一种是以指针；\n\n- 如果要给一个函数传入一个数组，一般都是传入两个参数，一个数组指针或数组名，另一个是数组大小；\n\n\n## 2.简单插入排序\n\n\n直接插入排序(Insertion Sort)的基本思想是：每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子序列中的适当位置，直到全部记录插入完成为止。\n\n实现：从头到尾遍历数组，设置一个变量作为哨兵，记录当前元素；然后从当前位置依次往前寻找插入点，如果哨兵元素值要小，就将前面的元素往后移动一位，直到哨兵元素大于前面的元素为止。\n\n设数组为a[0…n-1]。\n\n- 初始时，a[0]自成1个有序区，无序区为a[1..n-1]。令i=1\n- 将a[i]并入当前的有序区a[0…i-1]中形成a[0…i]的有序区间。\n- i++，并重复第二步直到i==n-1。\n\n简单插入排序方法实现：\n\n```\n//insert sort\nvoid insertSort(int nums[], int n){\n    for(int i=1;i<n;i++){\n        int temp = nums[i];\n        int j=i-1;\n        while(nums[j]>temp && j>=0){\n            nums[j+1] = nums[j];\n            j--;\n        }\n        nums[j+1] = temp;\n    }\n}\n```\n\n\n下面是一个完整的例子：\n\n```\n#include <iostream>\nusing namespace std;\nvoid insertSort(int nums[], int n)；\nint main()\n{\n    int nums[] = {9,2,7,4,5};\n    int n = sizeof(nums)/sizeof(nums[0]);\n    insertSort(nums, n);\n    for(int i =0; i< (sizeof(nums)/sizeof(nums[0])); i++){\n        cout<<nums[i]<<\" \";\n    }\n    return 0;\n}\n\n//insert sort\nvoid insertSort(int nums[], int n){\n    for(int i=1;i<n;i++){\n        int temp = nums[i];\n        int j=i-1;\n        while(nums[j]>temp && j>=0){\n            nums[j+1] = nums[j];\n            j--;\n        }\n        nums[j+1] = temp;\n    }\n}\n```\n\n简单插入排序最坏和平均时间复杂度都为O($n^2$),空间复杂度为O(1)，最好的时间复杂度为O(n).属于稳定的排序算法。\n\n---\n\n## 3.希尔排序\n\n\n希尔排序思路：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的，因此希尔排序在时间效率上比前两种方法有较大提高。\n\n希尔排序方法：\n\n```\n//希尔排序\nvoid shellSort(int nums[], int n){\n    int d = n>>1;\n    while(d>=1){\n        for(int i=0; i<n-d; i++){\n            for(int j=i+d; j<n; j+=d){\n                if(nums[j-d]>nums[j]){\n                    int temp = nums[j-d];\n                    nums[j-d] = nums[j];\n                    nums[j] = temp;\n                }\n            }\n        }\n        d = d>>1;\n        print_array(nums,n);\n    }\n}\n```\n\n下面是一个完整的例子：\n\n```\n#include <iostream>\nusing namespace std;\nvoid shellSort(int nums[], int n);\nvoid print_array(int nums[], int n);\nint main()\n{\n    int nums[] = {9,2,7,4,5};\n    int n = sizeof(nums)/sizeof(nums[0]);\n    shellSort(nums, n);\n    for(int i =0; i< (sizeof(nums)/sizeof(nums[0])); i++){\n        cout<<nums[i]<<\" \";\n    }\n    return 0;\n}\n\n//希尔排序\nvoid shellSort(int nums[], int n){\n    int d = n>>1;\n    while(d>=1){\n        for(int i=0; i<n-d; i++){\n            for(int j=i+d; j<n; j+=d){\n                if(nums[j-d]>nums[j]){\n                    int temp = nums[j-d];\n                    nums[j-d] = nums[j];\n                    nums[j] = temp;\n                }\n            }\n        }\n        d = d>>1;\n        print_array(nums,n);\n    }\n}\n\nvoid print_array(int nums[], int n){\n    for(int i = 0; i<n; i++){\n        cout<<nums[i]<<\" \";\n    }\n    cout<<endl;\n}\n```\n\n输出结果：\n\n![](/assets/articleImg/2014-12-21-insert-sort.png)\n\n简单插入排序平均时间复杂度为O($n^{1.3}$),空间复杂度为O(1)。最坏情况下的时间复杂度为O($n^2$),最好的时间复杂度为O(n).\n\n---\n\n## 4.补充知识点\n\n\n**将数组作为参数传递**\n\n两种形式：\n\n- 使用数组名本身,如上方的函数形式：\n\n```\nvoid insertSort(int nums[], int n)\n```\n\n- 用指针作为参数,这就简单了,只需将上面方法中的数组修改成指针形式:\n\n\n```\nvoid insertSort(int *nums, int n)\n```\n\n---\n\n","source":"_posts/2014-12-21-InsertSort.md","raw":"---\nlayout: post\ndate: 2014-12-21 11:24\ntitle: \"插入排序-简单插入排序&希尔排序\"\ncategories: 算法与数据结构\ntag: \n\t- C++\n\t- 数据结构\n\t- 排序算法\n\t- 希尔排序\n\t- 简单插入排序\ncomment: true\n---\n\n**注：代码均使用C++编写.**\n\n首先介绍一个常用排序算法的时间复杂度和空间复杂度的表格：\n\n![](/assets/articleImg/2014-12-21-performances-of-sort-algs.png)\n\n<!--more-->\n\n对于插入排序，本文简单介绍两种：简单插入排序和希尔排序。同时，会附上实现源码。\n\n## 1.知识点小记\n\n- 使用`sizeof(nums)/sizeof(nums[0])`获得数组的长度；\n\n- 数组作为参数有两种方法，一种是以数组名本身，一种是以指针；\n\n- 如果要给一个函数传入一个数组，一般都是传入两个参数，一个数组指针或数组名，另一个是数组大小；\n\n\n## 2.简单插入排序\n\n\n直接插入排序(Insertion Sort)的基本思想是：每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子序列中的适当位置，直到全部记录插入完成为止。\n\n实现：从头到尾遍历数组，设置一个变量作为哨兵，记录当前元素；然后从当前位置依次往前寻找插入点，如果哨兵元素值要小，就将前面的元素往后移动一位，直到哨兵元素大于前面的元素为止。\n\n设数组为a[0…n-1]。\n\n- 初始时，a[0]自成1个有序区，无序区为a[1..n-1]。令i=1\n- 将a[i]并入当前的有序区a[0…i-1]中形成a[0…i]的有序区间。\n- i++，并重复第二步直到i==n-1。\n\n简单插入排序方法实现：\n\n```\n//insert sort\nvoid insertSort(int nums[], int n){\n    for(int i=1;i<n;i++){\n        int temp = nums[i];\n        int j=i-1;\n        while(nums[j]>temp && j>=0){\n            nums[j+1] = nums[j];\n            j--;\n        }\n        nums[j+1] = temp;\n    }\n}\n```\n\n\n下面是一个完整的例子：\n\n```\n#include <iostream>\nusing namespace std;\nvoid insertSort(int nums[], int n)；\nint main()\n{\n    int nums[] = {9,2,7,4,5};\n    int n = sizeof(nums)/sizeof(nums[0]);\n    insertSort(nums, n);\n    for(int i =0; i< (sizeof(nums)/sizeof(nums[0])); i++){\n        cout<<nums[i]<<\" \";\n    }\n    return 0;\n}\n\n//insert sort\nvoid insertSort(int nums[], int n){\n    for(int i=1;i<n;i++){\n        int temp = nums[i];\n        int j=i-1;\n        while(nums[j]>temp && j>=0){\n            nums[j+1] = nums[j];\n            j--;\n        }\n        nums[j+1] = temp;\n    }\n}\n```\n\n简单插入排序最坏和平均时间复杂度都为O($n^2$),空间复杂度为O(1)，最好的时间复杂度为O(n).属于稳定的排序算法。\n\n---\n\n## 3.希尔排序\n\n\n希尔排序思路：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的，因此希尔排序在时间效率上比前两种方法有较大提高。\n\n希尔排序方法：\n\n```\n//希尔排序\nvoid shellSort(int nums[], int n){\n    int d = n>>1;\n    while(d>=1){\n        for(int i=0; i<n-d; i++){\n            for(int j=i+d; j<n; j+=d){\n                if(nums[j-d]>nums[j]){\n                    int temp = nums[j-d];\n                    nums[j-d] = nums[j];\n                    nums[j] = temp;\n                }\n            }\n        }\n        d = d>>1;\n        print_array(nums,n);\n    }\n}\n```\n\n下面是一个完整的例子：\n\n```\n#include <iostream>\nusing namespace std;\nvoid shellSort(int nums[], int n);\nvoid print_array(int nums[], int n);\nint main()\n{\n    int nums[] = {9,2,7,4,5};\n    int n = sizeof(nums)/sizeof(nums[0]);\n    shellSort(nums, n);\n    for(int i =0; i< (sizeof(nums)/sizeof(nums[0])); i++){\n        cout<<nums[i]<<\" \";\n    }\n    return 0;\n}\n\n//希尔排序\nvoid shellSort(int nums[], int n){\n    int d = n>>1;\n    while(d>=1){\n        for(int i=0; i<n-d; i++){\n            for(int j=i+d; j<n; j+=d){\n                if(nums[j-d]>nums[j]){\n                    int temp = nums[j-d];\n                    nums[j-d] = nums[j];\n                    nums[j] = temp;\n                }\n            }\n        }\n        d = d>>1;\n        print_array(nums,n);\n    }\n}\n\nvoid print_array(int nums[], int n){\n    for(int i = 0; i<n; i++){\n        cout<<nums[i]<<\" \";\n    }\n    cout<<endl;\n}\n```\n\n输出结果：\n\n![](/assets/articleImg/2014-12-21-insert-sort.png)\n\n简单插入排序平均时间复杂度为O($n^{1.3}$),空间复杂度为O(1)。最坏情况下的时间复杂度为O($n^2$),最好的时间复杂度为O(n).\n\n---\n\n## 4.补充知识点\n\n\n**将数组作为参数传递**\n\n两种形式：\n\n- 使用数组名本身,如上方的函数形式：\n\n```\nvoid insertSort(int nums[], int n)\n```\n\n- 用指针作为参数,这就简单了,只需将上面方法中的数组修改成指针形式:\n\n\n```\nvoid insertSort(int *nums, int n)\n```\n\n---\n\n","slug":"2014-12-21-InsertSort","published":1,"updated":"2015-11-22T05:08:32.301Z","_id":"cih8q8ru9003sr8ujhj96lsk8","comments":1,"photos":[],"link":""},{"layout":"post","date":"2014-12-19T06:24:00.000Z","title":"Python元组与列表的区别","comment":true,"_content":"\n\n## list和tuple区别\n\n列表和元组非常类似，有时候他们都干一样的事情。他们最大的区别是:\n\n* **元组一旦被赋值，值不可以被改变，一旦改变就会出错；列表可以任意的更改**。\n\n* **他们用不同的符号表示，赋值的时候，列表用方括号\"[]\"，而元组用小括号\"（）\"**。\n\n<!--more-->\n\n列表：列表中的元素应该包括在方括号中，你可以添加、删除或是搜索列表中的元素。由于你可以增加或删除项目，所以列表是可变的数据类型，即这种类型是可以被改变的。\n\n元组：元组和列表十分类似，但是元组是不可变的.也就是说你不能修改元组。元组通过圆括号中用逗号分割的项目定义。元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变。\n\n\n## 用法\n\n### 1.list\n\n\n```\nli = [1,2,3,4,5] #赋值，使用中括号\nli[1] = 11 #修改li[1]的值,此时li变成[1, 11, 3, 4, 5]\nli[0] = \"LOVE\" #此时li变成['LOVE', 11, 3, 4, 5]\n```\n\n\n- List（列表） 是 Python 中使用最频繁的数据类型。\n\n- 列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。\n\n- 列表用[ ]标识。是python最通用的复合数据类型。看这段代码就明白。\n\n- 列表中的值得分割也可以用到变量[头下标:尾下标]，就可以截取相应的列表，从左到右索引默认0开始的，从右到左索引默认-1开始，下标可以为空表示取到头或尾。\n\n加号（+）是列表连接运算符，星号（*）是重复操作。如下实例：\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nlist = [ 'abcd', 786 , 2.23, 'john', 70.2 ]\ntinylist = [123, 'john']\n\nprint list # 输出完整列表\nprint list[0] # 输出列表的第一个元素\nprint list[1:3] # 输出第二个至第三个的元素 \nprint list[2:] # 输出从第三个开始至列表末尾的所有元素\nprint tinylist * 2 # 输出列表两次\nprint list + tinylist # 打印组合的列表\n```\n\n以上实例输出结果：\n\n<pre><code class=\"markdown\">['abcd', 786, 2.23, 'john', 70.2]\nabcd\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['abcd', 786, 2.23, 'john', 70.2, 123, 'john']\n</code></pre>\n\n\n### 2.tuple\n\n- 元组是另一个数据类型，类似于List（列表）。\n\n- 元组用\"()\"标识。内部元素用逗号隔开。但是元素不能二次赋值，相当于只读列表。\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\ntuple = ( 'abcd', 786 , 2.23, 'john', 70.2 )\ntinytuple = (123, 'john')\n\nprint tuple # 输出完整元组\nprint tuple[0] # 输出元组的第一个元素\nprint tuple[1:3] # 输出第二个至第三个的元素 \nprint tuple[2:] # 输出从第三个开始至列表末尾的所有元素\nprint tinytuple * 2 # 输出元组两次\nprint tuple + tinytuple # 打印组合的元组\n```\n\n以上实例输出结果：\n\n```\n('abcd', 786, 2.23, 'john', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('abcd', 786, 2.23, 'john', 70.2, 123, 'john')\n```\n\ntuple不可修改，否则会报错。\n\n---\n\n","source":"_posts/2014-12-19-The-difference-of-list-and-tupple.md","raw":"---\nlayout: post\ndate: 2014-12-19 14:24\ntitle: \"Python元组与列表的区别\"\ncategories: Python \ntag: \n\t- Python\n\t- list\n\t- tuple\ncomment: true\n---\n\n\n## list和tuple区别\n\n列表和元组非常类似，有时候他们都干一样的事情。他们最大的区别是:\n\n* **元组一旦被赋值，值不可以被改变，一旦改变就会出错；列表可以任意的更改**。\n\n* **他们用不同的符号表示，赋值的时候，列表用方括号\"[]\"，而元组用小括号\"（）\"**。\n\n<!--more-->\n\n列表：列表中的元素应该包括在方括号中，你可以添加、删除或是搜索列表中的元素。由于你可以增加或删除项目，所以列表是可变的数据类型，即这种类型是可以被改变的。\n\n元组：元组和列表十分类似，但是元组是不可变的.也就是说你不能修改元组。元组通过圆括号中用逗号分割的项目定义。元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变。\n\n\n## 用法\n\n### 1.list\n\n\n```\nli = [1,2,3,4,5] #赋值，使用中括号\nli[1] = 11 #修改li[1]的值,此时li变成[1, 11, 3, 4, 5]\nli[0] = \"LOVE\" #此时li变成['LOVE', 11, 3, 4, 5]\n```\n\n\n- List（列表） 是 Python 中使用最频繁的数据类型。\n\n- 列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。\n\n- 列表用[ ]标识。是python最通用的复合数据类型。看这段代码就明白。\n\n- 列表中的值得分割也可以用到变量[头下标:尾下标]，就可以截取相应的列表，从左到右索引默认0开始的，从右到左索引默认-1开始，下标可以为空表示取到头或尾。\n\n加号（+）是列表连接运算符，星号（*）是重复操作。如下实例：\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nlist = [ 'abcd', 786 , 2.23, 'john', 70.2 ]\ntinylist = [123, 'john']\n\nprint list # 输出完整列表\nprint list[0] # 输出列表的第一个元素\nprint list[1:3] # 输出第二个至第三个的元素 \nprint list[2:] # 输出从第三个开始至列表末尾的所有元素\nprint tinylist * 2 # 输出列表两次\nprint list + tinylist # 打印组合的列表\n```\n\n以上实例输出结果：\n\n<pre><code class=\"markdown\">['abcd', 786, 2.23, 'john', 70.2]\nabcd\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['abcd', 786, 2.23, 'john', 70.2, 123, 'john']\n</code></pre>\n\n\n### 2.tuple\n\n- 元组是另一个数据类型，类似于List（列表）。\n\n- 元组用\"()\"标识。内部元素用逗号隔开。但是元素不能二次赋值，相当于只读列表。\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\ntuple = ( 'abcd', 786 , 2.23, 'john', 70.2 )\ntinytuple = (123, 'john')\n\nprint tuple # 输出完整元组\nprint tuple[0] # 输出元组的第一个元素\nprint tuple[1:3] # 输出第二个至第三个的元素 \nprint tuple[2:] # 输出从第三个开始至列表末尾的所有元素\nprint tinytuple * 2 # 输出元组两次\nprint tuple + tinytuple # 打印组合的元组\n```\n\n以上实例输出结果：\n\n```\n('abcd', 786, 2.23, 'john', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('abcd', 786, 2.23, 'john', 70.2, 123, 'john')\n```\n\ntuple不可修改，否则会报错。\n\n---\n\n","slug":"2014-12-19-The-difference-of-list-and-tupple","published":1,"updated":"2015-11-19T07:50:44.427Z","comments":1,"photos":[],"link":"","_id":"cih8q8rum0045r8uj33slcxwh"},{"layout":"post","date":"2014-11-19T02:24:00.000Z","title":"Linx学习笔记-tree命令","comment":true,"_content":"\n\n## 安装\n\n有时候，我们想要知道一个目录下面的详细情况，那么有什么好的方法呢？\n\n很幸运，Linux shell 有一个tree 命令，专门用来打印目录树。\n\n如果你没有安装，可以使用`yum`来安装，命令如下：\n\n```shell\nyum -y install tree\n```\n<!-- more-->\n## 使用\n\n此时如果想打印某个目录下的所有文件，可以使用`tree`命令：\n\n<pre><code class=\"markdown\">[liudiwei@master _code]$ tree\n.\n`-- preprocessing\n    |-- compareTwoFile.py\n    |-- download.py\n    |-- extractChainFromSeq.py\n    |-- extractSeqByChain.py\n    |-- formatChain.py\n    |-- generateSeqFromDSSP.py\n    |-- getProteinFromChain.py\n    |-- getProteinNameFromDir.py\n    |-- pdbToDSSP.py\n    `-- _README.txt\n</code></pre>\n\n\n此外，如果只想要显示目录的话，可以使用添加`-d`参数：\n\n<pre><code class=\"markdown\">[liudiwei@master DNA_BP]$ tree -d\n.\n|-- _code\n|   `-- preprocessing\n|-- _data\n|   `-- Exp_DBPI\n|       |-- DBPI_Datasets\n|       |-- dssp_testset\n|       |   `-- format\n|       |-- dssp_trainset\n|       |   `-- format\n|       |-- pdb_testset\n|       `-- pdb_trainset\n|-- _feature\n|   `-- feature_extraction\n`-- paper_Graham\n\n14 directories\n</code></pre>\n\n如果你不想看到全部的文件？可以加上“-P 通配符”的方法来只列出某种文件：\n\n<pre><code class=\"markdown\">[liudiwei@master DNA_BP]$ tree -P \"*.py\"\n.\n|-- _code\n|   `-- preprocessing\n|       |-- compareTwoFile.py\n|       |-- download.py\n|       |-- extractChainFromSeq.py\n|       |-- extractSeqByChain.py\n|       |-- formatChain.py\n|       |-- generateSeqFromDSSP.py\n|       |-- getProteinFromChain.py\n|       |-- getProteinNameFromDir.py\n|       `-- pdbToDSSP.py\n|-- _data\n|   `-- Exp_DBPI\n|       |-- DBPI_Datasets\n|       |-- dssp_testset\n|       |   `-- format\n|       |-- dssp_trainset\n|       |   `-- format\n|       |-- pdb_testset\n|       `-- pdb_trainset\n|-- _feature\n|   `-- feature_extraction\n`-- paper2015_Graham\n</code></pre>\n\n## 详细参数\n\n`tree`常用参数：\n\n<pre><code class=\"markdown\">\n-a 显示所有文件和目录。\n\n-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n\n-C 在文件和目录清单加上色彩，便于区分各种类型。\n\n-d 显示目录名称而非内容。\n\n-D 列出文件或目录的更改时间。\n\n-f 在每个文件或目录之前，显示完整的相对路径名称。\n\n-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*“,”/“,”=“,”@“,”|“号。\n\n-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n\n-i 不以阶梯状列出文件或目录名称。\n\n-I <范本样式> 不显示符合范本样式的文件或目录名称。\n\n-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n\n-n 不在文件和目录清单加上色彩。\n\n-N 直接列出文件和目录名称，包括控制字符。\n\n-p 列出权限标示。\n\n-P <范本样式> 只显示符合范本样式的文件或目录名称。\n\n-q 用”?“号取代控制字符，列出文件和目录名称。\n\n-s 列出文件或目录大小。\n\n-t 用文件和目录的更改时间排序。\n\n-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n\n-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n</code></pre>\n\n---\n\n","source":"_posts/2014-11-19-linux-tree-command.md","raw":"---\nlayout: post\ndate: 2014-11-19 10:24\ntitle: \"Linx学习笔记-tree命令\"\ncategories: Linux\ntag: \n\t- Linux\n\t- Shell\ncomment: true\n---\n\n\n## 安装\n\n有时候，我们想要知道一个目录下面的详细情况，那么有什么好的方法呢？\n\n很幸运，Linux shell 有一个tree 命令，专门用来打印目录树。\n\n如果你没有安装，可以使用`yum`来安装，命令如下：\n\n```shell\nyum -y install tree\n```\n<!-- more-->\n## 使用\n\n此时如果想打印某个目录下的所有文件，可以使用`tree`命令：\n\n<pre><code class=\"markdown\">[liudiwei@master _code]$ tree\n.\n`-- preprocessing\n    |-- compareTwoFile.py\n    |-- download.py\n    |-- extractChainFromSeq.py\n    |-- extractSeqByChain.py\n    |-- formatChain.py\n    |-- generateSeqFromDSSP.py\n    |-- getProteinFromChain.py\n    |-- getProteinNameFromDir.py\n    |-- pdbToDSSP.py\n    `-- _README.txt\n</code></pre>\n\n\n此外，如果只想要显示目录的话，可以使用添加`-d`参数：\n\n<pre><code class=\"markdown\">[liudiwei@master DNA_BP]$ tree -d\n.\n|-- _code\n|   `-- preprocessing\n|-- _data\n|   `-- Exp_DBPI\n|       |-- DBPI_Datasets\n|       |-- dssp_testset\n|       |   `-- format\n|       |-- dssp_trainset\n|       |   `-- format\n|       |-- pdb_testset\n|       `-- pdb_trainset\n|-- _feature\n|   `-- feature_extraction\n`-- paper_Graham\n\n14 directories\n</code></pre>\n\n如果你不想看到全部的文件？可以加上“-P 通配符”的方法来只列出某种文件：\n\n<pre><code class=\"markdown\">[liudiwei@master DNA_BP]$ tree -P \"*.py\"\n.\n|-- _code\n|   `-- preprocessing\n|       |-- compareTwoFile.py\n|       |-- download.py\n|       |-- extractChainFromSeq.py\n|       |-- extractSeqByChain.py\n|       |-- formatChain.py\n|       |-- generateSeqFromDSSP.py\n|       |-- getProteinFromChain.py\n|       |-- getProteinNameFromDir.py\n|       `-- pdbToDSSP.py\n|-- _data\n|   `-- Exp_DBPI\n|       |-- DBPI_Datasets\n|       |-- dssp_testset\n|       |   `-- format\n|       |-- dssp_trainset\n|       |   `-- format\n|       |-- pdb_testset\n|       `-- pdb_trainset\n|-- _feature\n|   `-- feature_extraction\n`-- paper2015_Graham\n</code></pre>\n\n## 详细参数\n\n`tree`常用参数：\n\n<pre><code class=\"markdown\">\n-a 显示所有文件和目录。\n\n-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n\n-C 在文件和目录清单加上色彩，便于区分各种类型。\n\n-d 显示目录名称而非内容。\n\n-D 列出文件或目录的更改时间。\n\n-f 在每个文件或目录之前，显示完整的相对路径名称。\n\n-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*“,”/“,”=“,”@“,”|“号。\n\n-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n\n-i 不以阶梯状列出文件或目录名称。\n\n-I <范本样式> 不显示符合范本样式的文件或目录名称。\n\n-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n\n-n 不在文件和目录清单加上色彩。\n\n-N 直接列出文件和目录名称，包括控制字符。\n\n-p 列出权限标示。\n\n-P <范本样式> 只显示符合范本样式的文件或目录名称。\n\n-q 用”?“号取代控制字符，列出文件和目录名称。\n\n-s 列出文件或目录大小。\n\n-t 用文件和目录的更改时间排序。\n\n-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n\n-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n</code></pre>\n\n---\n\n","slug":"2014-11-19-linux-tree-command","published":1,"updated":"2015-11-21T02:40:03.651Z","comments":1,"photos":[],"link":"","_id":"cih8q8rut004cr8uj3xnlfi0o"},{"layout":"post","date":"2014-12-21T04:24:00.000Z","title":"排序算法-归并排序","comment":true,"_content":"\n**注：代码均使用C++编写.**\n\n## 介绍\n\n对于数据较大的输入，归并排序是比较快的一个算法。该算法采用的是分治法的思想。\n\n原理：将数据分开排序，然后进行合并，最后形成一个排好的序列。\n\n![](/assets/articleImg/2014-12-21-mergesort-1.png)\n<!--more-->\n\n将其合并输出，如下图所示：\n\n![](/assets/articleImg/2014-12-21-mergeSort-2.png)\n\n\n归并排序有一个关键步骤：合并两个排序好的序列。方法是：两个序列中的数相互比较，将较小的数先插入新的序列中。\n\n\n归并过程：比较a[i]和a[j]的大小，若a[i]≤a[j]，则将第一个有序表中的元素a[i]复制到r[k]中，并令i和k分别加上1；否则将第二个有序表中的元素a[j]复制到r[k]中，并令j和k分别加上1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到r中从下标k到下标t的单元。归并排序的算法我们通常用递归实现，先把待排序区间[s,t]以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间[s,t]。\n\n- 发明者：约翰·冯·诺伊曼\n- 时间复杂度：O(nlogn)\n- 空间复杂度 O（n)\n- 稳定的算法\n\n\n## 一次合并\n\n在代码实现部分，需要进行递归进行合并，因此，先编写一个合并的方法。\n\n归并操作的工作原理如下：\n\n一次归并函数传递的参数有：一个数组名、数组的起始位置、数组的末尾位置以及数组的中点位置。\n\n- 第一步：申请空间，初始化起点中点和中点到末尾位置两个变量(nl,nr)，同时设定两个指针p和q，空间大小分别为nl和nr;\n- 第二步：将数组分别输入到两个空间中;\n- 第三步：合并两个数组。操作：比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置;\n- 重复步骤3直到某一指针超出序列尾;\n- 将另一序列剩下的所有元素直接复制到合并序列尾.\n\n在第三步的时候，需要注意的是，不额外的开辟辅助数组，直接通过两个指针的值将原数组的数值进行修改。此处需要设置一个变量`k`，起始位置为数组的起始位置,方便在合并时同时增加指针的下标和数组下标值.\n\n注：使用`malloc`时，需要引入`#include <stdlib.h>`头文件。\n\n代码如下:\n\n```\nvoid mergeOne(int nums[], int l, int m, int r){\n    int nl = m - l + 1;\n    int nr = r - m;\n    int *p = NULL, *q = NULL;\n    p = (int *) malloc (nl * sizeof(int));\n    q = (int *) malloc (nr * sizeof(int));\n\n    //将数组输入到两个空间中\n    for(int i = 0; i < nl; i++) {\n        p[i] = nums[l + i];\n    }\n    for(int j = 0; j < nr; j++) {\n        q[j] = nums[m + 1 + j];\n    }\n\n    //合并两个数组\n    int i = 0;\n    int j = 0;\n    int k = l;\n    while(i < nl && j < nr) {\n        if(p[i] < q[j]) {\n            nums[k++] = p[i++];\n        }else{\n            nums[k++] = q[j++];\n        }\n    }\n\n    //将剩余的元素合并\n    while(i < nl) {\n        nums[k++]  = p[i++];\n    }\n    while(j <nr) {\n        nums[k++] = q[j++];\n    }\n}\n```\n\n\n## 归并排序\n\n通过合并函数来实现归并排序的算法\n\n```\n//注意：此处的left和right必须是数组下标能取到的有效值\nvoid mergeSort(int nums[], int left, int right) {\n    int mid = (left + right) >> 1;\n    if(left < right) {\n        mergeSort(nums, left, mid);\n        mergeSort(nums, mid+1, right);\n        mergeOne(nums, left, mid, right);\n    }\n}\n```\n\n## 测试\n\n```\n#include <iostream>\n#include <stdlib.h>\nvoid print_array(int nums[], int n);\nusing namespace std;\nint main()\n{\n    int nums[]={9, 3, 5, 2, 7, 6, 4, 1};\n    int n = sizeof(nums)/sizeof(nums[0]);\n    mergeSort(nums, 0, n - 1);\n    print_array(nums,n);\n    return 0;\n}\nvoid print_array(int nums[], int n) {\n    for(int i = 0; i<n; i++){\n        cout<<nums[i]<<\" \";\n    }\n    cout<<endl;\n}\n\n```\n\n最后输出：\n\n<pre><code class=\"markdown\">1 2 3 4 5 6 7 9\n\nProcess returned 0 (0x0)   execution time : 0.097 s\nPress any key to continue.\n</code></pre>\n\n---\n\n","source":"_posts/2014-12-21-MergeSort.md","raw":"---\nlayout: post\ndate: 2014-12-21 12:24\ntitle: \"排序算法-归并排序\"\ncategories: 算法与数据结构\ntag: \n\t- 归并排序\n\t- 数据结构\n\t- 排序算法\n\t- C++\ncomment: true\n---\n\n**注：代码均使用C++编写.**\n\n## 介绍\n\n对于数据较大的输入，归并排序是比较快的一个算法。该算法采用的是分治法的思想。\n\n原理：将数据分开排序，然后进行合并，最后形成一个排好的序列。\n\n![](/assets/articleImg/2014-12-21-mergesort-1.png)\n<!--more-->\n\n将其合并输出，如下图所示：\n\n![](/assets/articleImg/2014-12-21-mergeSort-2.png)\n\n\n归并排序有一个关键步骤：合并两个排序好的序列。方法是：两个序列中的数相互比较，将较小的数先插入新的序列中。\n\n\n归并过程：比较a[i]和a[j]的大小，若a[i]≤a[j]，则将第一个有序表中的元素a[i]复制到r[k]中，并令i和k分别加上1；否则将第二个有序表中的元素a[j]复制到r[k]中，并令j和k分别加上1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到r中从下标k到下标t的单元。归并排序的算法我们通常用递归实现，先把待排序区间[s,t]以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间[s,t]。\n\n- 发明者：约翰·冯·诺伊曼\n- 时间复杂度：O(nlogn)\n- 空间复杂度 O（n)\n- 稳定的算法\n\n\n## 一次合并\n\n在代码实现部分，需要进行递归进行合并，因此，先编写一个合并的方法。\n\n归并操作的工作原理如下：\n\n一次归并函数传递的参数有：一个数组名、数组的起始位置、数组的末尾位置以及数组的中点位置。\n\n- 第一步：申请空间，初始化起点中点和中点到末尾位置两个变量(nl,nr)，同时设定两个指针p和q，空间大小分别为nl和nr;\n- 第二步：将数组分别输入到两个空间中;\n- 第三步：合并两个数组。操作：比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置;\n- 重复步骤3直到某一指针超出序列尾;\n- 将另一序列剩下的所有元素直接复制到合并序列尾.\n\n在第三步的时候，需要注意的是，不额外的开辟辅助数组，直接通过两个指针的值将原数组的数值进行修改。此处需要设置一个变量`k`，起始位置为数组的起始位置,方便在合并时同时增加指针的下标和数组下标值.\n\n注：使用`malloc`时，需要引入`#include <stdlib.h>`头文件。\n\n代码如下:\n\n```\nvoid mergeOne(int nums[], int l, int m, int r){\n    int nl = m - l + 1;\n    int nr = r - m;\n    int *p = NULL, *q = NULL;\n    p = (int *) malloc (nl * sizeof(int));\n    q = (int *) malloc (nr * sizeof(int));\n\n    //将数组输入到两个空间中\n    for(int i = 0; i < nl; i++) {\n        p[i] = nums[l + i];\n    }\n    for(int j = 0; j < nr; j++) {\n        q[j] = nums[m + 1 + j];\n    }\n\n    //合并两个数组\n    int i = 0;\n    int j = 0;\n    int k = l;\n    while(i < nl && j < nr) {\n        if(p[i] < q[j]) {\n            nums[k++] = p[i++];\n        }else{\n            nums[k++] = q[j++];\n        }\n    }\n\n    //将剩余的元素合并\n    while(i < nl) {\n        nums[k++]  = p[i++];\n    }\n    while(j <nr) {\n        nums[k++] = q[j++];\n    }\n}\n```\n\n\n## 归并排序\n\n通过合并函数来实现归并排序的算法\n\n```\n//注意：此处的left和right必须是数组下标能取到的有效值\nvoid mergeSort(int nums[], int left, int right) {\n    int mid = (left + right) >> 1;\n    if(left < right) {\n        mergeSort(nums, left, mid);\n        mergeSort(nums, mid+1, right);\n        mergeOne(nums, left, mid, right);\n    }\n}\n```\n\n## 测试\n\n```\n#include <iostream>\n#include <stdlib.h>\nvoid print_array(int nums[], int n);\nusing namespace std;\nint main()\n{\n    int nums[]={9, 3, 5, 2, 7, 6, 4, 1};\n    int n = sizeof(nums)/sizeof(nums[0]);\n    mergeSort(nums, 0, n - 1);\n    print_array(nums,n);\n    return 0;\n}\nvoid print_array(int nums[], int n) {\n    for(int i = 0; i<n; i++){\n        cout<<nums[i]<<\" \";\n    }\n    cout<<endl;\n}\n\n```\n\n最后输出：\n\n<pre><code class=\"markdown\">1 2 3 4 5 6 7 9\n\nProcess returned 0 (0x0)   execution time : 0.097 s\nPress any key to continue.\n</code></pre>\n\n---\n\n","slug":"2014-12-21-MergeSort","published":1,"updated":"2015-11-22T05:08:56.992Z","_id":"cih9yaqwn00003oujkoqrs978","comments":1,"photos":[],"link":""}],"PostAsset":[],"PostCategory":[{"post_id":"cih8q8ro2000ir8ujllsshpo1","category_id":"cih8q8ro4000jr8ujubu4a42a","_id":"cih8q8ro6000mr8ujlwpzlel8"},{"post_id":"cih8q8ro7000nr8uj3jzcfnoe","category_id":"cih8q8ro4000jr8ujubu4a42a","_id":"cih8q8ro9000or8ujmex38zo2"},{"post_id":"cih8q8rob000rr8ujdj63x90h","category_id":"cih8q8ro4000jr8ujubu4a42a","_id":"cih8q8rod000sr8ujb94l8qwi"},{"post_id":"cih8q8rof000ur8uja93m70rq","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rog000vr8uj07ndohst"},{"post_id":"cih8q8rol000yr8ujgswr7jj9","category_id":"cih8q8ron000zr8ujdqlvpzg0","_id":"cih8q8roo0011r8ujkfa56u89"},{"post_id":"cih8q8roq0012r8ujskztdftj","category_id":"cih8q8ron000zr8ujdqlvpzg0","_id":"cih8q8ros0013r8ujnafned1z"},{"post_id":"cih8q8row0017r8uj22tc1brk","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8roz0018r8ujdixa7lof"},{"post_id":"cih8q8rp3001cr8ujo0v58wds","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rp4001dr8ujet20rkkx"},{"post_id":"cih8q8rp9001hr8ujii1nvg1s","category_id":"cih8q8rpb001ir8ujexh4eako","_id":"cih8q8rpc001lr8uj858gn0zd"},{"post_id":"cih8q8rpg001mr8uj2vwau8pd","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rpi001nr8uj410iul05"},{"post_id":"cih8q8rpl001pr8uj2i4lphio","category_id":"cih8q8rpn001qr8ujly4ulrbr","_id":"cih8q8rpo001tr8ujjk11jyf3"},{"post_id":"cih8q8rpq001ur8uj9in421ej","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rpr001vr8ujselrzwdm"},{"post_id":"cih8q8rpv001xr8uj7aa77ifb","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rpy001yr8ujoz5tmcxu"},{"post_id":"cih8q8rq10020r8uj1t218ttk","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rq30021r8ujzpsp711r"},{"post_id":"cih8q8rq60023r8uj8swrd1w1","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rq90024r8uj79gcfiw7"},{"post_id":"cih8q8rqb0026r8ujhhq6qcr4","category_id":"cih8q8rqe0027r8ujzl9g795t","_id":"cih8q8rqi002ar8ujrhh30ffn"},{"post_id":"cih8q8rql002cr8ujbozaqurg","category_id":"cih8q8rqe0027r8ujzl9g795t","_id":"cih8q8rqn002dr8ujya3xhm6c"},{"post_id":"cih8q8rqs002fr8ujhiln8scp","category_id":"cih8q8ron000zr8ujdqlvpzg0","_id":"cih8q8rqu002gr8ujhb6hd5fh"},{"post_id":"cih8q8rr4002qr8ujp80gla5n","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rr6002rr8uje07822vu"},{"post_id":"cih8q8rre002tr8uj0e84jv24","category_id":"cih8q8ro4000jr8ujubu4a42a","_id":"cih8q8rrg002ur8ujzt6qyjni"},{"post_id":"cih8q8rrl002wr8ujo3eftmu3","category_id":"cih8q8ron000zr8ujdqlvpzg0","_id":"cih8q8rro002xr8ujwahglzoe"},{"post_id":"cih8q8rrt002zr8ujp7rxbjo7","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rrv0030r8ujskug6g7k"},{"post_id":"cih8q8rs00032r8ujzif45lo8","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rs10033r8ujpy0l67wh"},{"post_id":"cih8q8rs40035r8uj0kkapms0","category_id":"cih8q8ron000zr8ujdqlvpzg0","_id":"cih8q8rs70036r8ujhe0bd8dm"},{"post_id":"cih8q8rsf003ar8ujnfk3mcvp","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rsm003br8ujla2q920x"},{"post_id":"cih8q8rsq003er8ujgm9693tp","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rsr003fr8uj6wgo7ol4"},{"post_id":"cih8q8rst003hr8ujdmzto2pa","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8q8rsv003ir8uj49pwhfm5"},{"post_id":"cih8q8rsx003kr8ujmpb0kbye","category_id":"cih8q8rpb001ir8ujexh4eako","_id":"cih8q8rsz003lr8uja6vvwba6"},{"post_id":"cih8q8rt4003nr8ujqbofyxog","category_id":"cih8q8rt9003or8ujucuwwvfp","_id":"cih8q8rtd003rr8ujhvc2yr52"},{"post_id":"cih8q8rum0045r8uj33slcxwh","category_id":"cih8q8ron000zr8ujdqlvpzg0","_id":"cih8q8ruo0046r8uju2etiuuj"},{"post_id":"cih8q8rut004cr8uj3xnlfi0o","category_id":"cih8q8ruu004dr8ujlpnmwtht","_id":"cih8q8rux004gr8uj7b2kz8ak"},{"post_id":"cih8q8rnn000br8uj670wej6s","category_id":"cih8q8rnt000cr8ujm0xau0jl","_id":"cih8zgeaf000004ujw1renrkh"},{"post_id":"cih9yaqwn00003oujkoqrs978","category_id":"cih8q8rub003tr8ujwx78x2og","_id":"ciha2etpz000060ujh4wuxopi"},{"post_id":"cih8q8ru9003sr8ujhj96lsk8","category_id":"cih8q8rub003tr8ujwx78x2og","_id":"ciha2etr7000360ujlqfvyuet"}],"PostTag":[{"post_id":"cih8q8rnn000br8uj670wej6s","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rnz000gr8ujhooizjgz"},{"post_id":"cih8q8rnn000br8uj670wej6s","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8ro0000hr8uj1g4m96fb"},{"post_id":"cih8q8ro2000ir8ujllsshpo1","tag_id":"cih8q8ro5000kr8uj3prbri7d","_id":"cih8q8ro6000lr8ujaojgxxxq"},{"post_id":"cih8q8ro7000nr8uj3jzcfnoe","tag_id":"cih8q8ro5000kr8uj3prbri7d","_id":"cih8q8roa000pr8ujoly3dm6i"},{"post_id":"cih8q8ro7000nr8uj3jzcfnoe","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8roa000qr8ujeb2zcnl0"},{"post_id":"cih8q8rob000rr8ujdj63x90h","tag_id":"cih8q8ro5000kr8uj3prbri7d","_id":"cih8q8rod000tr8ujsrzat9iz"},{"post_id":"cih8q8rof000ur8uja93m70rq","tag_id":"cih8q8roh000wr8ujr9dctn3r","_id":"cih8q8roj000xr8ujtp8yyfk7"},{"post_id":"cih8q8rol000yr8ujgswr7jj9","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8ron0010r8ujb76tv13p"},{"post_id":"cih8q8roq0012r8ujskztdftj","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8rou0015r8ujhsth2klx"},{"post_id":"cih8q8roq0012r8ujskztdftj","tag_id":"cih8q8rot0014r8ujb48q86fy","_id":"cih8q8rov0016r8ujvbhcvsfc"},{"post_id":"cih8q8row0017r8uj22tc1brk","tag_id":"cih8q8roz0019r8ujqxh64as1","_id":"cih8q8rp0001ar8uja84pc7rd"},{"post_id":"cih8q8row0017r8uj22tc1brk","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rp1001br8uja9mtla8q"},{"post_id":"cih8q8rp3001cr8ujo0v58wds","tag_id":"cih8q8rp5001er8ujuakeig91","_id":"cih8q8rp5001fr8ujnd46cvqm"},{"post_id":"cih8q8rp3001cr8ujo0v58wds","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rp6001gr8ujllzpb4en"},{"post_id":"cih8q8rp9001hr8ujii1nvg1s","tag_id":"cih8q8rpb001jr8uj41iep2t9","_id":"cih8q8rpc001kr8uj6cxauxgd"},{"post_id":"cih8q8rpg001mr8uj2vwau8pd","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rpj001or8ujjrqkdwfy"},{"post_id":"cih8q8rpl001pr8uj2i4lphio","tag_id":"cih8q8rpn001rr8ujntgcowrk","_id":"cih8q8rpo001sr8uj0cktiwa0"},{"post_id":"cih8q8rpq001ur8uj9in421ej","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rps001wr8ujwznqlodx"},{"post_id":"cih8q8rpv001xr8uj7aa77ifb","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rpz001zr8ujftmqozrb"},{"post_id":"cih8q8rq10020r8uj1t218ttk","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rq40022r8uj3u7zr5n7"},{"post_id":"cih8q8rq60023r8uj8swrd1w1","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rq90025r8uj6c2bilxb"},{"post_id":"cih8q8rqb0026r8ujhhq6qcr4","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rqg0029r8uju8ht7szg"},{"post_id":"cih8q8rqb0026r8ujhhq6qcr4","tag_id":"cih8q8rqf0028r8ujf8sdp37w","_id":"cih8q8rqj002br8ujp1ckikci"},{"post_id":"cih8q8rql002cr8ujbozaqurg","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rqn002er8ujl73ye32o"},{"post_id":"cih8q8rqs002fr8ujhiln8scp","tag_id":"cih8q8rqu002hr8uj6dii4qew","_id":"cih8q8rqw002ir8ujoa6gg0sk"},{"post_id":"cih8q8rqs002fr8ujhiln8scp","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8rqw002jr8ujn5tcgb3r"},{"post_id":"cih8q8rqz002kr8ujwgvuuh6e","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rr1002nr8ujk6x8js06"},{"post_id":"cih8q8rqz002kr8ujwgvuuh6e","tag_id":"cih8q8rr0002lr8ujoe7xivrf","_id":"cih8q8rr1002or8ujxhruvoea"},{"post_id":"cih8q8rqz002kr8ujwgvuuh6e","tag_id":"cih8q8rr1002mr8ujha55y09g","_id":"cih8q8rr2002pr8uj7031ev96"},{"post_id":"cih8q8rr4002qr8ujp80gla5n","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rr7002sr8ujqhbr9zpx"},{"post_id":"cih8q8rre002tr8uj0e84jv24","tag_id":"cih8q8ro5000kr8uj3prbri7d","_id":"cih8q8rrg002vr8ujy9ik6mp4"},{"post_id":"cih8q8rrl002wr8ujo3eftmu3","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8rrp002yr8ujeldwolyl"},{"post_id":"cih8q8rrt002zr8ujp7rxbjo7","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rrw0031r8uj65nj3vl9"},{"post_id":"cih8q8rs00032r8ujzif45lo8","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rs20034r8uj1ltb1t6h"},{"post_id":"cih8q8rs40035r8uj0kkapms0","tag_id":"cih8q8rs80037r8ujq0bdkpr4","_id":"cih8q8rsa0038r8ujxecsnf9o"},{"post_id":"cih8q8rs40035r8uj0kkapms0","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8rsc0039r8ujv5jxeb0u"},{"post_id":"cih8q8rsf003ar8ujnfk3mcvp","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rsn003cr8ujurvnm9zy"},{"post_id":"cih8q8rsf003ar8ujnfk3mcvp","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8rsn003dr8ujxtu7zch4"},{"post_id":"cih8q8rsq003er8ujgm9693tp","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rsr003gr8ujoma63w3k"},{"post_id":"cih8q8rst003hr8ujdmzto2pa","tag_id":"cih8q8rnu000dr8uj3t80zol4","_id":"cih8q8rsv003jr8uj2d4r6xzw"},{"post_id":"cih8q8rsx003kr8ujmpb0kbye","tag_id":"cih8q8rpb001jr8uj41iep2t9","_id":"cih8q8rt0003mr8ujm2qymfq7"},{"post_id":"cih8q8rt4003nr8ujqbofyxog","tag_id":"cih8q8rt9003pr8ujw2mwxxyn","_id":"cih8q8rtc003qr8ujby58yku5"},{"post_id":"cih8q8ru9003sr8ujhj96lsk8","tag_id":"cih8q8ruc003ur8uj8lxpzeqk","_id":"cih8q8rug0040r8ujdplyma0j"},{"post_id":"cih8q8ru9003sr8ujhj96lsk8","tag_id":"cih8q8ruc003vr8uj1vnk4pbj","_id":"cih8q8ruh0041r8uj33x21bm5"},{"post_id":"cih8q8ru9003sr8ujhj96lsk8","tag_id":"cih8q8rud003xr8ujh64f78sy","_id":"cih8q8ruh0042r8uj5if8g751"},{"post_id":"cih8q8ru9003sr8ujhj96lsk8","tag_id":"cih8q8rue003yr8uj9fhgmi8u","_id":"cih8q8ruh0043r8uj00ky7lxf"},{"post_id":"cih8q8ru9003sr8ujhj96lsk8","tag_id":"cih8q8ruf003zr8uj1kx2mno5","_id":"cih8q8rui0044r8ujzm59lpzz"},{"post_id":"cih8q8rum0045r8uj33slcxwh","tag_id":"cih8q8rnx000er8ujvansfftt","_id":"cih8q8ruq0049r8ujqh5m4rgx"},{"post_id":"cih8q8rum0045r8uj33slcxwh","tag_id":"cih8q8rup0047r8ujf3d53yuc","_id":"cih8q8ruq004ar8ujlvt7jjc4"},{"post_id":"cih8q8rum0045r8uj33slcxwh","tag_id":"cih8q8rup0048r8uj27tld3hv","_id":"cih8q8rur004br8ujtgy4rsqr"},{"post_id":"cih8q8rut004cr8uj3xnlfi0o","tag_id":"cih8q8ruv004er8ujhz07j8am","_id":"cih8q8ruy004hr8uj58mqp0fa"},{"post_id":"cih8q8rut004cr8uj3xnlfi0o","tag_id":"cih8q8ruw004fr8ujxbtz886q","_id":"cih8q8ruy004ir8ujg4wxn74b"},{"post_id":"cih9yaqwn00003oujkoqrs978","tag_id":"cih9yaqwu00023oujupz2lzmn","_id":"cih9yaqxc00043oujrhtu4lh6"},{"post_id":"cih9yaqwn00003oujkoqrs978","tag_id":"cih8q8ruc003vr8uj1vnk4pbj","_id":"cih9yaqxc00053ouj4r8wdd9q"},{"post_id":"cih9yaqwn00003oujkoqrs978","tag_id":"cih8q8rud003xr8ujh64f78sy","_id":"ciha2etq1000160ujq5qn4qjf"},{"post_id":"cih9yaqwn00003oujkoqrs978","tag_id":"cih8q8ruc003ur8uj8lxpzeqk","_id":"ciha2etq2000260uji0wq30jw"}],"Tag":[{"name":"Machine Learning","_id":"cih8q8rnu000dr8uj3t80zol4"},{"name":"Python","_id":"cih8q8rnx000er8ujvansfftt"},{"name":"BioInfo","_id":"cih8q8ro5000kr8uj3prbri7d"},{"name":"normalization","_id":"cih8q8roh000wr8ujr9dctn3r"},{"name":"正则表达式","_id":"cih8q8rot0014r8ujb48q86fy"},{"name":"preprocessing","_id":"cih8q8roz0019r8ujqxh64as1"},{"name":"Feature Engineering","_id":"cih8q8rp5001er8ujuakeig91"},{"name":"GitHub","_id":"cih8q8rpb001jr8uj41iep2t9"},{"name":"总结","_id":"cih8q8rpn001rr8ujntgcowrk"},{"name":"译文","_id":"cih8q8rqf0028r8ujf8sdp37w"},{"name":"函数计时器","_id":"cih8q8rqu002hr8uj6dii4qew"},{"name":"CV","_id":"cih8q8rr0002lr8ujoe7xivrf"},{"name":"AI","_id":"cih8q8rr1002mr8ujha55y09g"},{"name":"scikit-learn","_id":"cih8q8rs80037r8ujq0bdkpr4"},{"name":"SublimeLinter","_id":"cih8q8rt9003pr8ujw2mwxxyn"},{"name":"C++","_id":"cih8q8ruc003ur8uj8lxpzeqk"},{"name":"数据结构","_id":"cih8q8ruc003vr8uj1vnk4pbj"},{"name":"排序算法","_id":"cih8q8rud003xr8ujh64f78sy"},{"name":"希尔排序","_id":"cih8q8rue003yr8uj9fhgmi8u"},{"name":"简单插入排序","_id":"cih8q8ruf003zr8uj1kx2mno5"},{"name":"list","_id":"cih8q8rup0047r8ujf3d53yuc"},{"name":"tuple","_id":"cih8q8rup0048r8uj27tld3hv"},{"name":"Linux","_id":"cih8q8ruv004er8ujhz07j8am"},{"name":"Shell","_id":"cih8q8ruw004fr8ujxbtz886q"},{"name":"归并排序","_id":"cih9yaqwu00023oujupz2lzmn"},{"name":"算法","_id":"cih9yaqxa00033ouju2wmkbk8"}]}}